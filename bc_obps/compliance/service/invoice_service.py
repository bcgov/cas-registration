import base64
from decimal import ROUND_HALF_UP, Decimal
import logging
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Tuple, Optional, Generator
from django.contrib.staticfiles.storage import staticfiles_storage
from django.template.loader import get_template
from django.template.exceptions import TemplateDoesNotExist

# Type ignore for weasyprint since it lacks stubs
from weasyprint import HTML  # type: ignore

logger = logging.getLogger(__name__)


class InvoiceService:
    """Service for generating PDF invoices for compliance obligations"""

    CHUNK_SIZE = 64 * 1024

    # ———————— hardcode Base64 for logo.png ————————
    _LOGO_BASE64 = (
        ""
    )

    @classmethod
    def generate_invoice_pdf(
        cls,
        compliance_report_version_id: Optional[int] = None,
    ) -> Tuple[Generator[bytes, None, None], str, int]:
        """
        Generate a PDF invoice and return a generator that yields chunks of the PDF data.

        Args:
            compliance_report_version_id: ID of the compliance summary (not used in mock version)

        Returns:
            Tuple of (PDF data generator, filename, total_size_in_bytes)
        """
        context = InvoiceService._prepare_invoice_context()       
        # Use the embedded Base64 rather than reading a file
        context["logo_base64"] = cls._LOGO_BASE64

        try:
            template = get_template('invoice.html')
        except TemplateDoesNotExist:
            logger.error("Invoice template 'invoice.html' not found")
            raise ValueError("Failed to generate invoice: template not found")

        html_string = template.render(context)

        try:
            pdf_file = HTML(string=html_string).write_pdf()
        except Exception as e:
            logger.error(f"Failed to generate PDF: {str(e)}")
            raise ValueError("Failed to generate PDF invoice")

        filename = f"invoice_{context['invoice_number']}_{datetime.now().strftime('%Y%m%d')}.pdf"
        total_size = len(pdf_file)

        def pdf_generator() -> Generator[bytes, None, None]:
            for i in range(0, total_size, cls.CHUNK_SIZE):
                yield pdf_file[i : i + cls.CHUNK_SIZE]

        return pdf_generator(), filename, total_size

    @staticmethod
    def _prepare_invoice_context() -> Dict[str, Any]:
        """
        Prepare context data for the invoice template, including a list of fee_items
        and a total_amount that correctly sums them.
        """
        EQUIVALENT_NUMERIC = Decimal("16000.00")

        invoice_number        = "OBI000004"
        invoice_date          = "Dec 6, 2025"
        invoice_due_date      = "Jan 5, 2026"
        invoice_printed_date  = "Dec 4, 2025"
        operator_name         = "Colour Co."
        operator_address_line1= "111 COLOUR ST"
        operator_address_line2= "VANCOUVER, BC, V1V 1V1"
        operation_name        = "Pink Operation"
        operation_address_line1= "111 PINK RD"
        operation_address_line2= "VANCOUVER, BC, V1V 1V1"
        obligation_id         = "24-0001-1-1"
        compliance_obligation = "200.0000"

        # Build a list of 50 fee_items, each using a Decimal for "amount_numeric"
        fee_items: list[Dict[str, Any]] = []
        for i in range(1, 51):
            fee_items.append({
                "date":        invoice_date,
                "description": f"GGIRCA Compliance Obligation – item #{i}",
                "amount_numeric": EQUIVALENT_NUMERIC,
                # We’ll also store a formatted‐string version for convenience:
                "amount":      f"${EQUIVALENT_NUMERIC:,.2f}",
            })

        # Sum the numeric amounts:
        total_amount_numeric = sum(item["amount_numeric"] for item in fee_items)

        # Format that sum as a "$xx,xxx.xx" string
        # (ROUND_HALF_UP ensures normal “banker’s‐rounding” behavior)
        total_amount = f"${total_amount_numeric.quantize(Decimal('0.01'), rounding=ROUND_HALF_UP):,}"

        context = {
            "invoice_number":        invoice_number,
            "invoice_date":          invoice_date,
            "invoice_due_date":      invoice_due_date,
            "invoice_printed_date":  invoice_printed_date,
            "operator_name":         operator_name,
            "operator_address_line1":operator_address_line1,
            "operator_address_line2":operator_address_line2,
            "operation_name":        operation_name,
            "operation_address_line1":operation_address_line1,
            "operation_address_line2":operation_address_line2,
            "obligation_id":         obligation_id,
            "compliance_obligation": compliance_obligation,
            "fee_items":            fee_items,
            "total_amount":         total_amount,
        }
        return context
