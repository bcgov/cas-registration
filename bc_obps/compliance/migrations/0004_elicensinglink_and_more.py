# Generated by Django 5.0.13 on 2025-03-19 00:47

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('compliance', '0003_remove_historicalcomplianceproduct_archived_by_and_more'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('registration', '0094_V2_0_1'),
    ]

    operations = [
        migrations.CreateModel(
            name='ELicensingLink',
            fields=[
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'id',
                    models.UUIDField(
                        db_comment='Unique identifier for the eLicensing link',
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ('object_id', models.UUIDField(db_comment='The ID of the CAS object this link relates to')),
                (
                    'object_kind',
                    models.CharField(
                        choices=[('Client', 'Client'), ('Invoice', 'Invoice'), ('Fee', 'Fee'), ('Payment', 'Payment')],
                        db_comment='The type of eLicensing object (client, invoice, fee, etc.)',
                        default='Client',
                        max_length=20,
                    ),
                ),
                (
                    'elicensing_object_id',
                    models.CharField(
                        blank=True, db_comment='The object ID in the eLicensing system', max_length=50, null=True
                    ),
                ),
                (
                    'last_sync_at',
                    models.DateTimeField(
                        blank=True,
                        db_comment='The timestamp when this object was last synced with eLicensing',
                        null=True,
                    ),
                ),
                (
                    'sync_status',
                    models.CharField(
                        blank=True,
                        db_comment='Status of the last sync operation with eLicensing',
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'content_type',
                    models.ForeignKey(
                        db_comment='The type of CAS object this link relates to',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='+',
                        to='contenttypes.contenttype',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_link',
                'db_table_comment': 'A table to store links between system objects and eLicensing objects',
                'abstract': False,
                'indexes': [
                    models.Index(fields=['content_type', 'object_id'], name='elicensing__content_e96062_idx'),
                    models.Index(fields=['object_kind'], name='elicensing__object__52bb61_idx'),
                    models.Index(fields=['elicensing_object_id'], name='elicensing__elicens_72c88d_idx'),
                ],
                'unique_together': {('content_type', 'object_id', 'object_kind')},
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinglink',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='0682040260049145920400b7f59fcb71a1b2e6a7',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_8c3f9',
                    table='erc"."elicensing_link',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinglink',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='e2d53194c61180362c02d38254d6d330086cfdb4',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_cc4fd',
                    table='erc"."elicensing_link',
                    when='BEFORE',
                ),
            ),
        ),
    ]
