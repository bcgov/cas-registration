# Generated by Django 5.0.14 on 2025-05-18 21:44

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('compliance', '0003_seed_compliance_charge_rates'),
        ('registration', '0113_V3_2_0'),
    ]

    operations = [
        migrations.CreateModel(
            name='IssuanceRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'status',
                    models.CharField(
                        choices=[('awaiting', 'Awaiting approval'), ('approved', 'Approved, credits issued in BCCR')],
                        db_comment='The status of the issuance request',
                        default='awaiting',
                        max_length=20,
                    ),
                ),
                (
                    'earned_credits',
                    models.IntegerField(blank=True, db_comment='The number of earned credits', null=True),
                ),
                ('bccr_trading_name', models.CharField(blank=True, db_comment='The BCCR trading name', max_length=255)),
                ('directors_comments', models.TextField(blank=True, db_comment='Comments from the director')),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."issuance_request',
                'db_table_comment': 'A table to store issuance requests for compliance report versions',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='compliancereportversion',
            name='issuance_request',
            field=models.OneToOneField(
                blank=True,
                db_comment='The issuance request associated with this compliance report version',
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='compliance_report_version',
                to='compliance.issuancerequest',
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='issuancerequest',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='5c37753519c270b744f3c2cc654719a516e764a8',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a7635',
                    table='erc"."issuance_request',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='issuancerequest',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='787db7cb9262920f8355b6084b101307f1663859',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_b9028',
                    table='erc"."issuance_request',
                    when='BEFORE',
                ),
            ),
        ),
    ]
