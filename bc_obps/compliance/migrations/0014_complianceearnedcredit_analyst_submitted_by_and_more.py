# Generated by Django 5.1.10 on 2025-07-07 22:18

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('compliance', '0013_complianceearnedcredit_restrict_bccr_trading_name_unless_not_issued'),
    ]

    operations = [
        migrations.AddField(
            model_name='complianceearnedcredit',
            name='analyst_submitted_by',
            field=models.ForeignKey(
                blank=True,
                db_comment='The analyst who provided the suggestion',
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='compliance_earned_credits_analyst_submitted_by',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='complianceearnedcredit',
            name='analyst_submitted_date',
            field=models.DateField(
                blank=True, db_comment='The date on which the analyst provided the suggestion', null=True
            ),
        ),
        migrations.AddField(
            model_name='complianceearnedcredit',
            name='analyst_suggestion',
            field=models.CharField(
                blank=True,
                choices=[
                    ('Ready to approve', 'Ready To Approve'),
                    ('Requiring change of BCCR Holding Account ID', 'Requiring Change Of Bccr Holding Account Id'),
                    ('Requiring supplementary report', 'Requiring Supplementary Report'),
                ],
                db_comment='The suggestion from the analyst on whether or not to recommend issuance of the credits',
                max_length=100,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='complianceearnedcredit',
            name='bccr_holding_account_id',
            field=models.CharField(
                blank=True,
                db_comment='The BCCR holding account ID. This is the ID of the account holder in the BC Carbon Registry',
                max_length=15,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='complianceearnedcredit',
            name='issuance_requested_date',
            field=models.DateField(
                blank=True,
                db_comment='The date on which the earned credits were requested to be issued by the industry user',
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='historicalcomplianceearnedcredit',
            name='analyst_submitted_by',
            field=models.ForeignKey(
                blank=True,
                db_comment='The analyst who provided the suggestion',
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='+',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='historicalcomplianceearnedcredit',
            name='analyst_submitted_date',
            field=models.DateField(
                blank=True, db_comment='The date on which the analyst provided the suggestion', null=True
            ),
        ),
        migrations.AddField(
            model_name='historicalcomplianceearnedcredit',
            name='analyst_suggestion',
            field=models.CharField(
                blank=True,
                choices=[
                    ('Ready to approve', 'Ready To Approve'),
                    ('Requiring change of BCCR Holding Account ID', 'Requiring Change Of Bccr Holding Account Id'),
                    ('Requiring supplementary report', 'Requiring Supplementary Report'),
                ],
                db_comment='The suggestion from the analyst on whether or not to recommend issuance of the credits',
                max_length=100,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='historicalcomplianceearnedcredit',
            name='bccr_holding_account_id',
            field=models.CharField(
                blank=True,
                db_comment='The BCCR holding account ID. This is the ID of the account holder in the BC Carbon Registry',
                max_length=15,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='historicalcomplianceearnedcredit',
            name='issuance_requested_date',
            field=models.DateField(
                blank=True,
                db_comment='The date on which the earned credits were requested to be issued by the industry user',
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name='complianceearnedcredit',
            name='issuance_status',
            field=models.CharField(
                choices=[
                    ('Credits Not Issued in BCCR', 'Credits Not Issued'),
                    ('Issuance Requested', 'Issuance Requested'),
                    ('Changes Required', 'Changes Required'),
                    ('Approved', 'Approved'),
                    ('Declined', 'Declined'),
                ],
                db_comment='The status of this of the earned credits in this record.',
                default='Credits Not Issued in BCCR',
                max_length=100,
            ),
        ),
        migrations.AlterField(
            model_name='historicalcomplianceearnedcredit',
            name='issuance_status',
            field=models.CharField(
                choices=[
                    ('Credits Not Issued in BCCR', 'Credits Not Issued'),
                    ('Issuance Requested', 'Issuance Requested'),
                    ('Changes Required', 'Changes Required'),
                    ('Approved', 'Approved'),
                    ('Declined', 'Declined'),
                ],
                db_comment='The status of this of the earned credits in this record.',
                default='Credits Not Issued in BCCR',
                max_length=100,
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='populate_analyst_submission_info',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."analyst_comment" IS NOT NULL AND NOT (NEW."analyst_comment" = \'\' AND NEW."analyst_comment" IS NOT NULL))',
                    func="\n                    if new.analyst_comment is not null and new.analyst_comment != '' then\n                        new.analyst_submitted_date = current_date;\n                        new.analyst_submitted_by_id = (select nullif(current_setting('my.guid', true), ''));\n                    end if;\n                    return new;\n                ",
                    hash='cfd4e6e0c35af7d55530b588c7a6925323c5cdd2',
                    operation='INSERT OR UPDATE',
                    pgid='pgtrigger_populate_analyst_submission_info_be756',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='populate_issued_date_issued_by_when_approved',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."issuance_status" = \'Approved\')',
                    func="\n                    new.issued_date = current_date;\n                    new.issued_by_id = (select nullif(current_setting('my.guid', true), ''));\n                    return new;\n                ",
                    hash='68639bf62343dcc99df17b7431eb3a7be8473706',
                    operation='INSERT OR UPDATE',
                    pgid='pgtrigger_populate_issued_date_issued_by_when_approved_15893',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='populate_issuance_requested_date_when_requested',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."issuance_status" = \'Issuance Requested\')',
                    func='\n                    new.issuance_requested_date = current_date;\n                    return new;\n                ',
                    hash='5f98ac1e045adbb2b04d08592701ecfb1fae04e8',
                    operation='INSERT OR UPDATE',
                    pgid='pgtrigger_populate_issuance_requested_date_when_requested_209d9',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
    ]
