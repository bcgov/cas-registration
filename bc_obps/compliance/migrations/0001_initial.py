# Generated by Django 5.1.12 on 2025-09-19 18:59

import compliance.models.elicensing_interest_rate
import django.contrib.postgres.constraints
import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
import simple_history.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('registration', '0138_V3_20_0'),
        ('reporting', '0131_V3_20_0'),
        ('task_scheduler', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComplianceChargeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'rate',
                    models.DecimalField(
                        db_comment='The compliance charge rate in CAD dollars per tCO2e',
                        decimal_places=2,
                        max_digits=10,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'reporting_year',
                    models.OneToOneField(
                        db_comment='The associated reporting year for this compliance charge rate',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_charge_rate',
                        to='reporting.reportingyear',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_charge_rate',
                'db_table_comment': 'A table to store compliance charge rates by reporting year',
                'ordering': ['reporting_year'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceObligation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'obligation_id',
                    models.CharField(
                        db_comment='A human-readable identifier for the obligation in format YY-OOOO-R-V', max_length=30
                    ),
                ),
                (
                    'obligation_deadline',
                    models.DateField(
                        db_comment='Deadline date for meeting excess emissions obligations (November 30 of the following year), UTC-based'
                    ),
                ),
                (
                    'fee_amount_dollars',
                    models.DecimalField(
                        blank=True,
                        db_comment='The fee amount in CAD dollars',
                        decimal_places=2,
                        max_digits=20,
                        null=True,
                    ),
                ),
                ('fee_date', models.DateField(blank=True, db_comment='The date the fee was created', null=True)),
                (
                    'penalty_status',
                    models.CharField(
                        choices=[
                            ('NONE', 'None'),
                            ('ACCRUING', 'Accruing'),
                            ('PAID', 'Paid'),
                            ('NOT PAID', 'Not Paid'),
                        ],
                        db_comment='The status of the penalty (e.g., NONE, ACCRUING, PAID)',
                        default='NONE',
                        max_length=50,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_obligation',
                'db_table_comment': 'A table to store compliance obligations',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompliancePenalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('fee_date', models.DateField(blank=True, db_comment='The date the fee was created', null=True)),
                (
                    'accrual_start_date',
                    models.DateField(
                        db_comment="The date on which the penalty began accruing. It will always be the day after the obligation's due date"
                    ),
                ),
                (
                    'penalty_amount',
                    models.DecimalField(
                        db_comment='The total amount of the penalty to be paid',
                        decimal_places=2,
                        default=0.0,
                        max_digits=20,
                    ),
                ),
                (
                    'penalty_type',
                    models.CharField(
                        choices=[('Automatic Overdue', 'Automatic Overdue'), ('Late Submission', 'Late Submission')],
                        db_comment='The type of penalty.',
                        max_length=100,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_obligation',
                    models.ForeignKey(
                        db_comment='The compliance obligation not paid on time which triggered this penalty',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_penalties',
                        to='compliance.complianceobligation',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_penalty',
                'db_table_comment': 'This table contains compliance penalty data for obligations that were not met before their due date',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompliancePenaltyAccrual',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateField(db_comment='The date of accrual for this record')),
                (
                    'daily_penalty',
                    models.DecimalField(
                        db_comment='The penalty amount for this date calculated from the rate in the compliance_penalty_rate table',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'daily_compounded',
                    models.DecimalField(
                        db_comment='The amount of the penalty compounded for this date', decimal_places=2, max_digits=20
                    ),
                ),
                (
                    'accumulated_penalty',
                    models.DecimalField(
                        db_comment='The accumulated amount of base penalty charges up to this date',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'accumulated_compounded',
                    models.DecimalField(
                        db_comment='The accumulated amount of compounded penalty up to this date',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_penalty',
                    models.ForeignKey(
                        db_comment='The penalty record that this daily accrual record relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_penalty_accruals',
                        to='compliance.compliancepenalty',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_penalty_accrual',
                'db_table_comment': 'This table contains the daily record of how a penalty was accrued',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompliancePeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateField(db_comment='Start date of the compliance period, UTC-based')),
                ('end_date', models.DateField(db_comment='End date of the compliance period, UTC-based')),
                (
                    'compliance_deadline',
                    models.DateField(db_comment='Deadline date for compliance submissions, UTC-based'),
                ),
                (
                    'invoice_generation_date',
                    models.DateField(
                        db_comment='Date on which invoices for this compliance period should be generated'
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'reporting_year',
                    models.ForeignKey(
                        db_comment='The associated reporting year for this compliance period',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_period',
                        to='reporting.reportingyear',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_period',
                'db_table_comment': 'A table to store compliance periods',
                'ordering': ['-end_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompliancePenaltyRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'rate',
                    models.DecimalField(
                        db_comment='The compliance Penalty rate applied daily if an obligation is not paid on time',
                        decimal_places=6,
                        max_digits=6,
                    ),
                ),
                (
                    'is_current_rate',
                    models.BooleanField(
                        db_comment='Boolean field signifies whether or not this rate is the rate currently in use',
                        default=False,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_period',
                    models.OneToOneField(
                        db_comment='The associated compliance_period for this compliance penalty rate',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_penalty_rate',
                        to='compliance.complianceperiod',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_penalty_rate',
                'db_table_comment': 'A table to store compliance penalty rates by reporting year',
                'ordering': ['compliance_period'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'bccr_subaccount_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR subaccount ID associated with this compliance report. This is nullable because not all compliance reports will have a BCCR subaccount to deal with the compliance units.',
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_period',
                    models.ForeignKey(
                        db_comment='The compliance period this compliance report is for',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_reports',
                        to='compliance.complianceperiod',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'report',
                    models.OneToOneField(
                        db_comment='The emissions report associated with this compliance report',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_report',
                        to='reporting.report',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_report',
                'db_table_comment': 'This table is the parent anchor table of all compliance data for an operation and compliance period',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceReportVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'excess_emissions_delta_from_previous',
                    models.DecimalField(
                        db_comment='The delta of the excess emissions reported in the compliance_summary for this version and the previous one',
                        decimal_places=4,
                        default=0.0,
                        max_digits=20,
                    ),
                ),
                (
                    'credited_emissions_delta_from_previous',
                    models.DecimalField(
                        db_comment='The delta of the credited emissions reported in the compliance_summary for this version and the previous one',
                        decimal_places=4,
                        default=0.0,
                        max_digits=20,
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('Obligation not met', 'Obligation Not Met'),
                            ('Obligation fully met', 'Obligation Fully Met'),
                            ('Obligation pending invoice creation', 'Obligation Pending Invoice Creation'),
                            ('Earned credits', 'Earned Credits'),
                            ('No obligation or earned credits', 'No Obligation Or Earned Credits'),
                            ('Superceded', 'Superceded'),
                        ],
                        db_comment='The status of this compliance report version. Options: [Obligation not met, Obligation fully met, Earned credits, No obligation or earned credits]',
                        max_length=100,
                    ),
                ),
                (
                    'is_supplementary',
                    models.BooleanField(
                        db_comment='Boolean value identifies whether this record is the result of a supplementary emissions report version',
                        default=False,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_report',
                    models.ForeignKey(
                        db_comment='The parent compliance report object that this compliance report version belongs to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_report_versions',
                        to='compliance.compliancereport',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'previous_version',
                    models.ForeignKey(
                        blank=True,
                        db_comment='Reference to the previous version of this compliance report version.',
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='subsequent_versions',
                        to='compliance.compliancereportversion',
                    ),
                ),
                (
                    'report_compliance_summary',
                    models.OneToOneField(
                        db_comment='The compliance summary data from the reporting module that this compliance report version relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_report_version',
                        to='reporting.reportcompliancesummary',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_report_version',
                'db_table_comment': 'The compliance_report_version table records are generated from the compliance summary data when an emission report is submitted',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='complianceobligation',
            name='compliance_report_version',
            field=models.OneToOneField(
                db_comment='The compliance report version this obligation belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='obligation',
                to='compliance.compliancereportversion',
            ),
        ),
        migrations.CreateModel(
            name='ComplianceEarnedCredit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'earned_credits_amount',
                    models.PositiveIntegerField(db_comment='The amount of earned credits. Whole numbers only.'),
                ),
                (
                    'issuance_status',
                    models.CharField(
                        choices=[
                            ('Credits Not Issued in BCCR', 'Credits Not Issued'),
                            ('Issuance Requested', 'Issuance Requested'),
                            ('Changes Required', 'Changes Required'),
                            ('Approved', 'Approved'),
                            ('Declined', 'Declined'),
                        ],
                        db_comment='The status of this of the earned credits in this record.',
                        default='Credits Not Issued in BCCR',
                        max_length=100,
                    ),
                ),
                (
                    'issued_date',
                    models.DateField(
                        blank=True, db_comment='The date on which the earned credits were issued', null=True
                    ),
                ),
                (
                    'analyst_submitted_date',
                    models.DateField(
                        blank=True, db_comment='The date on which the analyst provided the suggestion', null=True
                    ),
                ),
                (
                    'bccr_holding_account_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR holding account ID. This is the ID of the account holder in the BC Carbon Registry',
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    'bccr_trading_name',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR trading name. This is the name of the account holder in the BC Carbon Registry',
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    'bccr_project_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR project ID associated with this earned credit, for idempotency.',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'bccr_issuance_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR issuance ID associated with this earned credit, for idempotency.',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'analyst_suggestion',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('Ready to approve', 'Ready To Approve'),
                            (
                                'Requiring change of BCCR Holding Account ID',
                                'Requiring Change Of Bccr Holding Account Id',
                            ),
                            ('Requiring supplementary report', 'Requiring Supplementary Report'),
                        ],
                        db_comment='The suggestion from the analyst on whether or not to recommend issuance of the credits',
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    'analyst_comment',
                    models.TextField(
                        blank=True,
                        db_comment='Comments from an analyst. Made when deciding whether or not to recommend issuance from the director',
                        null=True,
                    ),
                ),
                (
                    'director_comment',
                    models.TextField(
                        blank=True,
                        db_comment='Comments from the director. Made when deciding whether or not to issue the credits',
                        null=True,
                    ),
                ),
                (
                    'issuance_requested_date',
                    models.DateField(
                        blank=True,
                        db_comment='The date on which the earned credits were requested to be issued by the industry user',
                        null=True,
                    ),
                ),
                (
                    'analyst_submitted_by',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The analyst who provided the suggestion',
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_earned_credits_analyst_submitted_by',
                        to='registration.user',
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'issued_by',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The user who issued the earned credits',
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='compliance_earned_credits_issued_by',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_report_version',
                    models.OneToOneField(
                        db_comment='The compliance report version this earned_credit record belongs to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_earned_credit',
                        to='compliance.compliancereportversion',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_earned_credit',
                'db_table_comment': 'A table to store BC earned credit compliance data. Earned credits are described in GGIRCA (https://www.bclaws.gov.bc.ca/civix/document/id/complete/statreg/14029_01#division_d0e1496) Division 4',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ElicensingClientOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'client_object_id',
                    models.IntegerField(
                        db_comment='The clientObjectId identifier from elicensing for the related client'
                    ),
                ),
                (
                    'client_guid',
                    models.UUIDField(db_comment='The clientGuid identifier from elicensing for the related client'),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'operator',
                    models.ForeignKey(
                        db_comment='Foreign key to the BCIERS operator object for this record',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='+',
                        to='registration.operator',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_client_operator',
                'db_table_comment': 'A table to define the relationship between a BCIERS Operator record and the corresponding client record in elicensing',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ElicensingInterestRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'interest_rate',
                    models.DecimalField(db_comment='The interest rate from elicensing', decimal_places=6, max_digits=6),
                ),
                (
                    'start_date',
                    models.DateField(db_comment='The date that the rate took effect. Date is pulled from elicensing'),
                ),
                (
                    'end_date',
                    models.DateField(
                        db_comment='The last date that the rate was in effect. Date is generated in BCIERS when a new interest rate record is pulled from elicensing. End date is one day before the start date of the new record.'
                    ),
                ),
                (
                    'is_current_rate',
                    models.BooleanField(
                        db_comment='Indicates whether this rate is the rate currently in use', default=False
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_interest_rate',
                'db_table_comment': 'Table contains the interest rate from elicensing',
                'constraints': [
                    django.contrib.postgres.constraints.ExclusionConstraint(
                        expressions=[
                            (
                                compliance.models.elicensing_interest_rate.DateRange(
                                    'start_date', 'end_date', django.contrib.postgres.fields.ranges.RangeBoundary()
                                ),
                                '&&',
                            )
                        ],
                        name='exclude_overlapping_interest_rate_periods',
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(('is_current_rate', True)),
                        fields=('is_current_rate',),
                        name='unique_current_rate',
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name='ElicensingInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('invoice_number', models.CharField(db_comment='The invoice number from elicensing.')),
                (
                    'due_date',
                    models.DateField(db_comment='The due date of the invoice. invoicePaymentDueDate in elicensing'),
                ),
                (
                    'outstanding_balance',
                    models.DecimalField(
                        db_comment='The outstanding balance for this invoice. invoiceOutstandingBalance in elicensing',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'invoice_fee_balance',
                    models.DecimalField(
                        db_comment='The balance of fees for this invoice. invoiceFeeBalance in elicensing',
                        decimal_places=2,
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    'invoice_interest_balance',
                    models.DecimalField(
                        db_comment='The balance of interest for this invoice. invoiceInterestBalance in elicensing',
                        decimal_places=2,
                        max_digits=20,
                        null=True,
                    ),
                ),
                (
                    'is_void',
                    models.BooleanField(
                        db_comment='Boolean field indicates whether this invoice has been voided', default=False
                    ),
                ),
                (
                    'last_refreshed',
                    models.DateTimeField(
                        db_comment='The last time (UTC) that the invoice and its child data was successfully refreshed via the elicensing api'
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'elicensing_client_operator',
                    models.ForeignKey(
                        db_comment='Foreign key to the elicensing_client_operator record for the client who this invoice is for',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='elicensing_invoices',
                        to='compliance.elicensingclientoperator',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_invoice',
                'db_table_comment': 'Table contains invoice data from elicensing',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='compliancepenalty',
            name='elicensing_invoice',
            field=models.OneToOneField(
                blank=True,
                db_comment='The invoice from elicensing that this penalty created',
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='compliance_penalty',
                to='compliance.elicensinginvoice',
            ),
        ),
        migrations.AddField(
            model_name='complianceobligation',
            name='elicensing_invoice',
            field=models.OneToOneField(
                blank=True,
                db_comment='Foreign key to the elicensing_invoice in the OBPS data. The data in the elicensing_invoice table comes from elicensing',
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='compliance_obligation',
                to='compliance.elicensinginvoice',
            ),
        ),
        migrations.CreateModel(
            name='ElicensingLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('object_id', models.IntegerField(db_comment='The objectId of the line item from elicensing')),
                ('guid', models.UUIDField(db_comment='The guid of the line item from elicensing')),
                ('fee_date', models.DateField(db_comment='The date of the fee. feeDueDate in elicensing')),
                (
                    'description',
                    models.CharField(blank=True, db_comment='Description of the line item (fee).', null=True),
                ),
                (
                    'base_amount',
                    models.DecimalField(
                        db_comment='The amount of this line item. baseAmount in elicensing',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'line_item_type',
                    models.CharField(
                        choices=[('Fee', 'Fee')], db_comment='The type of line item from elicensing.', default='Fee'
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'elicensing_invoice',
                    models.ForeignKey(
                        db_comment='Foreign key to the OBPS elicensing_invoice table.',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='elicensing_line_items',
                        to='compliance.elicensinginvoice',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_line_item',
                'db_table_comment': 'Table contains line item data on an invoice from elicensing',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ElicensingAdjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'adjustment_object_id',
                    models.IntegerField(
                        db_comment='The object id of the adjustment in elicensing (adjustmentObjectId)'
                    ),
                ),
                (
                    'amount',
                    models.DecimalField(
                        db_comment='The amount of this adjustment in dollars from elicensing',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'adjustment_date',
                    models.DateField(blank=True, db_comment='date of the adjustment in elicensing', null=True),
                ),
                (
                    'reason',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('Supplementary Report Adjustment', 'Supplementary Report Adjustment'),
                            (
                                'Supplementary Report Adjustment to Void Invoice',
                                'Supplementary Report Adjustment To Void Invoice',
                            ),
                            ('Compliance Units Applied', 'Compliance Units Applied'),
                        ],
                        db_comment='Reason for adjustment in elicensing',
                        null=True,
                    ),
                ),
                ('type', models.CharField(blank=True, db_comment='Type of adjustment in elicensing', null=True)),
                ('comment', models.CharField(blank=True, db_comment='Comments on adjustment in elicensing', null=True)),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'supplementary_compliance_report_version',
                    models.ForeignKey(
                        blank=True,
                        db_comment='Foreign key to the supplementary compliance report version that triggered this adjustment. When a supplementary report reduces excess emissions, an adjustment is created and applied to the existing invoice from the original compliance report version, but this field tracks which supplementary version caused the adjustment.',
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='elicensing_adjustments',
                        to='compliance.compliancereportversion',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
                (
                    'elicensing_line_item',
                    models.ForeignKey(
                        db_comment='Foreign key to the line item record this adjustment relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='elicensing_adjustments',
                        to='compliance.elicensinglineitem',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_adjustment',
                'db_table_comment': 'Table contains adjustment data from elicensing',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ElicensingPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'payment_object_id',
                    models.IntegerField(db_comment='The object id of the payment in elicensing (paymentObjectId)'),
                ),
                (
                    'amount',
                    models.DecimalField(
                        db_comment='The amount of this payment in dollars from elicensing',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'received_date',
                    models.DateField(
                        blank=True,
                        db_comment='receivedDate of the payment in elicensing. The date when payment is received in the OBPS bank account. Receive Date can be backdated. This is the date that impacts interest calculation.',
                        null=True,
                    ),
                ),
                (
                    'method',
                    models.CharField(
                        blank=True,
                        db_comment='The method used to make the payment (e.g. wire transfer) from elicensing.',
                        null=True,
                    ),
                ),
                (
                    'receipt_number',
                    models.CharField(blank=True, db_comment='Receipt number of the payment in elicensing.', null=True),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'elicensing_line_item',
                    models.ForeignKey(
                        db_comment='Foreign key to the line item record this payment relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='elicensing_payments',
                        to='compliance.elicensinglineitem',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_payment',
                'db_table_comment': 'Table contains payment data from elicensing',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalComplianceEarnedCredit',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'earned_credits_amount',
                    models.PositiveIntegerField(db_comment='The amount of earned credits. Whole numbers only.'),
                ),
                (
                    'issuance_status',
                    models.CharField(
                        choices=[
                            ('Credits Not Issued in BCCR', 'Credits Not Issued'),
                            ('Issuance Requested', 'Issuance Requested'),
                            ('Changes Required', 'Changes Required'),
                            ('Approved', 'Approved'),
                            ('Declined', 'Declined'),
                        ],
                        db_comment='The status of this of the earned credits in this record.',
                        default='Credits Not Issued in BCCR',
                        max_length=100,
                    ),
                ),
                (
                    'issued_date',
                    models.DateField(
                        blank=True, db_comment='The date on which the earned credits were issued', null=True
                    ),
                ),
                (
                    'analyst_submitted_date',
                    models.DateField(
                        blank=True, db_comment='The date on which the analyst provided the suggestion', null=True
                    ),
                ),
                (
                    'bccr_holding_account_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR holding account ID. This is the ID of the account holder in the BC Carbon Registry',
                        max_length=15,
                        null=True,
                    ),
                ),
                (
                    'bccr_trading_name',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR trading name. This is the name of the account holder in the BC Carbon Registry',
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    'bccr_project_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR project ID associated with this earned credit, for idempotency.',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'bccr_issuance_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BCCR issuance ID associated with this earned credit, for idempotency.',
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    'analyst_suggestion',
                    models.CharField(
                        blank=True,
                        choices=[
                            ('Ready to approve', 'Ready To Approve'),
                            (
                                'Requiring change of BCCR Holding Account ID',
                                'Requiring Change Of Bccr Holding Account Id',
                            ),
                            ('Requiring supplementary report', 'Requiring Supplementary Report'),
                        ],
                        db_comment='The suggestion from the analyst on whether or not to recommend issuance of the credits',
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    'analyst_comment',
                    models.TextField(
                        blank=True,
                        db_comment='Comments from an analyst. Made when deciding whether or not to recommend issuance from the director',
                        null=True,
                    ),
                ),
                (
                    'director_comment',
                    models.TextField(
                        blank=True,
                        db_comment='Comments from the director. Made when deciding whether or not to issue the credits',
                        null=True,
                    ),
                ),
                (
                    'issuance_requested_date',
                    models.DateField(
                        blank=True,
                        db_comment='The date on which the earned credits were requested to be issued by the industry user',
                        null=True,
                    ),
                ),
                ('history_user_id', models.UUIDField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'analyst_submitted_by',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The analyst who provided the suggestion',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_report_version',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The compliance report version this earned_credit record belongs to',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='compliance.compliancereportversion',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'issued_by',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The user who issued the earned credits',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical compliance earned credit',
                'verbose_name_plural': 'historical compliance earned credits',
                'db_table': 'erc_history"."compliance_earned_credit_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalComplianceObligation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'obligation_id',
                    models.CharField(
                        db_comment='A human-readable identifier for the obligation in format YY-OOOO-R-V', max_length=30
                    ),
                ),
                (
                    'obligation_deadline',
                    models.DateField(
                        db_comment='Deadline date for meeting excess emissions obligations (November 30 of the following year), UTC-based'
                    ),
                ),
                (
                    'fee_amount_dollars',
                    models.DecimalField(
                        blank=True,
                        db_comment='The fee amount in CAD dollars',
                        decimal_places=2,
                        max_digits=20,
                        null=True,
                    ),
                ),
                ('fee_date', models.DateField(blank=True, db_comment='The date the fee was created', null=True)),
                (
                    'penalty_status',
                    models.CharField(
                        choices=[
                            ('NONE', 'None'),
                            ('ACCRUING', 'Accruing'),
                            ('PAID', 'Paid'),
                            ('NOT PAID', 'Not Paid'),
                        ],
                        db_comment='The status of the penalty (e.g., NONE, ACCRUING, PAID)',
                        default='NONE',
                        max_length=50,
                    ),
                ),
                ('history_user_id', models.UUIDField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_report_version',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The compliance report version this obligation belongs to',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='compliance.compliancereportversion',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'elicensing_invoice',
                    models.ForeignKey(
                        blank=True,
                        db_comment='Foreign key to the elicensing_invoice in the OBPS data. The data in the elicensing_invoice table comes from elicensing',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='compliance.elicensinginvoice',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical compliance obligation',
                'verbose_name_plural': 'historical compliance obligations',
                'db_table': 'erc_history"."compliance_obligation_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancechargerate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='c3e46cd2942237358280345fb83a42333fee51fa',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_2cb42',
                    table='erc"."compliance_charge_rate',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancechargerate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='5fca83b3504eb217848db1223ae94a412f3e6931',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_83590',
                    table='erc"."compliance_charge_rate',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyaccrual',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='2852d0fe54840d16dea6824ed34cd7ed530e2b7d',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_e5c7a',
                    table='erc"."compliance_penalty_accrual',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyaccrual',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='83adb21f05ebc489a0f214083a8df2307d09f1af',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_d5e9b',
                    table='erc"."compliance_penalty_accrual',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceperiod',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='d49e155385a5d6f2e895a70ba46a86a69909e150',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a0242',
                    table='erc"."compliance_period',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceperiod',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='f24eb2c3c50a41aa80505e22d3c9da4917f3059f',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_fe1ba',
                    table='erc"."compliance_period',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyrate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='d16b6519e0128b0b8e2ea458109c5bfe7daf2131',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_f92a7',
                    table='erc"."compliance_penalty_rate',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyrate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='84140e2e1f74b4d71b612d3460aeb33180d26775',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_71d28',
                    table='erc"."compliance_penalty_rate',
                    when='BEFORE',
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name='compliancereport',
            constraint=models.UniqueConstraint(
                fields=('report', 'compliance_period'), name='unique_compliance_report_per_emission_report'
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereport',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='c8341e5589f19da7e302a8470f635c669c1a7e50',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_ff117',
                    table='erc"."compliance_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereport',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='68036acea24c45f8eef44efc89877e9297a4ec5e',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_94204',
                    table='erc"."compliance_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereportversion',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='dc7ca3bd21fa26f301d98664ddb88a08a9224b8e',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_5835e',
                    table='erc"."compliance_report_version',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereportversion',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='d1ad40e0b9a03daea8ca761286a5589b2c9eae85',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_69b47',
                    table='erc"."compliance_report_version',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='d45aa40faf6060e834a1d77d3c6cefa519d239dc',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_10e93',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='d9b359055fb79a4431a570fe4900b910874f5e4b',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_bad21',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='restrict_bccr_fields_unless_not_issued',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."bccr_trading_name" IS NULL OR NEW."bccr_trading_name" = \'\' OR NEW."bccr_holding_account_id" IS NULL OR NEW."bccr_holding_account_id" = \'\')',
                    func='\n                    if new.issuance_status != \'Credits Not Issued in BCCR\' then\n                        if (new.bccr_trading_name is null or new.bccr_trading_name = \'\') then\n                            raise exception \'bccr_trading_name cannot be empty unless issuance_status is "Credits Not Issued in BCCR"\';\n                        end if;\n                        if (new.bccr_holding_account_id is null or new.bccr_holding_account_id = \'\') then\n                            raise exception \'bccr_holding_account_id cannot be empty unless issuance_status is "Credits Not Issued in BCCR"\';\n                        end if;\n                    end if;\n                    return new;\n                ',
                    hash='e6923343450ca6a271150a0b899c47aac4b6ac78',
                    operation='INSERT OR UPDATE',
                    pgid='pgtrigger_restrict_bccr_fields_unless_not_issued_aa36a',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='populate_analyst_submission_info',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="\n                    -- Populate submission info whenever the analyst comment changes\n                    if old.analyst_comment is distinct from new.analyst_comment then\n                        new.analyst_submitted_date = current_date;\n                        new.analyst_submitted_by_id = (select nullif(current_setting('my.guid', true), ''));\n                    end if;\n                    return new;\n                ",
                    hash='c5474e37c0cdd565d9b73062d57d8f16130038da',
                    operation='UPDATE',
                    pgid='pgtrigger_populate_analyst_submission_info_be756',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='populate_issued_date_issued_by_on_decision',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."issuance_status" = \'Approved\')',
                    func="\n                    new.issued_date = current_date;\n                    new.issued_by_id = (select nullif(current_setting('my.guid', true), ''));\n                    return new;\n                ",
                    hash='8d84350bce01d127fc9427830465ed79b48ba469',
                    operation='UPDATE',
                    pgid='pgtrigger_populate_issued_date_issued_by_on_decision_fac9d',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceearnedcredit',
            trigger=pgtrigger.compiler.Trigger(
                name='populate_issuance_requested_date_when_requested',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (NEW."issuance_status" = \'Issuance Requested\')',
                    func='\n                    new.issuance_requested_date = current_date;\n                    return new;\n                ',
                    hash='30ab03943125239be269e638f61f21fbe106ebd7',
                    operation='UPDATE',
                    pgid='pgtrigger_populate_issuance_requested_date_when_requested_209d9',
                    table='erc"."compliance_earned_credit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensingclientoperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='a34dade89074dd60ec8bf7f8354d964dc9a0e266',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_e984e',
                    table='erc"."elicensing_client_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensingclientoperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='64e34dbc48afd9e8e27b164b3a419fda417e6f71',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_8f71f',
                    table='erc"."elicensing_client_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinginvoice',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='d6b8b74ecd79d3325689d7cc2894860fb465e5ec',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_146ba',
                    table='erc"."elicensing_invoice',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinginvoice',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='159f1e2e89dfc40c06ddd01c05c14505196dc25c',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_44bcd',
                    table='erc"."elicensing_invoice',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenalty',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='672fc34cfa422b8420b5cd2382ce7e8aa7f2502b',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_fd1fa',
                    table='erc"."compliance_penalty',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenalty',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='0599d6d71695b9963f84d42bc52011a7953fd113',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_558eb',
                    table='erc"."compliance_penalty',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceobligation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='58ea43552a105989f1da25f05ca10d5c4390531b',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a5195',
                    table='erc"."compliance_obligation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceobligation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='03e61678d48720c9d3d9ac1441f80a04def43933',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_50bbc',
                    table='erc"."compliance_obligation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinglineitem',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='3f22eacd4dd131cc15ae66fda162483bf93d22e4',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_58c12',
                    table='erc"."elicensing_line_item',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinglineitem',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='9768c78cf26ac450a3e5321e5f8570fab93547f9',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_bee62',
                    table='erc"."elicensing_line_item',
                    when='BEFORE',
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name='elicensingadjustment',
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ('reason__isnull', True),
                    models.Q(
                        (
                            'reason__in',
                            ['Supplementary Report Adjustment', 'Supplementary Report Adjustment to Void Invoice'],
                        ),
                        _negated=True,
                    ),
                    ('supplementary_compliance_report_version__isnull', False),
                    _connector='OR',
                ),
                name='supp_reasons_require_supp_version',
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensingadjustment',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='4275bd9647ea7c29cbc3b13f75a68dba9264f16b',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_db27e',
                    table='erc"."elicensing_adjustment',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensingadjustment',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='f96787a1834507f342eb0a8c31f41d09c4f80a01',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_1ec3b',
                    table='erc"."elicensing_adjustment',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensingpayment',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='b5c8314fbd0014f4f51cb5b4617ebc247bd0aeaf',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_933cb',
                    table='erc"."elicensing_payment',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensingpayment',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='f930baef7cb3bb4ec485ed541a58b2b04849e432',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_26ab3',
                    table='erc"."elicensing_payment',
                    when='BEFORE',
                ),
            ),
        ),
    ]
