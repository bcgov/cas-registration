# Generated by Django 5.0.14 on 2025-05-09 18:01

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
import simple_history.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('registration', '0110_add_non_regulated_naics_codes'),
        ('reporting', '0097_reportsignoff_acknowledgement_of_errors'),
    ]

    operations = [
        migrations.CreateModel(
            name='ComplianceChargeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'rate',
                    models.DecimalField(
                        db_comment='The compliance charge rate in CAD dollars per tCO2e',
                        decimal_places=2,
                        max_digits=10,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'reporting_year',
                    models.ForeignKey(
                        db_comment='The associated reporting year for this compliance charge rate',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_charge_rate',
                        to='reporting.reportingyear',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_charge_rate',
                'db_table_comment': 'A table to store compliance charge rates by reporting year',
                'ordering': ['reporting_year'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompliancePeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateField(db_comment='Start date of the compliance period, UTC-based')),
                ('end_date', models.DateField(db_comment='End date of the compliance period, UTC-based')),
                (
                    'compliance_deadline',
                    models.DateField(db_comment='Deadline date for compliance submissions, UTC-based'),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'reporting_year',
                    models.ForeignKey(
                        db_comment='The associated reporting year for this compliance period',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_period',
                        to='reporting.reportingyear',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_period',
                'db_table_comment': 'A table to store compliance periods',
                'ordering': ['-end_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_period',
                    models.ForeignKey(
                        db_comment='The compliance period this compliance report is for',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_reports',
                        to='compliance.complianceperiod',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'operation',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_reports',
                        to='registration.operation',
                    ),
                ),
                (
                    'report',
                    models.OneToOneField(
                        db_comment='The emissions report associated with this compliance report',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_report',
                        to='reporting.report',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_report',
                'db_table_comment': 'This table is the parent anchor table of all compliance data for an operation and compliance period',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceReportVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'excess_emissions_delta_from_previous',
                    models.DecimalField(
                        db_comment='The delta of the excess emissions reported in the compliance_summary for this version and the previous one',
                        decimal_places=4,
                        default=0.0,
                        max_digits=20,
                    ),
                ),
                (
                    'credited_emissions_delta_from_previous',
                    models.DecimalField(
                        db_comment='The delta of the credited emissions reported in the compliance_summary for this version and the previous one',
                        decimal_places=4,
                        default=0.0,
                        max_digits=20,
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('Obligation not met', 'Obligation Not Met'),
                            ('Obligation fully met', 'Obligation Fully Met'),
                            ('Earned credits', 'Earned Credits'),
                        ],
                        db_comment='The status of this compliance report version. Options: [Obligation not met, Obligation fully met, Earned credits]',
                        max_length=100,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_report',
                    models.ForeignKey(
                        db_comment='The parent compliance report object that this compliance report version belongs to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_summaries',
                        to='compliance.compliancereport',
                    ),
                ),
                (
                    'compliance_summary',
                    models.OneToOneField(
                        db_comment='The compliance summary from the reporting module that this compliance report version was generated from',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_report_version',
                        to='reporting.reportcompliancesummary',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_report_version',
                'db_table_comment': 'The compliance_report_version table records are generated from the compliance summary data when an emission report is submitted',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceObligation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'obligation_id',
                    models.CharField(
                        db_comment='A human-readable identifier for the obligation in format YY-OOOO-R-V', max_length=30
                    ),
                ),
                (
                    'obligation_deadline',
                    models.DateField(
                        db_comment='Deadline date for meeting excess emissions obligations (November 30 of the following year), UTC-based'
                    ),
                ),
                (
                    'fee_amount_dollars',
                    models.DecimalField(
                        blank=True,
                        db_comment='The fee amount in CAD dollars',
                        decimal_places=2,
                        max_digits=20,
                        null=True,
                    ),
                ),
                ('fee_date', models.DateField(blank=True, db_comment='The date the fee was created', null=True)),
                (
                    'penalty_status',
                    models.CharField(
                        choices=[('NONE', 'None'), ('ACCRUING', 'Accruing'), ('PAID', 'Paid')],
                        db_comment='The status of the penalty (e.g., NONE, ACCRUING, PAID)',
                        default='NONE',
                        max_length=50,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_report_version',
                    models.OneToOneField(
                        db_comment='The compliance summary this obligation belongs to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='obligation',
                        to='compliance.compliancereportversion',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_obligation',
                'db_table_comment': 'A table to store compliance obligations',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ELicensingLink',
            fields=[
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('id', models.AutoField(db_comment='Standard Django primary key', primary_key=True, serialize=False)),
                (
                    'elicensing_guid',
                    models.UUIDField(
                        db_comment='Unique identifier for the eLicensing system integration',
                        default=uuid.uuid4,
                        editable=False,
                    ),
                ),
                ('object_id', models.UUIDField(db_comment='The ID of the CAS object this link relates to')),
                (
                    'elicensing_object_kind',
                    models.CharField(
                        choices=[('Client', 'Client'), ('Invoice', 'Invoice'), ('Fee', 'Fee'), ('Payment', 'Payment')],
                        db_comment='The type of eLicensing object (client, invoice, fee, etc.)',
                        default='Client',
                        max_length=20,
                    ),
                ),
                (
                    'elicensing_object_id',
                    models.CharField(
                        blank=True, db_comment='The object ID in the eLicensing system', max_length=50, null=True
                    ),
                ),
                (
                    'last_sync_at',
                    models.DateTimeField(
                        blank=True,
                        db_comment='The timestamp when this object was last synced with eLicensing',
                        null=True,
                    ),
                ),
                (
                    'sync_status',
                    models.CharField(
                        blank=True,
                        db_comment='Status of the last sync operation with eLicensing',
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'content_type',
                    models.ForeignKey(
                        db_comment='The type of CAS object this link relates to',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='+',
                        to='contenttypes.contenttype',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_link',
                'db_table_comment': 'A table to store links between system objects and eLicensing objects',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalComplianceObligation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'obligation_id',
                    models.CharField(
                        db_comment='A human-readable identifier for the obligation in format YY-OOOO-R-V', max_length=30
                    ),
                ),
                (
                    'obligation_deadline',
                    models.DateField(
                        db_comment='Deadline date for meeting excess emissions obligations (November 30 of the following year), UTC-based'
                    ),
                ),
                (
                    'fee_amount_dollars',
                    models.DecimalField(
                        blank=True,
                        db_comment='The fee amount in CAD dollars',
                        decimal_places=2,
                        max_digits=20,
                        null=True,
                    ),
                ),
                ('fee_date', models.DateField(blank=True, db_comment='The date the fee was created', null=True)),
                (
                    'penalty_status',
                    models.CharField(
                        choices=[('NONE', 'None'), ('ACCRUING', 'Accruing'), ('PAID', 'Paid')],
                        db_comment='The status of the penalty (e.g., NONE, ACCRUING, PAID)',
                        default='NONE',
                        max_length=50,
                    ),
                ),
                ('history_user_id', models.UUIDField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_report_version',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The compliance summary this obligation belongs to',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='compliance.compliancereportversion',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical compliance obligation',
                'verbose_name_plural': 'historical compliance obligations',
                'db_table': 'erc_history"."compliance_obligation_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancechargerate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='d3e446e369c3a2f6b59e76b579fe59a5fb579e24',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_2cb42',
                    table='erc"."compliance_charge_rate',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancechargerate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='5fca83b3504eb217848db1223ae94a412f3e6931',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_83590',
                    table='erc"."compliance_charge_rate',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceperiod',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='65711014d8489d3441d2df44a6ba1b44bbfbca33',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a0242',
                    table='erc"."compliance_period',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceperiod',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='f24eb2c3c50a41aa80505e22d3c9da4917f3059f',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_fe1ba',
                    table='erc"."compliance_period',
                    when='BEFORE',
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name='compliancereport',
            constraint=models.UniqueConstraint(
                fields=('report', 'compliance_period'), name='unique_compliance_report_per_emission_report'
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereport',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='675f035783552f04613f2e9b9881030b631be2ea',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_ff117',
                    table='erc"."compliance_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereport',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='68036acea24c45f8eef44efc89877e9297a4ec5e',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_94204',
                    table='erc"."compliance_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereportversion',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='22ab4659b9cedf75dd15943ad42c9f061859617b',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_5835e',
                    table='erc"."compliance_report_version',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancereportversion',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='d1ad40e0b9a03daea8ca761286a5589b2c9eae85',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_69b47',
                    table='erc"."compliance_report_version',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceobligation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='355ad1ccfaebb03890a5ef2a5f7ae63b8c8f008d',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a5195',
                    table='erc"."compliance_obligation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceobligation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='03e61678d48720c9d3d9ac1441f80a04def43933',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_50bbc',
                    table='erc"."compliance_obligation',
                    when='BEFORE',
                ),
            ),
        ),
        migrations.AddIndex(
            model_name='elicensinglink',
            index=models.Index(fields=['content_type', 'object_id'], name='elicensing__content_e96062_idx'),
        ),
        migrations.AddIndex(
            model_name='elicensinglink',
            index=models.Index(fields=['elicensing_object_kind'], name='elicensing__elicens_7892ef_idx'),
        ),
        migrations.AddIndex(
            model_name='elicensinglink',
            index=models.Index(fields=['elicensing_object_id'], name='elicensing__elicens_72c88d_idx'),
        ),
        migrations.AddIndex(
            model_name='elicensinglink',
            index=models.Index(fields=['elicensing_guid'], name='elicensing__elicens_812a0f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='elicensinglink',
            unique_together={('content_type', 'object_id', 'elicensing_object_kind')},
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinglink',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='0682040260049145920400b7f59fcb71a1b2e6a7',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_8c3f9',
                    table='erc"."elicensing_link',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='elicensinglink',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='e2d53194c61180362c02d38254d6d330086cfdb4',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_cc4fd',
                    table='erc"."elicensing_link',
                    when='BEFORE',
                ),
            ),
        ),
    ]
