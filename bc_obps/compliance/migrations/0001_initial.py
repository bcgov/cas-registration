# Generated by Django 5.0.11 on 2025-02-28 03:44

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
import simple_history.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('registration', '0078_V1_22_0'),
        ('reporting', '0063_cement_production'),
    ]

    operations = [
        migrations.CreateModel(
            name='CompliancePeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateField(db_comment='Start date of the compliance period, UTC-based')),
                ('end_date', models.DateField(db_comment='End date of the compliance period, UTC-based')),
                (
                    'compliance_deadline',
                    models.DateField(db_comment='Deadline date for compliance submissions, UTC-based'),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'reporting_year',
                    models.ForeignKey(
                        db_comment='The associated reporting year for this compliance period',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_period',
                        to='reporting.reportingyear',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_period',
                'db_table_comment': 'A table to store compliance periods',
                'ordering': ['-end_date'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'emissions_attributable_for_reporting',
                    models.DecimalField(
                        db_comment='Total emissions attributable for reporting in tCO2e',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'reporting_only_emissions',
                    models.DecimalField(
                        db_comment='Emissions that are for reporting only in tCO2e', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'emissions_attributable_for_compliance',
                    models.DecimalField(
                        db_comment='Total emissions attributable for compliance in tCO2e',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'emission_limit',
                    models.DecimalField(db_comment='The emission limit in tCO2e', decimal_places=4, max_digits=20),
                ),
                (
                    'excess_emissions',
                    models.DecimalField(
                        db_comment='The excess emissions in tCO2e (positive if over limit)',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'credited_emissions',
                    models.DecimalField(
                        db_comment='The credited emissions in tCO2e (positive if under limit)',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'reduction_factor',
                    models.DecimalField(
                        db_comment='The reduction factor from NAICS regulatory values', decimal_places=4, max_digits=10
                    ),
                ),
                (
                    'tightening_rate',
                    models.DecimalField(
                        db_comment='The tightening rate from NAICS regulatory values', decimal_places=4, max_digits=10
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_period',
                    models.ForeignKey(
                        db_comment='The compliance period this summary belongs to',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_summaries',
                        to='compliance.complianceperiod',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'current_report_version',
                    models.ForeignKey(
                        db_comment='The current version of the report this summary is based on',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_summaries',
                        to='reporting.reportversion',
                    ),
                ),
                (
                    'report',
                    models.ForeignKey(
                        db_comment='The report this compliance summary is for',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_summaries',
                        to='reporting.report',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_summary',
                'db_table_comment': 'A table to store compliance summaries for reports',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'annual_production',
                    models.DecimalField(db_comment='Annual production amount', decimal_places=4, max_digits=20),
                ),
                (
                    'apr_dec_production',
                    models.DecimalField(db_comment='April-December production amount', decimal_places=4, max_digits=20),
                ),
                (
                    'emission_intensity',
                    models.DecimalField(
                        db_comment='Product weighted average emission intensity', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'allocated_industrial_process_emissions',
                    models.DecimalField(
                        db_comment='Allocated industrial process emissions in tCO2e', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'allocated_compliance_emissions',
                    models.DecimalField(
                        db_comment='Allocated emissions for compliance in tCO2e', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'report_product',
                    models.ForeignKey(
                        db_comment='The report product this compliance data is for',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_products',
                        to='reporting.reportproduct',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_summary',
                    models.ForeignKey(
                        db_comment='The compliance summary this product data belongs to',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='products',
                        to='compliance.compliancesummary',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_product',
                'db_table_comment': 'A table to store per-product compliance data',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ComplianceObligation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'emissions_amount_tco2e',
                    models.DecimalField(
                        db_comment='The amount of excess emissions in tCO2e', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[('OBLIGATION_NOT_MET', 'Obligation Not Met'), ('OBLIGATION_MET', 'Obligation Met')],
                        db_comment='The status of the obligation (e.g., OBLIGATION_NOT_MET, OBLIGATION_MET)',
                        default='OBLIGATION_NOT_MET',
                        max_length=50,
                    ),
                ),
                (
                    'penalty_status',
                    models.CharField(
                        choices=[('NONE', 'None'), ('ACCRUING', 'Accruing'), ('PAID', 'Paid')],
                        db_comment='The status of the penalty (e.g., NONE, ACCRUING, PAID)',
                        default='NONE',
                        max_length=50,
                    ),
                ),
                (
                    'obligation_deadline',
                    models.DateField(
                        db_comment='Deadline date for meeting excess emissions obligations (November 30 of the following year), UTC-based'
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_summary',
                    models.OneToOneField(
                        db_comment='The compliance summary this obligation belongs to',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='obligation',
                        to='compliance.compliancesummary',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_obligation',
                'db_table_comment': 'A table to store compliance obligations',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalComplianceObligation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'emissions_amount_tco2e',
                    models.DecimalField(
                        db_comment='The amount of excess emissions in tCO2e', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[('OBLIGATION_NOT_MET', 'Obligation Not Met'), ('OBLIGATION_MET', 'Obligation Met')],
                        db_comment='The status of the obligation (e.g., OBLIGATION_NOT_MET, OBLIGATION_MET)',
                        default='OBLIGATION_NOT_MET',
                        max_length=50,
                    ),
                ),
                (
                    'penalty_status',
                    models.CharField(
                        choices=[('NONE', 'None'), ('ACCRUING', 'Accruing'), ('PAID', 'Paid')],
                        db_comment='The status of the penalty (e.g., NONE, ACCRUING, PAID)',
                        default='NONE',
                        max_length=50,
                    ),
                ),
                (
                    'obligation_deadline',
                    models.DateField(
                        db_comment='Deadline date for meeting excess emissions obligations (November 30 of the following year), UTC-based'
                    ),
                ),
                ('history_user_id', models.UUIDField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_summary',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The compliance summary this obligation belongs to',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='compliance.compliancesummary',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical compliance obligation',
                'verbose_name_plural': 'historical compliance obligations',
                'db_table': 'erc_history"."compliance_obligation_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCompliancePeriod',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('start_date', models.DateField(db_comment='Start date of the compliance period, UTC-based')),
                ('end_date', models.DateField(db_comment='End date of the compliance period, UTC-based')),
                (
                    'compliance_deadline',
                    models.DateField(db_comment='Deadline date for compliance submissions, UTC-based'),
                ),
                ('history_user_id', models.UUIDField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'reporting_year',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The associated reporting year for this compliance period',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='reporting.reportingyear',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical compliance period',
                'verbose_name_plural': 'historical compliance periods',
                'db_table': 'erc_history"."compliance_period_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalComplianceProduct',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'annual_production',
                    models.DecimalField(db_comment='Annual production amount', decimal_places=4, max_digits=20),
                ),
                (
                    'apr_dec_production',
                    models.DecimalField(db_comment='April-December production amount', decimal_places=4, max_digits=20),
                ),
                (
                    'emission_intensity',
                    models.DecimalField(
                        db_comment='Product weighted average emission intensity', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'allocated_industrial_process_emissions',
                    models.DecimalField(
                        db_comment='Allocated industrial process emissions in tCO2e', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'allocated_compliance_emissions',
                    models.DecimalField(
                        db_comment='Allocated emissions for compliance in tCO2e', decimal_places=4, max_digits=20
                    ),
                ),
                ('history_user_id', models.UUIDField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_summary',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The compliance summary this product data belongs to',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='compliance.compliancesummary',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'report_product',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The report product this compliance data is for',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='reporting.reportproduct',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical compliance product',
                'verbose_name_plural': 'historical compliance products',
                'db_table': 'erc_history"."compliance_product_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceperiod',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='65711014d8489d3441d2df44a6ba1b44bbfbca33',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a0242',
                    table='erc"."compliance_period',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceperiod',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='f24eb2c3c50a41aa80505e22d3c9da4917f3059f',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_fe1ba',
                    table='erc"."compliance_period',
                    when='BEFORE',
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name='compliancesummary',
            constraint=models.UniqueConstraint(
                fields=('report', 'current_report_version'), name='unique_compliance_summary_per_report_version'
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='fb9b821c8da46260a24fcf08b50c819733c35833',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_95eef',
                    table='erc"."compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='6b0b87cb073097bcfa66414d99c6f6a45fa0bb0e',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_65085',
                    table='erc"."compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name='complianceproduct',
            constraint=models.UniqueConstraint(
                fields=('compliance_summary', 'report_product'), name='unique_product_per_compliance_summary'
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='78a0606c23e9bbee6f62ce8cc2dddf1b3b1f5118',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_3ceea',
                    table='erc"."compliance_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='c579584207d7f8a77cbf32b83fdb269545c0cd8c',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_a191d',
                    table='erc"."compliance_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceobligation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='355ad1ccfaebb03890a5ef2a5f7ae63b8c8f008d',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a5195',
                    table='erc"."compliance_obligation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='complianceobligation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='03e61678d48720c9d3d9ac1441f80a04def43933',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_50bbc',
                    table='erc"."compliance_obligation',
                    when='BEFORE',
                ),
            ),
        ),
    ]
