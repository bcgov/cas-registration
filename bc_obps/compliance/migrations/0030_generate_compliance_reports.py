# Generated by Django 5.1.10 on 2025-09-09 20:18

from django.db import migrations, transaction
from django.conf import settings
import logging
from compliance.service.compliance_report_version_service import ComplianceReportVersionService

logger = logging.getLogger(__name__)

TARGET_REPORTING_YEAR = 2024
REGULATED_OPERATION_PURPOSES = [
    'OBPS Regulated Operation',
    'New Entrant Operation',
    'Opted-in Operation',
]


def generate_compliance_reports_from_emission_reports(apps, schema_editor):
    # Only generate compliance reports for the latest submitted version of reports from the 2024 reporting year for regulated operations
    ReportVersion = apps.get_model('reporting', 'ReportVersion')
    ComplianceReport = apps.get_model('compliance', 'ComplianceReport')
    CompliancePeriod = apps.get_model('compliance', 'CompliancePeriod')

    report_versions_to_process = ReportVersion.objects.select_related('report', 'report_operation').filter(
        report__reporting_year_id=TARGET_REPORTING_YEAR,
        report_operation__registration_purpose__in=REGULATED_OPERATION_PURPOSES,
        is_latest_submitted=True,
    )
    for rv in report_versions_to_process:
        # If compliance report already exists, skip
        if ComplianceReport.objects.filter(report_id=rv.report_id).exists():
            logger.info(f"Compliance report already exists for report id {rv.report_id}")
            continue

        with transaction.atomic():
            new_compliance_report = ComplianceReport.objects.create(
                report=rv.report,
                compliance_period=CompliancePeriod.objects.get(reporting_year=TARGET_REPORTING_YEAR),
            )
            ComplianceReportVersionService.create_compliance_report_version(new_compliance_report, rv.id)

        logger.info(f"Created compliance report for report id {rv.report_id}")


def perform_migration(apps, schema_editor):
    if settings.ENVIRONMENT == "prod":
        generate_compliance_reports_from_emission_reports(apps, schema_editor)
    else:
        logger.info("Skipping compliance report generation migration")
        pass


def revert_perform_migration(apps, schema_editor):
    """
    Remove generated compliance reports
    """
    ComplianceReport = apps.get_model("compliance", "ComplianceReport")

    ComplianceReport.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('compliance', '0029_alter_compliancechargerate_reporting_year'),
    ]

    operations = [migrations.RunPython(perform_migration, revert_perform_migration)]
