# Generated by Django 5.1.10 on 2025-07-30 17:33

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('compliance', '0016_alter_compliancereportversion_status'),
        ('registration', '0128_V3_12_0'),
    ]

    operations = [
        migrations.CreateModel(
            name='ElicensingInterestRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'interest_rate',
                    models.DecimalField(db_comment='The interest rate from elicensing', decimal_places=6, max_digits=6),
                ),
                (
                    'start_date',
                    models.DateField(db_comment='The date that the rate took effect. Date is pulled from elicensing'),
                ),
                (
                    'end_date',
                    models.DateField(
                        db_comment='The last date that the rate was in effect. Date is generated in BCIERS when a new interest rate record is pulled from elicensing. End date is one day before the start date of the new record.'
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."elicensing_interest_rate',
                'db_table_comment': 'Table contains the interest rate from elicensing',
            },
        ),
        migrations.CreateModel(
            name='CompliancePenalty',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'accrual_start_date',
                    models.DateField(
                        db_comment="The date on which the penalty began accruing. It will always be the day after the obligation's due date"
                    ),
                ),
                (
                    'penalty_amount',
                    models.DecimalField(
                        db_comment='The total amount of the penalty to be paid',
                        decimal_places=2,
                        default=0.0,
                        max_digits=20,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_obligation',
                    models.OneToOneField(
                        db_comment='The compliance obligation not paid on time which triggered this penalty',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_penalty',
                        to='compliance.complianceobligation',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'elicensing_invoice',
                    models.OneToOneField(
                        db_comment='The invoice from elicensing that this penalty created',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_penalty',
                        to='compliance.elicensinginvoice',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_penalty',
                'db_table_comment': 'This table contains compliance penalty data for obligations that were not met before their due date',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompliancePenaltyAccrual',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateField(db_comment='The date of accrual for this record')),
                (
                    'daily_penalty',
                    models.DecimalField(
                        db_comment='The penalty amount for this date calculated from the rate in the compliance_penalty_rate table',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'daily_compounded',
                    models.DecimalField(
                        db_comment='The amount of the penalty compounded for this date', decimal_places=2, max_digits=20
                    ),
                ),
                (
                    'accumulated_penalty',
                    models.DecimalField(
                        db_comment='The accumulated amount of base penalty charges up to this date',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'accumulated_compounded',
                    models.DecimalField(
                        db_comment='The accumulated amount of compounded penalty up to this date',
                        decimal_places=2,
                        max_digits=20,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_penalty',
                    models.ForeignKey(
                        db_comment='The penalty record that this daily accrual record relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='compliance_penalty_accruals',
                        to='compliance.compliancepenalty',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_penalty_accrual',
                'db_table_comment': 'This table contains the daily record of how a penalty was accrued',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompliancePenaltyRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'rate',
                    models.DecimalField(
                        db_comment='The compliance Penalty rate applied daily if an obligation is not paid on time',
                        decimal_places=6,
                        max_digits=6,
                    ),
                ),
                (
                    'is_current_rate',
                    models.BooleanField(
                        db_comment='Boolean field signifies whether or not this rate is the rate currently in use',
                        default=False,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'compliance_period',
                    models.OneToOneField(
                        db_comment='The associated compliance_period for this compliance penalty rate',
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='compliance_Penalty_rate',
                        to='compliance.complianceperiod',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."compliance_penalty_rate',
                'db_table_comment': 'A table to store compliance penalty rates by reporting year',
                'ordering': ['compliance_period'],
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenalty',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='672fc34cfa422b8420b5cd2382ce7e8aa7f2502b',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_fd1fa',
                    table='erc"."compliance_penalty',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenalty',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='0599d6d71695b9963f84d42bc52011a7953fd113',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_558eb',
                    table='erc"."compliance_penalty',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyaccrual',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='2852d0fe54840d16dea6824ed34cd7ed530e2b7d',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_e5c7a',
                    table='erc"."compliance_penalty_accrual',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyaccrual',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='83adb21f05ebc489a0f214083a8df2307d09f1af',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_d5e9b',
                    table='erc"."compliance_penalty_accrual',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyrate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='d16b6519e0128b0b8e2ea458109c5bfe7daf2131',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_f92a7',
                    table='erc"."compliance_penalty_rate',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='compliancepenaltyrate',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='84140e2e1f74b4d71b612d3460aeb33180d26775',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_71d28',
                    table='erc"."compliance_penalty_rate',
                    when='BEFORE',
                ),
            ),
        ),
    ]
