# Generated by Django 5.0.11 on 2025-02-04 23:06

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        (
            'registration',
            '0072_alter_historicaloptedinoperationdetail_meets_producing_gger_schedule_a1_regulated_product_and_more',
        ),
    ]

    operations = [
        migrations.AlterField(
            model_name='closureevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='contact',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='document',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='facility',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='facilitydesignatedoperationtimeline',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalclosureevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalcontact',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaldocument',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalfacility',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalfacilitydesignatedoperationtimeline',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalmultipleoperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaloperation',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaloperationdesignatedoperatortimeline',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaloperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaloptedinoperationdetail',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalpartneroperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalrestartevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaltemporaryshutdownevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaltransferevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicaluseroperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='historicalwellauthorizationnumber',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='multipleoperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='operation',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='operationdesignatedoperatortimeline',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='operator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='optedinoperationdetail',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='partneroperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='restartevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='temporaryshutdownevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='transferevent',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='useroperator',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='wellauthorizationnumber',
            name='created_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='closureevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='116efeb7591648372336b3aa28a6e17f861ba2b5',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_084a4',
                    table='erc"."closure_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='closureevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='e46f38a299ddd97857beb5eecbef9c8207607d04',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_08af1',
                    table='erc"."closure_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='contact',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='fcf941dc7f1016b70fe400edc3b059ce844843b4',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_983b8',
                    table='erc"."contact',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='contact',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='bd7a0e472f05df531fe50df8ecc797a06d464822',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_5b391',
                    table='erc"."contact',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='document',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='1f656ebe5f79a2f266dcdd4e891f15d72b82282e',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_e8a56',
                    table='erc"."document',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='document',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='cfa9908ecf6f3fa7c832b427051d56c60b0c8065',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_93a76',
                    table='erc"."document',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='facility',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='0059b0ec9485510524eafab995169b3c204f9402',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_f7e80',
                    table='erc"."facility',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='facility',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='3d741503bec1a214b7e674a98774bbe8916aa5b0',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_71bcb',
                    table='erc"."facility',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='facilitydesignatedoperationtimeline',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='ec44cd1bed5dd44cdb98e847cd4cbc97dd40e1c0',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_62d10',
                    table='erc"."facility_designated_operation_timeline',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='facilitydesignatedoperationtimeline',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='4695fc860fa60b9827d4fd9ab81d2ec70e3243e4',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_6b036',
                    table='erc"."facility_designated_operation_timeline',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='multipleoperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='226c835ece5dad98d4f1392d1d968d50d41343d4',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_5b786',
                    table='erc"."multiple_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='multipleoperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='400b2c4757ddffaf98d2eedc0b92d779561a0dc4',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_3b460',
                    table='erc"."multiple_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='operation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='c68e0e45ad04f331ffa6b92f08d9af4ecf9c0a89',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_7768e',
                    table='erc"."operation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='operation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='f83368c0faaf9373710d248684d482b9c69f3e0f',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_16db9',
                    table='erc"."operation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='operationdesignatedoperatortimeline',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='ca9ccc49563037483e2213c6792949d271913a6f',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_6c164',
                    table='erc"."operation_designated_operator_timeline',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='operationdesignatedoperatortimeline',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='e64d677adaee0a27bcc5838ad2444c2f319bb4bb',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_0ef04',
                    table='erc"."operation_designated_operator_timeline',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='operator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='4debfb86b07453a0711e7b91acefeb7d8ea54d05',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_6c559',
                    table='erc"."operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='operator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='1d477883220572be8e03c061403535322057bb13',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_8b376',
                    table='erc"."operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='optedinoperationdetail',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='868d3db361dcf380025b4aef229f235a31fc5767',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_4f8f7',
                    table='erc"."opted_in_operation_detail',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='optedinoperationdetail',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='ba3621af597a2ae4236a3712d7c5483c497b11ba',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_2d317',
                    table='erc"."opted_in_operation_detail',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='parentoperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='4003485d17b1542b2581b4e09672948cc77375da',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_41e31',
                    table='erc"."parent_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='parentoperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='53ad444d30d035697140fc05f40f3c0b236a8e35',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_68e68',
                    table='erc"."parent_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='partneroperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='f6813355ed5299c8c91e56c2b97c614335cbdbe4',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_c09dc',
                    table='erc"."partner_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='partneroperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='843bb1763a79e389be6ecaf103ab73e611175954',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_7daea',
                    table='erc"."partner_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='restartevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='835dfb7416536fdb8a9b1db14939f445533ef3af',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_bba15',
                    table='erc"."restart_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='restartevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='882ca5907483a06d7d6bba70bdbf88eddb117a36',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_4e46e',
                    table='erc"."restart_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='temporaryshutdownevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='27b8ad50636c7890480e54c983726c56cd9abc87',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_bca14',
                    table='erc"."temporary_shutdown_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='temporaryshutdownevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='5bf746509e57c8d21b45b4796e5f05a8fc538953',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_89448',
                    table='erc"."temporary_shutdown_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='transferevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='8b2a5d6fdc3ede48c8fb7bca8e9e9423b64474fe',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_d2bb5',
                    table='erc"."transfer_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='transferevent',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='7dc7e1e2cf70a847ca276e9625a494b79debcbc4',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_0bd79',
                    table='erc"."transfer_event',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='useroperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='8917ec80a3071b841acb95de74668ea980ae10de',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_6b40d',
                    table='erc"."user_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='useroperator',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='434c58f621c8783179f93379b05e870e741ee28b',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_8abfa',
                    table='erc"."user_operator',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='wellauthorizationnumber',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='5829c3a245924ef9d8f4cbe5abeca65d407a350e',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_d3cf2',
                    table='erc"."well_authorization_number',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='wellauthorizationnumber',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='127428dd57bc57bf799b61c0e6c8e859233a747b',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_46b7d',
                    table='erc"."well_authorization_number',
                    when='BEFORE',
                ),
            ),
        ),
    ]
