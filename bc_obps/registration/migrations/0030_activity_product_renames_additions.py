# Generated by Django 5.0.7 on 2024-08-09 22:34

from django.db import migrations


def add_products(apps, schema_monitor):
    Product = apps.get_model('registration', 'RegulatedProduct')
    Product.objects.bulk_create(
        [
            Product(name='Forged steel balls: less than 3.5 inches diameter'),
            Product(name='Forged steel balls: greater than 4 inches diameter'),
            Product(name='Mining: critical mineral, other than copper'),
            Product(name='Smelting: critical mineral, other than aluminun and lead-zinc'),
        ]
    )


def reverse_add_products(apps, schema_monitor):
    Product = apps.get_model('registration', 'RegulatedProduct')
    Product.objects.get(name='Forged steel balls: less than 3.5 inches diameter').delete()
    Product.objects.get(name='Forged steel balls: greater than 4 inches diameter').delete()
    Product.objects.get(name='Mining: critical mineral, other than copper').delete()
    Product.objects.get(name='Smelting: critical mineral, other than aluminun and lead-zinc').delete()


def add_activities(apps, schema_monitor):
    ReportingActivity = apps.get_model('registration', 'ReportingActivity')
    ReportingActivity.objects.create(
        name='General stationary combustion solely for the purpose of line tracing',
        slug='gsc_solely_for_line_tracing',
        weight=200.0,
        applicable_to='sfo',
    )
    ReportingActivity.objects.create(
        name='General stationary combustion, other than non-compression and non-processing combustion',
        slug='gsc_other_than_non_compression',
        weight=3100.0,
        applicable_to='lfo',
    )
    ReportingActivity.objects.create(
        name='General stationary non-compression and non-processing combustion',
        slug='gsc_non_compression',
        weight=3200.0,
        applicable_to='lfo',
    )
    ReportingActivity.objects.create(
        name='Non-compression and non-processing activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission',
        slug='natural_gas_activities_non_compression',
        weight=3700.0,
        applicable_to='lfo',
    )


def reverse_add_activities(apps, schema_monitor):
    ReportingActivity = apps.get_model('registration', 'ReportingActivity')
    ReportingActivity.objects.get(slug='gsc_other_than_non_compression').delete()
    ReportingActivity.objects.get(slug='gsc_non_compression').delete()
    ReportingActivity.objects.get(slug='natural_gas_activities_non_compression').delete()
    ReportingActivity.objects.filter(slug='gsc_solely_for_line_tracing').delete()


def update_activity_names(apps, schema_monitor):
    ReportingActivity = apps.get_model('registration', 'ReportingActivity')
    r = ReportingActivity.objects.get(name='General stationary combustion')
    r.name = 'General stationary combustion excluding line tracing'
    r.applicable_to = 'sfo'
    r.save()

    r = ReportingActivity.objects.get(name='Natural gas transmission')
    r.name = 'Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
    r.applicable_to = 'lfo'
    r.slug = 'og_activities_other_than_non_compression'
    r.weight = 3300.0
    r.save()

    r = ReportingActivity.objects.get(name='Natural gas distribution')
    r.name = (
        'Non-compression and non-processing activities that are oil and gas extraction and gas processing activities'
    )
    r.applicable_to = 'lfo'
    r.slug = 'og_activities_non_compression'
    r.weight = 3400.0
    r.save()

    r = ReportingActivity.objects.get(name='Electricity transmission')
    r.weight = 3500.0
    r.save()

    r = ReportingActivity.objects.get(name='Natural gas storage')
    r.name = 'Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities'
    r.applicable_to = 'lfo'
    r.slug = 'natural_gas_activities_other_than_non_compression'
    r.weight = 3600.0
    r.save()

    r = ReportingActivity.objects.get(name='LNG activities')
    r.weight = 3800.0
    r.save()


def reverse_update_activity_names(apps, schema_monitor):
    ReportingActivity = apps.get_model('registration', 'ReportingActivity')
    r = ReportingActivity.objects.get(name='General stationary combustion excluding line tracing')
    r.name = 'General stationary combustion'
    r.save()


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0029_slug_and_weight_on_activity_model'),
    ]

    operations = [
        migrations.RunPython(add_products, reverse_add_products),
        migrations.RunPython(add_activities, reverse_add_activities),
        migrations.RunPython(update_activity_names, reverse_update_activity_names),
    ]
