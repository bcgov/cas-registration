# Generated by Django 4.2.6 on 2023-12-04 23:04

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import localflavor.ca.models
import phonenumber_field.modelfields
import simple_history.models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('registration', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalOperator',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('legal_name', models.CharField(db_comment='The legal name of an operator', max_length=1000)),
                (
                    'trade_name',
                    models.CharField(blank=True, db_comment='The trade name of an operator', max_length=1000),
                ),
                ('cra_business_number', models.IntegerField(db_comment='The CRA business number of an operator')),
                (
                    'bc_corporate_registry_number',
                    models.IntegerField(db_comment='The BC corporate registry number of an operator'),
                ),
                (
                    'physical_street_address',
                    models.CharField(
                        db_comment='The physical street address of an operator (where the operator is physically located)',
                        max_length=1000,
                    ),
                ),
                (
                    'physical_municipality',
                    models.CharField(db_comment='The physical municipality of an operator ', max_length=1000),
                ),
                (
                    'physical_province',
                    localflavor.ca.models.CAProvinceField(
                        db_comment='The physical street address of an operator, restricted to two-letter province postal abbreviations',
                        max_length=2,
                    ),
                ),
                (
                    'physical_postal_code',
                    localflavor.ca.models.CAPostalCodeField(
                        db_comment='The physical postal code address of an operator, limited to valid Canadian postal codes',
                        max_length=7,
                    ),
                ),
                (
                    'mailing_street_address',
                    models.CharField(db_comment='The mailing street address of an operator', max_length=1000),
                ),
                (
                    'mailing_municipality',
                    models.CharField(db_comment='The mailing municipality of an operator', max_length=1000),
                ),
                (
                    'mailing_province',
                    localflavor.ca.models.CAProvinceField(
                        db_comment='The mailing province of an operator, restricted to two-letter province postal abbreviations',
                        max_length=2,
                    ),
                ),
                (
                    'mailing_postal_code',
                    localflavor.ca.models.CAPostalCodeField(
                        db_comment='The mailing postal code of an operator, limited to valid Canadian postal codes',
                        max_length=7,
                    ),
                ),
                ('website', models.URLField(blank=True, db_comment='The website address of an operator', null=True)),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('Draft', 'Draft'),
                            ('Pending', 'Pending'),
                            ('Approved', 'Approved'),
                            ('Rejected', 'Rejected'),
                        ],
                        db_comment='The status of an operator in the app (e.g. draft)',
                        default='Draft',
                        max_length=1000,
                    ),
                ),
                (
                    'verified_at',
                    models.DateTimeField(
                        blank=True, db_comment='The time an operator was verified by an IRC user', null=True
                    ),
                ),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'business_structure',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The business structure of an operator',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.businessstructure',
                    ),
                ),
                (
                    'history_user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'verified_by',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The IRC user who verified the operator',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical operator',
                'verbose_name_plural': 'historical operators',
                'db_table': 'erc_history"."operator_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalOperation',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('name', models.CharField(db_comment="An operation or facility's name", max_length=1000)),
                ('type', models.CharField(db_comment="An operation or facility's type", max_length=1000)),
                (
                    'previous_year_attributable_emissions',
                    models.DecimalField(
                        blank=True,
                        db_comment="An operation or facility's attributable emissions from the previous year. Only needed if the operation/facility submitted a report the previous year.",
                        decimal_places=5,
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    'swrs_facility_id',
                    models.IntegerField(
                        blank=True,
                        db_comment="An operation or facility's SWRS facility ID. Only needed if the operation/facility submitted a report the previous year.",
                        null=True,
                    ),
                ),
                (
                    'bcghg_id',
                    models.CharField(
                        blank=True,
                        db_comment="An operation or facility's BCGHG identifier. Only needed if the operation/facility submitted a report the previous year.",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    'opt_in',
                    models.BooleanField(
                        blank=True,
                        db_comment='Whether or not the operation/facility is required to register or is simply opting in. Only needed if the operation/facility did not report the previous year.',
                        null=True,
                    ),
                ),
                (
                    'verified_at',
                    models.DateTimeField(
                        blank=True,
                        db_comment='The time the operation was verified by an IRC user. If exists, the operation is registered for OBPS.',
                        null=True,
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[
                            ('not_registered', 'Not Registered'),
                            ('pending', 'Pending'),
                            ('approved', 'Approved'),
                            ('rejected', 'Rejected'),
                        ],
                        db_comment='The status of an operation in the app (e.g. pending review)',
                        default='not_registered',
                        max_length=1000,
                    ),
                ),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'application_lead',
                    models.ForeignKey(
                        blank=True,
                        db_comment='Foreign key to the contact that is the application lead',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.contact',
                    ),
                ),
                (
                    'history_user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    'naics_code',
                    models.ForeignKey(
                        blank=True,
                        db_comment="An operation or facility's NAICS code",
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.naicscode',
                    ),
                ),
                (
                    'operator',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The operator who owns the operation',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.operator',
                    ),
                ),
                (
                    'verified_by',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The IRC user who verified the operator',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical operation',
                'verbose_name_plural': 'historical operations',
                'db_table': 'erc_history"."operation_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalContact',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(db_comment="A user or contact's first name", max_length=1000)),
                ('last_name', models.CharField(db_comment="A user or contact's last name", max_length=1000)),
                ('position_title', models.CharField(db_comment="A user or contact's position title", max_length=1000)),
                ('street_address', models.CharField(db_comment="A user or contact's street address", max_length=1000)),
                ('municipality', models.CharField(db_comment="A user or contact's municipality", max_length=1000)),
                (
                    'province',
                    localflavor.ca.models.CAProvinceField(
                        db_comment="A user or contact's province, restricted to two-letter province postal abbreviations",
                        max_length=2,
                    ),
                ),
                (
                    'postal_code',
                    localflavor.ca.models.CAPostalCodeField(
                        db_comment="A user or contact's postal code, limited to valid Canadian postal codes",
                        max_length=7,
                    ),
                ),
                (
                    'email',
                    models.EmailField(db_comment="A user or contact's email, limited to valid emails", max_length=254),
                ),
                (
                    'phone_number',
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True,
                        db_comment="A user or contact's phone number, limited to valid phone numbers",
                        max_length=128,
                        region=None,
                    ),
                ),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'business_role',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The role assigned to this contact which defines the permissions the contact has.',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.businessrole',
                    ),
                ),
                (
                    'history_user',
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='+',
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical contact',
                'verbose_name_plural': 'historical contacts',
                'db_table': 'erc_history"."contact_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
