# Generated by Django 5.0.6 on 2024-07-18 17:55

import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0022_remove_historicalwellauthorizationnumber_facility_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='historicalparentoperator',
            name='foreign_address',
            field=models.CharField(
                blank=True,
                db_comment='The address of a non-Canadian parent operator (Canadian operators will have a record in the address table, which only supports Canadian addresses)',
                max_length=2000,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='historicalparentoperator',
            name='foreign_tax_id_number',
            field=models.CharField(
                blank=True,
                db_comment="The tax ID of a non-Canadian parent operator (non-Canadian operators won't have a CRA business number)",
                max_length=1000,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='parentoperator',
            name='foreign_address',
            field=models.CharField(
                blank=True,
                db_comment='The address of a non-Canadian parent operator (Canadian operators will have a record in the address table, which only supports Canadian addresses)',
                max_length=2000,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name='parentoperator',
            name='foreign_tax_id_number',
            field=models.CharField(
                blank=True,
                db_comment="The tax ID of a non-Canadian parent operator (non-Canadian operators won't have a CRA business number)",
                max_length=1000,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name='historicaloperator',
            name='trade_name',
            field=models.CharField(blank=True, db_comment='The trade name of an operator', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='bc_corporate_registry_number',
            field=models.CharField(
                blank=True,
                db_comment='The BC corporate registry number of a parent operator',
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message='BC Corporate Registry Number should be 1-3 letters followed by 7 digits.',
                        regex='^[A-Za-z]{1,3}[0-9]{7}$',
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='business_structure',
            field=models.ForeignKey(
                blank=True,
                db_comment='The business structure of a parent operator',
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='+',
                to='registration.businessstructure',
            ),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='cra_business_number',
            field=models.IntegerField(blank=True, db_comment='The CRA business number of a parent operator', null=True),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='legal_name',
            field=models.CharField(db_comment='The legal name of a parent operator', max_length=1000),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='mailing_address',
            field=models.ForeignKey(
                blank=True,
                db_comment='The mailing address of a parent operator',
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='+',
                to='registration.address',
            ),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='operator_index',
            field=models.IntegerField(
                blank=True,
                db_comment='Index used to differentiate parent operators for the child operator for saving/updating purposes',
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='physical_address',
            field=models.ForeignKey(
                blank=True,
                db_comment='The physical address of a parent operator (where the operator is physically located)',
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='+',
                to='registration.address',
            ),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='trade_name',
            field=models.CharField(blank=True, db_comment='The trade name of a parent operator', max_length=1000),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='website',
            field=models.URLField(blank=True, db_comment='The website address of a parent operator', null=True),
        ),
        migrations.AlterField(
            model_name='operator',
            name='physical_address',
            field=models.ForeignKey(
                blank=True,
                db_comment='The physical address of an operator (where the operator is physically located)',
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='operators_physical',
                to='registration.address',
            ),
        ),
        migrations.AlterField(
            model_name='operator',
            name='trade_name',
            field=models.CharField(blank=True, db_comment='The trade name of an operator', max_length=1000, null=True),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='bc_corporate_registry_number',
            field=models.CharField(
                blank=True,
                db_comment='The BC corporate registry number of a parent operator',
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message='BC Corporate Registry Number should be 1-3 letters followed by 7 digits.',
                        regex='^[A-Za-z]{1,3}[0-9]{7}$',
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='business_structure',
            field=models.ForeignKey(
                blank=True,
                db_comment='The business structure of a parent operator',
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='parent_operators',
                to='registration.businessstructure',
            ),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='cra_business_number',
            field=models.IntegerField(blank=True, db_comment='The CRA business number of a parent operator', null=True),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='legal_name',
            field=models.CharField(db_comment='The legal name of a parent operator', max_length=1000),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='mailing_address',
            field=models.ForeignKey(
                blank=True,
                db_comment='The mailing address of a parent operator',
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='parent_operators_mailing',
                to='registration.address',
            ),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='operator_index',
            field=models.IntegerField(
                blank=True,
                db_comment='Index used to differentiate parent operators for the child operator for saving/updating purposes',
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='physical_address',
            field=models.ForeignKey(
                blank=True,
                db_comment='The physical address of a parent operator (where the operator is physically located)',
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='parent_operators_physical',
                to='registration.address',
            ),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='trade_name',
            field=models.CharField(blank=True, db_comment='The trade name of a parent operator', max_length=1000),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='website',
            field=models.URLField(blank=True, db_comment='The website address of a parent operator', null=True),
        ),
        migrations.CreateModel(
            name='HistoricalPartnerOperator',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('legal_name', models.CharField(db_comment='The legal name of an operator', max_length=1000)),
                (
                    'trade_name',
                    models.CharField(
                        blank=True, db_comment='The trade name of an operator', max_length=1000, null=True
                    ),
                ),
                ('cra_business_number', models.IntegerField(db_comment='The CRA business number of an operator')),
                (
                    'bc_corporate_registry_number',
                    models.CharField(
                        db_comment='The BC corporate registry number of an operator',
                        validators=[
                            django.core.validators.RegexValidator(
                                message='BC Corporate Registry Number should be 1-3 letters followed by 7 digits.',
                                regex='^[A-Za-z]{1,3}[0-9]{7}$',
                            )
                        ],
                    ),
                ),
                ('history_user_id', models.UUIDField(blank=True, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                (
                    'history_type',
                    models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'bc_obps_operator',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The operator that this partner operator is associated with',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.operator',
                    ),
                ),
                (
                    'business_structure',
                    models.ForeignKey(
                        blank=True,
                        db_comment='The business structure of an operator',
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.businessstructure',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='+',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'verbose_name': 'historical partner operator',
                'verbose_name_plural': 'historical partner operators',
                'db_table': 'erc_history"."partner_operator_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PartnerOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('legal_name', models.CharField(db_comment='The legal name of an operator', max_length=1000)),
                (
                    'trade_name',
                    models.CharField(
                        blank=True, db_comment='The trade name of an operator', max_length=1000, null=True
                    ),
                ),
                ('cra_business_number', models.IntegerField(db_comment='The CRA business number of an operator')),
                (
                    'bc_corporate_registry_number',
                    models.CharField(
                        db_comment='The BC corporate registry number of an operator',
                        validators=[
                            django.core.validators.RegexValidator(
                                message='BC Corporate Registry Number should be 1-3 letters followed by 7 digits.',
                                regex='^[A-Za-z]{1,3}[0-9]{7}$',
                            )
                        ],
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'bc_obps_operator',
                    models.ForeignKey(
                        db_comment='The operator that this partner operator is associated with',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='partner_operators',
                        to='registration.operator',
                    ),
                ),
                (
                    'business_structure',
                    models.ForeignKey(
                        db_comment='The business structure of an operator',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='partner_operators',
                        to='registration.businessstructure',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."partner_operator',
                'db_table_comment': "Table containing data about operators' partner operators. Partner operators may have a record in the Operator table. If so, that record is controlled by someone who works for that partner operator. The information in this table is controlled by BCOBPS operators who should not have access to other operator's records.",
                'indexes': [
                    models.Index(fields=['bc_obps_operator'], name='partner_bc_obps_operator_idx'),
                    models.Index(fields=['business_structure'], name='partner_business_structure_idx'),
                ],
            },
        ),
    ]
