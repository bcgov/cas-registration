# Generated by Django 5.0.14 on 2025-05-05 21:36

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0109_historicalnaicscode_is_regulated_and_more'),
    ]

    def unregulated_naics_code_data(apps, schema_monitor):
        '''
        Add non-regulated NAICS code data to erc.naics_code
        '''
        NaicsCode = apps.get_model('registration', 'NaicsCode')
        NaicsCode.objects.bulk_create(
            [
                NaicsCode(naics_code='111412', naics_description='Cannabis grown under cover', is_regulated=False),
                NaicsCode(
                    naics_code='111419', naics_description='Other food crops grown under cover', is_regulated=False
                ),
                NaicsCode(naics_code='221111', naics_description='Hydro-electric power generation', is_regulated=False),
                NaicsCode(
                    naics_code='221112', naics_description='Fossil-fuel electric power generation', is_regulated=False
                ),
                NaicsCode(naics_code='221119', naics_description='Other electric power generation', is_regulated=False),
                NaicsCode(
                    naics_code='221121',
                    naics_description='Electric bulk power transmission and control',
                    is_regulated=False,
                ),
                NaicsCode(naics_code='221210', naics_description='Natural gas distribution', is_regulated=False),
                NaicsCode(naics_code='221320', naics_description='Sewage treatment facilities', is_regulated=False),
                NaicsCode(
                    naics_code='221330', naics_description='Steam and air-conditioning supply', is_regulated=False
                ),
                NaicsCode(
                    naics_code='486110', naics_description='Pipeline transportation of crude oil', is_regulated=False
                ),
                NaicsCode(naics_code='493110', naics_description='General warehousing and storage', is_regulated=False),
                NaicsCode(naics_code='493190', naics_description='Other warehousing and storage', is_regulated=False),
                NaicsCode(naics_code='562210', naics_description='Waste treatment and disposal', is_regulated=False),
                NaicsCode(
                    naics_code='811199',
                    naics_description='All other automotive repair and maintenance',
                    is_regulated=False,
                ),
            ]
        ),

    def reverse_unregulated_naics_code_data(apps, schema_monitor):
        '''
        Remove initial data from erc.naics_code
        '''
        NaicsCode = apps.get_model('registration', 'NaicsCode')
        NaicsCode.objects.filter(
            naics_code__in=[
                '111412'
                '111419'
                '221111'
                '221112'
                '221119'
                '221121'
                '221210'
                '221320'
                '221330'
                '486110'
                '493110'
                '493190'
                '562210'
                '811199'
            ]
        ).delete()

    def unregulated_regulatory_value_data(apps, schema_monitor):
        '''
        Add data for non-regulated NAICS codes to erc.naics_regulatory_value
        '''

        NaicsCode = apps.get_model('registration', 'NaicsCode')
        NaicsRegulatoryValue = apps.get_model('reporting', 'NaicsRegulatoryValue')
        NaicsRegulatoryValue.objects.bulk_create(
            [
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=111412).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=111419).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=221111).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=221112).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=221119).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=221121).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=221210).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=221320).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=221330).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=486110).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=493110).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=493190).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=562210).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
                NaicsRegulatoryValue(
                    naics_code_id=(NaicsCode.objects.get(naics_code=811199).id),
                    reduction_factor='0.65',
                    tightening_rate='0.01',
                    valid_from='2023-01-01',
                    valid_to='9999-12-31',
                ),
            ]
        )

    def reverse_unregulated_regulatory_value_data(apps, schema_monitor):
        '''
        Remove data for non-regulated NAICS codes to erc.naics_regulatory_value
        '''
        NaicsRegulatoryValue = apps.get_model('registration', 'NaicsRegulatoryValue')
        NaicsRegulatoryValue.objects.filter(
            naics_code_id__in=[
                '111412',
                '111419',
                '221111',
                '221112',
                '221119',
                '221121',
                '221210',
                '221320',
                '221330',
                '486110',
                '493110',
                '493190',
                '562210',
                '811199',
            ]
        ).delete()

    operations = [
        migrations.RunPython(unregulated_naics_code_data, reverse_unregulated_naics_code_data),
        migrations.RunPython(unregulated_regulatory_value_data, reverse_unregulated_regulatory_value_data),
    ]
