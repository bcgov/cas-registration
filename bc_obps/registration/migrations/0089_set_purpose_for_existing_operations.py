# Generated by Django 5.0.13 on 2025-03-12 17:08

from django.db import migrations
from typing import Dict



"""
One-time forward-only migration to be applied to prod data.
Purpose: set the `registration_purpose` field of Operations to OBPS Regulated Operation if the registration was assigned a BORO ID in Reg1.
"""
def count_stats(Operation) -> Dict[str, int]:
    total = Operation.objects.count()
    has_boro_id = Operation.objects.filter(bc_obps_regulated_operation__isnull=False).count()
    has_registration_purpose = Operation.objects.filter(registration_purpose__isnull=False).count()
    has_regulated_purpose = Operation.objects.filter(registration_purpose='OBPS Regulated Operation').count()
    is_opt_in = Operation.objects.filter( opt_in=True).count()
    is_opt_in_with_boro_id = Operation.objects.filter(registration_purpose__isnull=False, opt_in=True).count()
    has_opt_in_purpose = Operation.objects.filter(registration_purpose='Opted-in Operation').count()

    return {
        'total': total,
        'has_boro_id': has_boro_id,
        'is_opt_in_with_boro_id': is_opt_in_with_boro_id,
        'is_opt_in': is_opt_in,
        'has_registration_purpose': has_registration_purpose,
        'has_regulated_purpose': has_regulated_purpose,
        'has_opt_in_purpose': has_opt_in_purpose
    }

def migrate_assign_regulated_purpose(apps, schema_monitor):
    # import the required Django model
    Operation = apps.get_model('registration', 'Operation')
    OptedInOperationDetail = apps.get_model('registration', 'OptedInOperationDetail')

    before_stats = count_stats(Operation)
    print(f'before_stats: {before_stats}')

    for operation in Operation.objects.filter(bc_obps_regulated_operation__isnull=False):
        if operation.opt_in:
            operation.registration_purpose = 'Opted-in Operation'
            operation.opted_in_operation = OptedInOperationDetail.objects.create(created_by_id=operation.created_by.user_guid)
        else:
            operation.registration_purpose = 'OBPS Regulated Operation'
        operation.save(update_fields=['registration_purpose','opted_in_operation'])

    after_stats = count_stats(Operation)
    print(f'after_stats: {after_stats}')

    assert before_stats.get('total') == after_stats.get('total')
    assert after_stats.get('has_boro_id') == after_stats.get('has_registration_purpose')
    assert before_stats.get('is_opt_in') == after_stats.get('is_opt_in')
    assert after_stats.get('is_opt_in_with_boro_id') == after_stats.get('has_opt_in_purpose')
    assert after_stats.get('has_boro_id') == after_stats.get('has_regulated_purpose') + after_stats.get('has_opt_in_purpose')

    for operation in Operation.objects.filter(registration_purpose='Opted-in Operation'):
        assert operation.opt_in is not None
        assert operation.opted_in_operation is not None

class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0088_contact_unique_email_per_operator'),
    ]

    operations = [migrations.RunPython(migrate_assign_regulated_purpose, migrations.RunPython.noop, elidable=True)]
