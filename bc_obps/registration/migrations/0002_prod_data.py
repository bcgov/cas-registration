# Generated by Django 4.2.8 on 2024-01-09 07:11

from django.db import migrations


def init_app_role_data(apps, schema_monitor):
    '''
    Add initial data to erc.app_role
    '''
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    AppRole = apps.get_model('registration', 'AppRole')
    AppRole.objects.bulk_create(
        [
            AppRole(
                role_name='cas_admin',
                role_description='Admin user from the BC Government. Highest government user privilege.',
            ),
            AppRole(
                role_name='cas_analyst',
                role_description='Analyst user from the BC Government. Lower access privileges than cas_admin.',
            ),
            AppRole(
                role_name='cas_pending',
                role_description='Pending BC Government user. Requires access to be granted by an admin before having any privileges.',
            ),
            AppRole(
                role_name='industry_user',
                role_description='External user from industry. All industry_users have the same initial privileges. Their privileges for individual operators are further defined and applied in the user_operator through table.',
            ),
            AppRole(
                role_name='industry_user_admin',
                role_description='External user from industry with admin privileges. All industry_users have the same initial privileges. Their privileges for individual operators are further defined and applied by Industry Admins.',
            ),
        ]
    )


def reverse_init_app_role_data(apps, schema_monitor):
    '''
    Remove initial data from erc.app_role
    '''
    AppRole = apps.get_model('registration', 'AppRole')
    AppRole.objects.filter(
        role_name__in=['cas_admin', 'cas_analyst', 'cas_pending', 'industry_user', 'industry_user_admin']
    ).delete()


def init_business_role_data(apps, schema_monitor):
    '''
    Add initial data to erc.business_role
    '''
    BusinessRole = apps.get_model('registration', 'BusinessRole')
    BusinessRole.objects.bulk_create(
        [
            BusinessRole(
                role_name='Senior Officer',
                role_description='A person who has the authority to make decisions on behalf of the business.',
            ),
            BusinessRole(
                role_name='Operation Representative',
                role_description='A person who is responsible for the day-to-day operations of the business.',
            ),
            BusinessRole(
                role_name='Authorized Signing Officer',
                role_description='A person who has the authority to sign documents on behalf of the business.',
            ),
            BusinessRole(
                role_name='Operation Registration Lead',
                role_description='A person who is responsible for registering operations on behalf of the business.',
            ),
        ]
    )


def reverse_init_business_role_data(apps, schema_monitor):
    '''
    Remove initial data from erc.business_role
    '''
    BusinessRole = apps.get_model('registration', 'BusinessRole')
    BusinessRole.objects.filter(
        role_name__in=[
            'Senior Officer',
            'Operation Representative',
            'Authorized Signing Officer',
            'Operation Registration Lead',
        ]
    ).delete()


def init_business_structure_data(apps, schema_monitor):
    '''
    Add initial data to erc.business_structure
    '''
    BusinessStructure = apps.get_model('registration', 'BusinessStructure')
    BusinessStructure.objects.bulk_create(
        [
            BusinessStructure(name='General Partnership'),
            BusinessStructure(name='BC Corporation'),
            BusinessStructure(name='Extra Provincially Registered Company'),
            BusinessStructure(name='Sole Proprietorship'),
            BusinessStructure(name='Limited Liability Partnership'),
            BusinessStructure(name='BC Incorporated Society'),
            BusinessStructure(name='Extraprovincial Non-Share Corporation'),
        ]
    )


def reverse_init_business_structure_data(apps, schema_monitor):
    '''
    Remove initial data from erc.business_structure
    '''
    BusinessStructure = apps.get_model('registration', 'BusinessStructure')
    BusinessStructure.objects.filter(
        name__in=[
            'General Partnership',
            'BC Corporation',
            'Extra Provincially Registered Company',
            'Sole Proprietorship',
            'Limited Liability Partnership',
            'BC Incorporated Society',
            'Extraprovincial Non-Share Corporation',
        ]
    ).delete()


def init_document_type_data(apps, schema_monitor):
    '''
    Add initial data to erc.document_type
    '''
    DocumentType = apps.get_model('registration', 'DocumentType')
    DocumentType.objects.bulk_create(
        [
            DocumentType(name='boundary_map'),
            DocumentType(name='signed_statutory_declaration'),
            DocumentType(name='process_flow_diagram'),
            DocumentType(name='proof_of_authority_of_partner_company'),
            DocumentType(name='senior_officer_proof_of_authority'),
            DocumentType(name='operation_representative_proof_of_authority'),
            DocumentType(name='soce_senior_officer_proof_of_authority'),
            DocumentType(name='proof_of_start'),
            DocumentType(name='opt_in_signed_statutory_declaration'),
        ]
    )


def reverse_init_document_type_data(apps, schema_monitor):
    '''
    Remove initial data from erc.document_type
    '''
    DocumentType = apps.get_model('registration', 'DocumentType')
    DocumentType.objects.filter(
        name__in=[
            'boundary_map',
            'signed_statutory_declaration',
            'process_flow_diagram',
            'proof_of_authority_of_partner_company',
            'senior_officer_proof_of_authority',
            'operation_representative_proof_of_authority',
            'soce_senior_officer_proof_of_authority',
            'proof_of_start',
            'opt_in_signed_statutory_declaration',
        ]
    ).delete()


def init_naics_code_data(apps, schema_monitor):
    '''
    Add initial data to erc.naics_code
    '''
    NaicsCode = apps.get_model('registration', 'NaicsCode')
    NaicsCode.objects.bulk_create(
        [
            NaicsCode(naics_code='211110', naics_description='Oil and gas extraction (except oil sands)'),
            NaicsCode(naics_code='212114', naics_description='Bituminous coal mining'),
            NaicsCode(naics_code='212220', naics_description='Gold and silver ore mining'),
            NaicsCode(naics_code='212231', naics_description='Lead-zinc ore mining'),
            NaicsCode(naics_code='212233', naics_description='Copper-zinc ore mining'),
            NaicsCode(naics_code='212299', naics_description='All other metal ore mining'),
            NaicsCode(naics_code='213118', naics_description='Services to oil and gas extraction'),
            NaicsCode(naics_code='311119', naics_description='Other animal food manufacturing'),
            NaicsCode(naics_code='311310', naics_description='Sugar manufacturing'),
            NaicsCode(naics_code='311614', naics_description='Rendering and meat processing from carcasses'),
            NaicsCode(naics_code='321111', naics_description='Sawmills (except shingle and shake mills)'),
            NaicsCode(naics_code='321212', naics_description='Softwood veneer and plywood mills'),
            NaicsCode(naics_code='321216', naics_description='Particle board and fibreboard mills'),
            NaicsCode(naics_code='321999', naics_description='All other miscellaneous wood product manufacturing'),
            NaicsCode(naics_code='322111', naics_description='Mechanical pulp mills'),
            NaicsCode(naics_code='322112', naics_description='Chemical pulp mills'),
            NaicsCode(naics_code='322121', naics_description='Paper (except newsprint) mills'),
            NaicsCode(naics_code='322122', naics_description='Newsprint mills'),
            NaicsCode(naics_code='324110', naics_description='Petroleum refineries'),
            NaicsCode(naics_code='325120', naics_description='Industrial gas manufacturing'),
            NaicsCode(naics_code='325181', naics_description='Alkali and chlorine manufacturing'),
            NaicsCode(naics_code='325189', naics_description='All other basic inorganic chemical manufacturing'),
            NaicsCode(naics_code='327310', naics_description='Cement manufacturing'),
            NaicsCode(naics_code='327410', naics_description='Lime manufacturing'),
            NaicsCode(naics_code='327420', naics_description='Gypsum product manufacturing'),
            NaicsCode(naics_code='327990', naics_description='All other non-metallic mineral product manufacturing'),
            NaicsCode(naics_code='331222', naics_description='Steel wire drawing'),
            NaicsCode(naics_code='331313', naics_description='Primary production of alumina and aluminum'),
            NaicsCode(
                naics_code='331410', naics_description='Non-ferrous metal (except aluminum) smelting and refining'
            ),
            NaicsCode(naics_code='331511', naics_description='Iron foundries'),
            NaicsCode(
                naics_code='412110',
                naics_description='Petroleum, petroleum products, and other hydrocarbons merchant wholesalers',
            ),
            NaicsCode(naics_code='486210', naics_description='Pipeline transportation of natural gas'),
        ]
    )


def reverse_init_naics_code_data(apps, schema_monitor):
    '''
    Remove initial data from erc.naics_code
    '''
    NaicsCode = apps.get_model('registration', 'NaicsCode')
    NaicsCode.objects.filter(
        naics_code__in=[
            '211110',
            '212114',
            '212220',
            '212231',
            '212233',
            '212299',
            '213118',
            '311119',
            '311310',
            '311614',
            '321111',
            '321212',
            '321216',
            '321999',
            '322111',
            '322112',
            '322121',
            '322122',
            '324110',
            '325120',
            '325181',
            '325189',
            '327310',
            '327410',
            '327420',
            '327990',
            '331222',
            '331313',
            '331410',
            '331511',
            '412110',
            '486210',
        ]
    ).delete()


def init_regulated_product_data(apps, schema_monitor):
    '''
    Add initial data to erc.regulated_product
    '''
    RegulatedProduct = apps.get_model('registration', 'RegulatedProduct')
    RegulatedProduct.objects.bulk_create(
        [
            RegulatedProduct(name='Baked anodes'),
            RegulatedProduct(name='BC-specific refinery complexity throughput'),
            RegulatedProduct(name='Cement equivalent'),
            RegulatedProduct(name='Chemicals: pure hydrogen peroxide'),
            RegulatedProduct(name='Compression, centrifugal - consumed energy'),
            RegulatedProduct(name='Compression, positive displacement - consumed energy'),
            RegulatedProduct(name='Calcined green coke'),
            RegulatedProduct(name='Gypsum wallboard'),
            RegulatedProduct(name='HDG-process (hot dip galvanization) steel wire'),
            RegulatedProduct(name='Lime at 94.5% calcium oxide (CaO) and lime kiln dust (LKD)'),
            RegulatedProduct(name='Limestone for sale'),
            RegulatedProduct(name='Liquid sugar'),
            RegulatedProduct(name='Solid Sugar'),
            RegulatedProduct(name='Mining: co'),
            RegulatedProduct(name='Mining: copper equivalent, open pit'),
            RegulatedProduct(name='Mining: copper equivalent, underground'),
            RegulatedProduct(name='Mining: gold equivalent'),
            RegulatedProduct(name='Non-HDG steel wire'),
            RegulatedProduct(name='Pulp and paper: paper (except newsprint)'),
            RegulatedProduct(name='Processing sour gas - oil equivalent'),
            RegulatedProduct(name='Processing sweet gas - oil equivalent'),
            RegulatedProduct(name='Pulp and paper: chemical pulp'),
            RegulatedProduct(name='Pulp and paper: non-chemical pulp'),
            RegulatedProduct(name='Rendering and meat processing: protein and fat'),
            RegulatedProduct(name='Smelting: aluminum'),
            RegulatedProduct(name='Smelting: lead-zinc'),
            RegulatedProduct(name='Sold electricity'),
            RegulatedProduct(name='Sold heat'),
            RegulatedProduct(name='Wood products: lumber'),
            RegulatedProduct(name='Wood products: medium density fibreboard'),
            RegulatedProduct(name='Wood products: plywood'),
            RegulatedProduct(name='Wood products: veneer'),
            RegulatedProduct(name='Wood products: wood chips (including hog fuel)'),
            RegulatedProduct(name='Wood products: wood pellets'),
        ]
    )


def reverse_init_regulated_product_data(apps, schema_monitor):
    '''
    Remove initial data from erc.regulated_product
    '''
    RegulatedProduct = apps.get_model('registration', 'RegulatedProduct')
    RegulatedProduct.objects.filter(
        name__in=[
            'Baked anodes',
            'BC-specific refinery complexity throughput',
            'Cement equivalent',
            'Chemicals: pure hydrogen peroxide',
            'Compression, centrifugal - consumed energy',
            'Compression, positive displacement - consumed energy',
            'Calcined green coke',
            'Gypsum wallboard',
            'HDG-process (hot dip galvanization) steel wire',
            'Lime at 94.5% calcium oxide (CaO) and lime kiln dust (LKD)',
            'Limestone for sale',
            'Liquid sugar',
            'Solid Sugar',
            'Mining: co',
            'Mining: copper equivalent, open pit',
            'Mining: copper equivalent, underground',
            'Mining: gold equivalent',
            'Non-HDG steel wire',
            'Pulp and paper: paper (except newsprint)',
            'Processing sour gas - oil equivalent',
            'Processing sweet gas - oil equivalent',
            'Pulp and paper: chemical pulp',
            'Pulp and paper: non-chemical pulp',
            'Rendering and meat processing: protein and fat',
            'Smelting: aluminum',
            'Smelting: lead-zinc',
            'Sold electricity',
            'Sold heat',
            'Wood products: lumber',
            'Wood products: medium density fibreboard',
            'Wood products: plywood',
            'Wood products: veneer',
            'Wood products: wood chips (including hog fuel)',
            'Wood products: wood pellets',
        ]
    ).delete()


def init_reporting_activity_data(apps, schema_monitor):
    '''
    Add initial data to erc.reportingactivity
    '''
    ReportingActivity = apps.get_model('registration', 'ReportingActivity')
    ReportingActivity.objects.bulk_create(
        [
            ReportingActivity(name='General stationary combustion', applicable_to='all'),
            ReportingActivity(name='Fuel combustion by mobile equipment', applicable_to='sfo'),
            ReportingActivity(name='Aluminum or alumina production', applicable_to='sfo'),
            ReportingActivity(name='Ammonia production', applicable_to='sfo'),
            ReportingActivity(name='Cement production', applicable_to='sfo'),
            ReportingActivity(name='Underground coal mining', applicable_to='sfo'),
            ReportingActivity(name='Coal storage at facilities that combust coal', applicable_to='sfo'),
            ReportingActivity(name='Copper or nickel smelting or refining', applicable_to='sfo'),
            ReportingActivity(name='Electricity generation', applicable_to='sfo'),
            ReportingActivity(name='Electronics manufacturing', applicable_to='sfo'),
            ReportingActivity(name='Ferroalloy production', applicable_to='sfo'),
            ReportingActivity(name='Glass manufacturing', applicable_to='sfo'),
            ReportingActivity(name='Hydrogen production', applicable_to='sfo'),
            ReportingActivity(name='Industrial wastewater processing', applicable_to='sfo'),
            ReportingActivity(name='Lead production', applicable_to='sfo'),
            ReportingActivity(name='Lime manufacturing', applicable_to='sfo'),
            ReportingActivity(name='Magnesium production', applicable_to='sfo'),
            ReportingActivity(name='Nitric acid manufacturing', applicable_to='sfo'),
            ReportingActivity(name='Petrochemical production', applicable_to='sfo'),
            ReportingActivity(name='Petroleum refining', applicable_to='sfo'),
            ReportingActivity(name='Phosphoric acid production', applicable_to='sfo'),
            ReportingActivity(name='Pulp and paper production', applicable_to='sfo'),
            ReportingActivity(name='Refinery fuel gas combustion', applicable_to='sfo'),
            ReportingActivity(name='Zinc production', applicable_to='sfo'),
            ReportingActivity(name='Open pit coal mining', applicable_to='sfo'),
            ReportingActivity(name='Storage of petroleum products', applicable_to='sfo'),
            ReportingActivity(name='Carbonate use', applicable_to='sfo'),
            ReportingActivity(name='Oil and gas extraction and gas processing activities', applicable_to='lfo'),
            ReportingActivity(name='Carbon dioxide transportation and oil transmission', applicable_to='lfo'),
            ReportingActivity(name='Electricity transmission', applicable_to='lfo'),
            ReportingActivity(name='Natural gas transmission', applicable_to='lfo'),
            ReportingActivity(name='Natural gas distribution', applicable_to='lfo'),
            ReportingActivity(name='Natural gas storage', applicable_to='lfo'),
            ReportingActivity(name='LNG activities', applicable_to='lfo'),
        ]
    )


def reverse_init_reporting_activity_data(apps, schema_monitor):
    '''
    Remove initial data from erc.reportingactivity
    '''
    ReportingActivity = apps.get_model('registration', 'ReportingActivity')
    ReportingActivity.objects.filter(
        name__in=[
            'General stationary combustion',
            'Fuel combustion by mobile equipment',
            'Aluminum or alumina production',
            'Ammonia production',
            'Cement production',
            'Underground coal mining',
            'Coal storage at facilities that combust coal',
            'Copper or nickel smelting or refining',
            'Electricity generation',
            'Electronics manufacturing',
            'Ferroalloy production',
            'Glass manufacturing',
            'Hydrogen production',
            'Industrial wastewater processing',
            'Lead production',
            'Lime manufacturing',
            'Magnesium production',
            'Nitric acid manufacturing',
            'Petrochemical production',
            'Petroleum refining',
            'Phosphoric acid production',
            'Pulp and paper production',
            'Refinery fuel gas combustion',
            'Zinc production',
            'Open pit coal mining',
            'Storage of petroleum products',
            'Carbonate use',
            'Oil and gas extraction and gas processing activities',
            'Carbon dioxide transportation and oil transmission',
            'Electricity transmission',
            'Natural gas transmission',
            'Natural gas distribution',
            'Natural gas storage',
            'LNG activities',
        ]
    ).delete()


class Migration(migrations.Migration):
    dependencies = [
        ('registration', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(init_app_role_data, reverse_init_app_role_data),
        migrations.RunPython(init_business_role_data, reverse_init_business_role_data),
        migrations.RunPython(init_business_structure_data, reverse_init_business_structure_data),
        migrations.RunPython(init_document_type_data, reverse_init_document_type_data),
        migrations.RunPython(init_naics_code_data, reverse_init_naics_code_data),
        migrations.RunPython(init_regulated_product_data, reverse_init_regulated_product_data),
        migrations.RunPython(init_reporting_activity_data, reverse_init_reporting_activity_data),
    ]
