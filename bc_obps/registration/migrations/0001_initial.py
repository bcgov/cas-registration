# Generated by Django 4.2.6 on 2023-10-11 20:11

from django.db import migrations, models
import django.db.models.deletion
import localflavor.ca.models
import phonenumber_field.modelfields
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(db_comment='', max_length=1000)),
                ('last_name', models.CharField(db_comment='', max_length=1000)),
                ('position_title', models.CharField(db_comment='', max_length=1000)),
                ('street_address', models.CharField(db_comment='', max_length=1000)),
                ('municipality', models.CharField(db_comment='', max_length=1000)),
                ('province', localflavor.ca.models.CAProvinceField(db_comment='', max_length=2)),
                ('postal_code', localflavor.ca.models.CAPostalCodeField(db_comment='', max_length=7)),
                ('email', models.EmailField(db_comment='', max_length=254)),
                (
                    'phone_number',
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, db_comment='', max_length=128, region=None
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."contact',
                'db_table_comment': "Contacts (people who don't use the app, e.g. authorized signing officers)",
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(db_comment='', upload_to='documents')),
                ('description', models.CharField(db_comment='', max_length=1000)),
            ],
            options={
                'db_table': 'erc"."document',
                'db_table_comment': 'Documents',
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'name',
                    models.CharField(
                        choices=[
                            ('boundary_map', 'boundary_map'),
                            ('signed_statuatory_declaration', 'signed_statuatory_declaration'),
                            ('process_flow_diagram', 'process_flow_diagram'),
                            ('proof_of_authority_of_partner_company', 'proof_of_authority_of_partner_company'),
                            ('senior_officer_proof_of_authority', 'senior_officer_proof_of_authority'),
                            (
                                'operation_representative_proof_of_authority',
                                'operation_representative_proof_of_authority',
                            ),
                            ('soce_senior_officer_proof_of_authority', 'soce_senior_officer_proof_of_authority'),
                            ('proof_of_start', 'proof_of_start'),
                            ('opt_in_signed_statuatory_declaration', 'opt_in_signed_statuatory_declaration'),
                        ],
                        db_comment='',
                        max_length=1000,
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."document_type',
                'db_table_comment': 'Table that contains types of allowed documents',
            },
        ),
        migrations.CreateModel(
            name='NaicsCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('naics_category', models.CharField(db_comment='', max_length=1000)),
            ],
            options={
                'db_table': 'erc"."naics_category',
                'db_table_comment': 'Naics categories',
            },
        ),
        migrations.CreateModel(
            name='NaicsCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('naics_code', models.CharField(db_comment='', max_length=1000)),
                ('ciip_sector', models.CharField(db_comment='', max_length=1000)),
                ('naics_description', models.CharField(db_comment='', max_length=1000)),
            ],
            options={
                'db_table': 'erc"."naics_code',
                'db_table_comment': 'Naics codes',
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='', max_length=1000)),
                ('type', models.CharField(db_comment='', max_length=1000)),
                ('reporting_activities', models.CharField(db_comment='', max_length=1000)),
                ('permit_issuing_agency', models.CharField(blank=True, db_comment='', max_length=1000, null=True)),
                ('permit_number', models.CharField(blank=True, db_comment='', max_length=1000, null=True)),
                (
                    'previous_year_attributable_emissions',
                    models.DecimalField(blank=True, db_comment='', decimal_places=5, max_digits=10, null=True),
                ),
                ('swrs_facility_id', models.IntegerField(blank=True, db_comment='', null=True)),
                ('bcghrp_id', models.CharField(blank=True, db_comment='', max_length=1000)),
                (
                    'current_year_estimated_emissions',
                    models.DecimalField(blank=True, db_comment='', decimal_places=5, max_digits=10, null=True),
                ),
                ('opt_in', models.BooleanField(db_comment='')),
                ('new_entrant', models.BooleanField(blank=True, db_comment='', null=True)),
                ('start_of_commercial_operation', models.DateTimeField(blank=True, db_comment='', null=True)),
                ('physical_street_address', models.CharField(db_comment='', max_length=1000)),
                ('physical_municipality', models.CharField(db_comment='', max_length=1000)),
                ('physical_province', localflavor.ca.models.CAProvinceField(db_comment='', max_length=2)),
                ('physical_postal_code', localflavor.ca.models.CAPostalCodeField(db_comment='', max_length=7)),
                ('legal_land_description', models.CharField(db_comment='', max_length=1000)),
                ('latitude', models.DecimalField(db_comment='', decimal_places=5, max_digits=10)),
                ('longitude', models.DecimalField(db_comment='', decimal_places=5, max_digits=10)),
                ('npri_id', models.IntegerField(blank=True, db_comment='', null=True)),
                ('bcer_permit_id', models.IntegerField(blank=True, db_comment='', null=True)),
                ('registered_for_obps', models.BooleanField(db_comment='', default=False)),
                ('major_new_operation', models.BooleanField(blank=True, db_comment='', null=True)),
                ('verified_at', models.DateTimeField(blank=True, db_comment='', null=True)),
                ('contacts', models.ManyToManyField(related_name='operation_contacts', to='registration.contact')),
                (
                    'documents',
                    models.ManyToManyField(blank=True, related_name='operation_documents', to='registration.document'),
                ),
                (
                    'naics_category',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='operations_facilities_naics_catetories',
                        to='registration.naicscategory',
                    ),
                ),
                (
                    'naics_code',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='operations_facilities_naics_code',
                        to='registration.naicscode',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."operation',
                'db_table_comment': 'Operations (also called facilities)',
            },
        ),
        migrations.CreateModel(
            name='Operator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('legal_name', models.CharField(db_comment='', max_length=1000)),
                ('trade_name', models.CharField(db_comment='', max_length=1000)),
                ('cra_business_number', models.IntegerField(db_comment='')),
                ('bc_corporate_registry_number', models.IntegerField(db_comment='')),
                ('duns_number', models.IntegerField(db_comment='')),
                ('business_structure', models.CharField(db_comment='', max_length=1000)),
                ('physical_street_address', models.CharField(db_comment='', max_length=1000)),
                ('physical_municipality', models.CharField(db_comment='', max_length=1000)),
                ('physical_province', localflavor.ca.models.CAProvinceField(db_comment='', max_length=2)),
                ('physical_postal_code', localflavor.ca.models.CAPostalCodeField(db_comment='', max_length=7)),
                ('mailing_street_address', models.CharField(db_comment='', max_length=1000)),
                ('mailing_municipality', models.CharField(db_comment='', max_length=1000)),
                ('mailing_province', localflavor.ca.models.CAProvinceField(db_comment='', max_length=2)),
                ('mailing_postal_code', localflavor.ca.models.CAPostalCodeField(db_comment='', max_length=7)),
                ('website', models.URLField(blank=True, db_comment='', null=True)),
                ('bceid', models.IntegerField(db_comment='')),
                (
                    'compliance_entity',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='operator_compliance_entity',
                        to='registration.operator',
                    ),
                ),
                ('contacts', models.ManyToManyField(related_name='operator_contacts', to='registration.contact')),
                (
                    'documents',
                    models.ManyToManyField(blank=True, related_name='operator_documents', to='registration.document'),
                ),
            ],
            options={
                'db_table': 'erc"."operator',
                'db_table_comment': 'Operators (also called organizations)',
            },
        ),
        migrations.CreateModel(
            name='PetrinexId',
            fields=[
                ('id', models.CharField(db_comment='', default=uuid.uuid4, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'erc"."petrinex_id',
                'db_table_comment': 'Petrinex ids',
            },
        ),
        migrations.CreateModel(
            name='RegulatedProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='', max_length=1000)),
            ],
            options={
                'db_table': 'erc"."regulated_product',
                'db_table_comment': 'Regulated products',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'role_name',
                    models.CharField(
                        choices=[
                            ('senior_officer', 'senior officer'),
                            ('operation_representative', 'operation representative'),
                            ('authorized_signing_officer', 'authorized signing officer'),
                            ('operation_registration_lead', 'operation registration lead'),
                        ],
                        db_comment='',
                        max_length=1000,
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."role',
                'db_table_comment': 'Table to list all contact roles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('first_name', models.CharField(db_comment='', max_length=1000)),
                ('last_name', models.CharField(db_comment='', max_length=1000)),
                ('position_title', models.CharField(db_comment='', max_length=1000)),
                ('street_address', models.CharField(db_comment='', max_length=1000)),
                ('municipality', models.CharField(db_comment='', max_length=1000)),
                ('province', localflavor.ca.models.CAProvinceField(db_comment='', max_length=2)),
                ('postal_code', localflavor.ca.models.CAPostalCodeField(db_comment='', max_length=7)),
                ('email', models.EmailField(db_comment='', max_length=254)),
                (
                    'phone_number',
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, db_comment='', max_length=128, region=None
                    ),
                ),
                ('user_guid', models.UUIDField(db_comment='', default=uuid.uuid4, primary_key=True, serialize=False)),
                ('business_guid', models.UUIDField(db_comment='', default=uuid.uuid4)),
                (
                    'documents',
                    models.ManyToManyField(blank=True, related_name='user_documents', to='registration.document'),
                ),
            ],
            options={
                'db_table': 'erc"."user',
                'db_table_comment': 'App users',
            },
        ),
        migrations.CreateModel(
            name='ParentChildOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'percentage_owned_by_parent_company',
                    models.DecimalField(db_comment='', decimal_places=5, max_digits=10),
                ),
                ('relationship_with_parent_operator', models.CharField(blank=True, db_comment='', max_length=1000)),
                (
                    'child_operator',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='parent_child_operator_child_operator',
                        to='registration.operator',
                    ),
                ),
                (
                    'parent_operator',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='parent_child_operator_parent_operator',
                        to='registration.operator',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."parent_child_operator',
                'db_table_comment': 'Through table to connect parent and child operators',
            },
        ),
        migrations.CreateModel(
            name='OperatorOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'operations',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='operator_operations',
                        to='registration.operation',
                    ),
                ),
                (
                    'operators',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='operator_operators',
                        to='registration.operator',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."operator_operation',
                'db_table_comment': 'Through table to connect Operations and Operators and track parent companies and compliance entities',
            },
        ),
        migrations.AddField(
            model_name='operation',
            name='operator',
            field=models.ForeignKey(
                db_comment='',
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='operations',
                to='registration.operator',
            ),
        ),
        migrations.AddField(
            model_name='operation',
            name='petrinex_ids',
            field=models.ManyToManyField(
                blank=True, related_name='operations_facilities_petrinex_ids', to='registration.petrinexid'
            ),
        ),
        migrations.AddField(
            model_name='operation',
            name='regulated_products',
            field=models.ManyToManyField(
                blank=True, related_name='operations_facilities_regulated_products', to='registration.regulatedproduct'
            ),
        ),
        migrations.AddField(
            model_name='operation',
            name='verified_by',
            field=models.ForeignKey(
                blank=True,
                db_comment='',
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='operation_verified_by',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='document',
            name='type',
            field=models.ForeignKey(
                db_comment='Type of document, e.g., boundary map',
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='contacts',
                to='registration.documenttype',
            ),
        ),
        migrations.AddField(
            model_name='contact',
            name='role',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='contacts', to='registration.role'
            ),
        ),
        migrations.CreateModel(
            name='UserOperator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'role',
                    models.CharField(
                        choices=[('admin', 'Admin'), ('reporter', 'Reporter')], db_comment='', max_length=1000
                    ),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')],
                        db_comment='',
                        default='pending',
                        max_length=1000,
                    ),
                ),
                ('verified_at', models.DateTimeField(blank=True, db_comment='', null=True)),
                (
                    'operators',
                    models.ForeignKey(
                        db_comment='',
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='user_operators',
                        to='registration.operator',
                    ),
                ),
                (
                    'users',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='user_operators',
                        to='registration.user',
                    ),
                ),
                (
                    'verified_by',
                    models.ForeignKey(
                        blank=True,
                        db_comment='',
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name='user_operators_verified_by',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."user_operator',
                'db_table_comment': 'Through table to connect Users and Operators and track access requests',
                'indexes': [
                    models.Index(fields=['users'], name='user_operator_user_idx'),
                    models.Index(fields=['operators'], name='user_operator_operator_idx'),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.UniqueConstraint(
                fields=('user_guid', 'business_guid'), name='uuid_user_and_business_constraint'
            ),
        ),
        migrations.AddIndex(
            model_name='parentchildoperator',
            index=models.Index(fields=['parent_operator'], name='parent_operator_idx'),
        ),
        migrations.AddIndex(
            model_name='parentchildoperator',
            index=models.Index(fields=['child_operator'], name='child_operator_idx'),
        ),
        migrations.AddIndex(
            model_name='operatoroperation',
            index=models.Index(fields=['operations'], name='operator_operation_idx'),
        ),
        migrations.AddIndex(
            model_name='operatoroperation',
            index=models.Index(fields=['operators'], name='operator_operator_idx'),
        ),
        migrations.AddIndex(
            model_name='operator',
            index=models.Index(fields=['compliance_entity'], name='compliance_entity_idx'),
        ),
        migrations.AddIndex(
            model_name='operation',
            index=models.Index(fields=['operator'], name='operator_idx'),
        ),
        migrations.AddIndex(
            model_name='operation',
            index=models.Index(fields=['naics_code'], name='naics_code_idx'),
        ),
        migrations.AddIndex(
            model_name='operation',
            index=models.Index(fields=['verified_by'], name='operation_verified_by_idx'),
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['role'], name='contact_role_idx'),
        ),
        migrations.AddConstraint(
            model_name='contact',
            constraint=models.UniqueConstraint(fields=('email',), name='contact_email_constraint'),
        ),
    ]
