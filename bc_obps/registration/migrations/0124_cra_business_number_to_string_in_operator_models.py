# Generated by Django 5.0.14 on 2025-06-16 22:58

import django.core.validators
from django.db import migrations, models, connection


def collect_cra_business_numbers(apps, schema_editor):
    """
    Collect all cra_business_number values from each table before the schema change.
    Store them in the migration state for later comparison.
    """
    tables = [
        "multiple_operator_history",
        "operator_history",
        "parent_operator_history",
        "partner_operator_history",
        "multiple_operator",
        "operator",
        "parent_operator",
        "partner_operator",
    ]
    before_values = {}
    with connection.cursor() as cursor:
        for table in tables:
            schema = "erc_history" if table.endswith("history") else "erc"
            cursor.execute(f"SELECT cra_business_number FROM {schema}.{table} ORDER BY cra_business_number DESC")
            before_values[table] = [row[0] for row in cursor.fetchall()]
    # Store in schema_editor for access after migration
    schema_editor.connection._cra_bn_before_values = before_values


def assert_cra_business_numbers_casted(apps, schema_editor):
    """
    After the schema change, collect all cra_business_number values from each table,
    and assert that each int value from before exists as its string in the new values.
    """
    tables = [
        "multiple_operator_history",
        "operator_history",
        "parent_operator_history",
        "partner_operator_history",
        "multiple_operator",
        "operator",
        "parent_operator",
        "partner_operator",
    ]
    before_values = getattr(schema_editor.connection, "_cra_bn_before_values", {})
    with connection.cursor() as cursor:
        for table in tables:
            schema = "erc_history" if table.endswith("history") else "erc"
            cursor.execute(f"SELECT cra_business_number FROM {schema}.{table} ORDER BY cra_business_number DESC")
            after_values = [row[0] for row in cursor.fetchall()]
            before_list = before_values.get(table, [])

            assert len(before_list) == len(after_values), (
                f"Length mismatch for table {table}: " f"before={len(before_list)}, after={len(after_values)}"
            )
            print(f"Checking table {table}:")

            records_checked = 0
            for old_val, new_val in zip(before_list, after_values):
                if old_val is None:
                    assert new_val is None, f"Expected None for {table} table, but found {new_val}"
                    records_checked += 1
                    continue
                assert isinstance(new_val, str), (
                    f"Expected {new_val} to be a string in {table} table, " f"but found {type(new_val).__name__}"
                )
                assert str(old_val) == new_val, (
                    f"Value mismatch in {table} table: " f"expected {str(old_val)}, found {new_val}"
                )
                if str(old_val) == new_val:
                    records_checked += 1
            print(f"  {records_checked} out of {len(before_list)} records succesfully checked for {table} table.")


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0123_V3_8_1'),
    ]

    operations = [
        migrations.RunPython(collect_cra_business_numbers, reverse_code=migrations.RunPython.noop),
        migrations.AlterField(
            model_name='historicalmultipleoperator',
            name='cra_business_number',
            field=models.CharField(
                db_comment='The CRA business number of an operator',
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='historicaloperator',
            name='cra_business_number',
            field=models.CharField(
                db_comment='The CRA business number of an operator',
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='historicalparentoperator',
            name='cra_business_number',
            field=models.CharField(
                blank=True,
                db_comment='The CRA business number of an operator',
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='historicalpartneroperator',
            name='cra_business_number',
            field=models.CharField(
                db_comment='The CRA business number of an operator',
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='multipleoperator',
            name='cra_business_number',
            field=models.CharField(
                db_comment='The CRA business number of an operator',
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='operator',
            name='cra_business_number',
            field=models.CharField(
                db_comment='The CRA business number of an operator',
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='parentoperator',
            name='cra_business_number',
            field=models.CharField(
                blank=True,
                db_comment='The CRA business number of an operator',
                null=True,
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.AlterField(
            model_name='partneroperator',
            name='cra_business_number',
            field=models.CharField(
                db_comment='The CRA business number of an operator',
                validators=[
                    django.core.validators.RegexValidator(
                        message='CRA Business Number should be 9 digits.', regex='^\\d{9}$'
                    )
                ],
            ),
        ),
        migrations.RunPython(assert_cra_business_numbers_casted, reverse_code=migrations.RunPython.noop),
    ]
