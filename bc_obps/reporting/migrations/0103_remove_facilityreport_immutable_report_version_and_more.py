# Generated by Django 5.0.14 on 2025-05-14 23:49

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0102_V3_2_0'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='facilityreport',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportactivity',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportadditionaldata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportattachment',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportattachmentconfirmation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportcompliancesummary',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportcompliancesummaryproduct',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportelectricityimportdata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportemission',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportemissionallocation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportfuel',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportmethodology',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrant',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrantemission',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrantproduction',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnonattributableemissions',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportoperation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportoperationrepresentative',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportpersonresponsible',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportproduct',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportproductemissionallocation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportrawactivitydata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportsignoff',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportsourcetype',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportunit',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportverification',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportverificationvisit',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='facilityreport',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."facility_report" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'facilityreport record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='5396e435299fca03acae7b2cec1dd419cd270946',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_0899a',
                    table='erc"."facility_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportactivity',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_activity" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportactivity record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='82b3c80504a642bc4ffca57519b655053231d714',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_12848',
                    table='erc"."report_activity',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportadditionaldata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_additional_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportadditionaldata record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='172dc60a4e21135616d3efc3fe26b631de0042af',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_75b4c',
                    table='erc"."report_additional_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportattachment',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_attachment" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportattachment record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='c80553d8a4572ccb49506b4362abd07a1017c41b',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_3148e',
                    table='erc"."report_attachment',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportattachmentconfirmation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_attachment_confirmation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportattachmentconfirmation record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='4342ef9a56659ebd53ade0afd732d8e4c283a402',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_5f121',
                    table='erc"."report_attachment_confirmation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummary record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='9ec5833036ab228e4a691df67425dc05c3dcd4b9',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_dfcb4',
                    table='erc"."report_compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummaryproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummaryproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='16330595a8737765e33b52e1c2dec52f1c9fdf41',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_9c6f6',
                    table='erc"."report_compliance_summary_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportelectricityimportdata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_electricity_import_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportelectricityimportdata record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='49cbf607b64763fcccb77b565cbdbdaa5acbe8ff',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_bb993',
                    table='erc"."report_electricity_import_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_emission" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='51fd01fa0f6101fba69072ac98cec57961ef8a74',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_43304',
                    table='erc"."report_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='5b9ce5924c2cced67a329ef183130d260092c367',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_0067e',
                    table='erc"."report_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportfuel',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_fuel" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportfuel record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='079bc95eac80b53a8a3178b24ffade89abaa7c0e',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_6dfcf',
                    table='erc"."report_fuel',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportmethodology',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_methodology" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportmethodology record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='18d8b278e820b4ea79d769219fdf5db2e696b001',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_549f7',
                    table='erc"."report_methodology',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrant',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrant record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='d951cf9c6e4926c640e82688e7659307cb8d6d72',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_91283',
                    table='erc"."report_new_entrant',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_new_entrant_emission" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='53ba184bfc8ae488d339ef80f7767d47d8896039',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_cb047',
                    table='erc"."report_new_entrant_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantproduction',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_new_entrant_production" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantproduction record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='e82020b67470805952ae9f89d08c79084cf429a9',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_9db82',
                    table='erc"."report_new_entrant_production',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnonattributableemissions',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_non_attributable_emissions" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnonattributableemissions record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='14f567596f7106c8413d5c6102c831e8c145192d',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_7acda',
                    table='erc"."report_non_attributable_emissions',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_operation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperation record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='e51dd9e41e4c0e625910ed21b7c5059bb9c8a89b',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_2fd67',
                    table='erc"."report_operation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperationrepresentative',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_operation_representative" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperationrepresentative record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='d104d432c053db692df40136bd34d9f20ef310c2',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_f165f',
                    table='erc"."report_operation_representative',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportpersonresponsible',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_person_responsible" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportpersonresponsible record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='009e382f24df0d5ed4c9b45e30af5d2c1f760191',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_5977d',
                    table='erc"."report_person_responsible',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='d21932cbce82cc8ac52936deb34bae7bc910cb90',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_804e0',
                    table='erc"."report_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproductemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_product_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproductemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='4b98a39f538d8384e6a39f915e5f83cdfa72c9d6',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_6eb57',
                    table='erc"."report_product_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportrawactivitydata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."facility_report" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_raw_activity_data" rel3 on rel3.facility_report_id=rel2.id\n                where rel3.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportrawactivitydata record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='7b9ad73bd4c6d2408566a14e138aeaf70ee8dc3c',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_0fd09',
                    table='erc"."report_raw_activity_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsignoff',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_sign_off" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsignoff record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='4be91d20e46a6c83d16a4daf788453107192e00e',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_a4055',
                    table='erc"."report_sign_off',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsourcetype',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_source_type" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsourcetype record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='1664990119e1fa09c08477b49ed2f2e16b080295',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_62a56',
                    table='erc"."report_source_type',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportunit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_unit" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportunit record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='c98f35f19efedbeffd7db2d2d4188d6bd3e098d5',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_e7bf2',
                    table='erc"."report_unit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverification',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_verification" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverification record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='9bc807ee8a3215c6dda954ef64e94f071c3607a7',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_8ea52',
                    table='erc"."report_verification',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverificationvisit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_verification" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_verification_visit" rel3 on rel3.report_verification_id=rel2.id\n                where rel3.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverificationvisit record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='72e5df0848200329733a70a223172de2076ddbbb',
                    operation='UPDATE OR INSERT',
                    pgid='pgtrigger_immutable_report_version_4239c',
                    table='erc"."report_verification_visit',
                    when='BEFORE',
                ),
            ),
        ),
    ]
