# Generated by Django 5.0.14 on 2025-05-30 17:21

from django.db import migrations
import json


def init_additional_gas_type_data(apps, schema_editor):
    """
    Add additional gas types to erc.gas_type
    """
    # Retrieve models from the app registry to interact with the database
    GasType = apps.get_model('reporting', 'GasType')

    # List of gas types with their respective details
    gas_types_data = [
        {"name": "Perfluoropropane", "chemical_formula": "C3F8", "cas_number": "76-19-7", "gwp": 8900},
        {"name": "Perfluorobutane", "chemical_formula": "C4F10", "cas_number": "355-25-9", "gwp": 9200},
        {"name": "Perfluorocyclobutane", "chemical_formula": "c-C4F8", "cas_number": "115-25-3", "gwp": 9540},
        {"name": "Perfluoropentane", "chemical_formula": "C5F12", "cas_number": "678-26-2", "gwp": 8550},
        {"name": "Perfluorohexane", "chemical_formula": "C6F14", "cas_number": "355-42-0", "gwp": 7910},
    ]

    # Bulk creation of GasType records
    GasType.objects.bulk_create([GasType(**data) for data in gas_types_data])


def reverse_init_additional_gas_type_data(apps, schema_editor):
    """
    Remove additional gas_type data from erc.gas_type
    """
    GasType = apps.get_model('reporting', 'GasType')
    chemical_formulas = ["C3F8", "C4F10", "c-C4F8", "C5F12", "C6F14"]

    GasType.objects.filter(chemical_formula__in=chemical_formulas).delete()


def init_configuration_element_data(apps, schema_monitor):
    """
    Add initial data to erc.configuration_element
    """

    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    GasType = apps.get_model("reporting", "GasType")
    Methodology = apps.get_model("reporting", "Methodology")
    Configuration = apps.get_model("reporting", "Configuration")

    # Installation, maintenance, operation and decommissioning of electrical equipment
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(name="Electricity transmission").id,
            source_type_id=SourceType.objects.get(
                name="Installation, maintenance, operation and decommissioning of electrical equipment"
            ).id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from="2023-01-01").id,
            valid_to_id=Configuration.objects.get(valid_to="2099-12-31").id,
        )
        for methodology_name in [
            "Mass balance",
            "Direct measurement",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
        for gas_formula in ["SF6", "CF4", "C2F6", "C3F8", "C4F10", "c-C4F8", "C5F12", "C6F14"]
    )


def reverse_init_configuration_element_data(apps, schema_monitor):
    """
    Remove initial data from erc.configuration_element
    """
    Configuration = apps.get_model("reporting", "Configuration")
    Activity = apps.get_model("registration", "Activity")
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    ConfigurationElement.objects.filter(
        reporting_activity_id=Activity.objects.get(name="Electricity transmission").id,
        valid_from_id=Configuration.objects.get(valid_from="2023-01-01").id,
        valid_to_id=Configuration.objects.get(valid_to="2099-12-31").id,
    ).delete()


def init_configuration_element_reporting_fields_data(apps, schema_monitor):
    """
    Add initial data to erc.activity_source_type_base_schema
    """
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    Methodology = apps.get_model("reporting", "Methodology")
    ReportingField = apps.get_model("reporting", "ReportingField")

    # Add "Description" fields to all ConfigurationElement records for this activity for methdologies: Replacement Methodology & Alternative Parameter Measurement Methodology
    activity_id = Activity.objects.get(name="Electricity transmission").id
    methodology_ids = Methodology.objects.filter(
        name__in=[
            "Replacement Methodology",
            "Alternative Parameter Measurement Methodology",
        ]
    ).values_list("id", flat=True)
    activity_configs = ConfigurationElement.objects.filter(activity_id=activity_id, methodology_id__in=methodology_ids)
    for config in activity_configs:
        config.reporting_fields.add(ReportingField.objects.get(field_name="Description", field_units__isnull=True))


def reverse_init_configuration_element_reporting_fields_data(apps, schema_monitor):
    """
    Remove data from erc.configuration_element_reporting_fields
    """
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")

    ConfigurationElement.reporting_fields.through.objects.filter(
        configurationelement_id__in=ConfigurationElement.objects.filter(
            activity_id=Activity.objects.get(name="Electricity transmission").id
        ).values_list("id", flat=True)
    ).delete()


#### SCHEMA DATA ####
def init_activity_schema_data(apps, schema_monitor):
    """
    Add initial schema data to erc.activity_schema
    """
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f"{cwd}/reporting/json_schemas/2024/electricity_transmission/activity.json") as gsc_st1:
        schema = json.load(gsc_st1)

    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")
    ActivitySchema.objects.create(
        activity_id=Activity.objects.get(name="Electricity transmission").id,
        json_schema=schema,
        valid_from_id=Configuration.objects.get(valid_from="2023-01-01").id,
        valid_to_id=Configuration.objects.get(valid_to="2099-12-31").id,
    )


def reverse_init_activity_schema_data(apps, schema_monitor):
    """
    Remove initial data from erc.base_schema
    """
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    ActivitySchema.objects.filter(activity_id=Activity.objects.get(name="Electricity transmission").id).delete()


# SOURCE TYPE
def init_activity_source_type_schema_data(apps, schema_monitor):
    """
    Add initial schema data to erc.activity_source_type_schema
    """
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(
        f"{cwd}/reporting/json_schemas/2024/electricity_transmission/installation_maint_operation_electrical_equipment.json"
    ) as og_st1:
        schema1 = json.load(og_st1)

    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    Configuration = apps.get_model("reporting", "Configuration")
    ActivitySourceTypeSchema.objects.create(
        activity_id=Activity.objects.get(name="Electricity transmission").id,
        source_type_id=SourceType.objects.get(
            name="Installation, maintenance, operation and decommissioning of electrical equipment"
        ).id,
        json_schema=schema1,
        valid_from_id=Configuration.objects.get(valid_from="2023-01-01").id,
        valid_to_id=Configuration.objects.get(valid_to="2099-12-31").id,
        has_unit=False,
        has_fuel=False,
    )


def reverse_init_activity_source_type_schema_data(apps, schema_monitor):
    """
    Remove initial data from erc.base_schema
    """
    ActivitySourceTypeJsonSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    ActivitySourceTypeJsonSchema.objects.filter(
        activity_id=Activity.objects.get(name="Electricity transmission").id
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0108_V3_4_1'),
    ]

    operations = [
        migrations.RunPython(
            init_additional_gas_type_data,
            reverse_init_additional_gas_type_data,
        ),
        migrations.RunPython(
            init_configuration_element_data,
            reverse_init_configuration_element_data,
        ),
        migrations.RunPython(
            init_configuration_element_reporting_fields_data,
            reverse_init_configuration_element_reporting_fields_data,
        ),
        migrations.RunPython(
            init_activity_schema_data,
            reverse_init_activity_schema_data,
        ),
        migrations.RunPython(
            init_activity_source_type_schema_data,
            reverse_init_activity_source_type_schema_data,
        ),
    ]
