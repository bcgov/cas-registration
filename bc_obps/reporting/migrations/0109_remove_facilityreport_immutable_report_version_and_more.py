# Generated by Django 5.0.14 on 2025-05-29 20:29

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0108_V3_4_1'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='facilityreport',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportactivity',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportadditionaldata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportattachment',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportattachmentconfirmation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportcompliancesummary',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportcompliancesummaryproduct',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportelectricityimportdata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportemission',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportemissionallocation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportfuel',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportmethodology',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrant',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrantemission',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrantproduction',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnonattributableemissions',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportoperation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportoperationrepresentative',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportpersonresponsible',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportproduct',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportproductemissionallocation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportrawactivitydata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportsignoff',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportsourcetype',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportunit',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportverification',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportverificationvisit',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='facilityreport',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."facility_report" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'facilityreport record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='fa9d0f7a477cb2cf53b99157678aa774d8a8f648',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_0899a',
                    table='erc"."facility_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportactivity',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_activity" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportactivity record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='eeda6cfba13569cd7d1f38f5ae37a67dabe4f9ff',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_12848',
                    table='erc"."report_activity',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportadditionaldata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_additional_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportadditionaldata record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='35f9f0916fccc7dfbe8adb66bb962e1595c570ee',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_75b4c',
                    table='erc"."report_additional_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportattachment',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_attachment" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportattachment record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='26b35f36d1f22aaad2570bc82b50aca04ae3aca9',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_3148e',
                    table='erc"."report_attachment',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportattachmentconfirmation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_attachment_confirmation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportattachmentconfirmation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='8894fb40de8503a5a569491d0472352f2435cea7',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_5f121',
                    table='erc"."report_attachment_confirmation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummary record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='3842002475be1722095aab7c6f242c96589d5330',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_dfcb4',
                    table='erc"."report_compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummaryproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummaryproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='76f2a17292082b8ca2ed71643749861c74ff7854',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_9c6f6',
                    table='erc"."report_compliance_summary_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportelectricityimportdata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_electricity_import_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportelectricityimportdata record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='23cd156c44cf5ea6aeb6da4e172679dbd8e9f35b',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_bb993',
                    table='erc"."report_electricity_import_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_emission" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='1d89a5207f23cf61eefeaa8c6b9dd06a3b2b70ea',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_43304',
                    table='erc"."report_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='0d7e4f3f822f7bc8efec881c8d8f21732b71fe0c',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_0067e',
                    table='erc"."report_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportfuel',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_fuel" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportfuel record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='dc9cecdb72811711a3e098e115a61b236d8a2416',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_6dfcf',
                    table='erc"."report_fuel',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportmethodology',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_methodology" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportmethodology record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='75b6382d6c8425d7ff5e12b6484b38c77f78f2cc',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_549f7',
                    table='erc"."report_methodology',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrant',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrant record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='37c251d02ecdee08f9ba77997df28ffe856c833f',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_91283',
                    table='erc"."report_new_entrant',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_new_entrant_emission" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='60b3624e16e0231703dca21975e99b7193adc6b3',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_cb047',
                    table='erc"."report_new_entrant_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantproduction',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_new_entrant_production" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantproduction record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='31ec61475d9f4ac52ce32f8db4d156dc9c16d12d',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_9db82',
                    table='erc"."report_new_entrant_production',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnonattributableemissions',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_non_attributable_emissions" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnonattributableemissions record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='1c2ffda78b96ee690ab648577ba69680eede444e',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_7acda',
                    table='erc"."report_non_attributable_emissions',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_operation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='1577f71271216b44f4a3c77da45790c88de9fc49',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_2fd67',
                    table='erc"."report_operation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperationrepresentative',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_operation_representative" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperationrepresentative record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='d03fd778fadd235223f18837844131806d40b31e',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_f165f',
                    table='erc"."report_operation_representative',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportpersonresponsible',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_person_responsible" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportpersonresponsible record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='961a49b761a9080f15ae5e207467194022c4a658',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_5977d',
                    table='erc"."report_person_responsible',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='fe035d5a516f376134ef92c21d7631b7ded4b2fe',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_804e0',
                    table='erc"."report_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproductemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_product_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproductemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='83c9fa6be17f8adf86dc129bf46c4dabb56aee49',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_6eb57',
                    table='erc"."report_product_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportrawactivitydata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."facility_report" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_raw_activity_data" rel3 on rel3.facility_report_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportrawactivitydata record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='a14503fc817e938719e4e8bea59e1aa0d1255f0e',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_0fd09',
                    table='erc"."report_raw_activity_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsignoff',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_sign_off" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsignoff record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='9f50433c2384976701e92f1fa42aa1358ea14f0d',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_a4055',
                    table='erc"."report_sign_off',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsourcetype',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_source_type" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsourcetype record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='385dd059b550e564df618cd8110964f81b9474e9',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_62a56',
                    table='erc"."report_source_type',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportunit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_unit" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportunit record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='e524c5db0073e1868e5a0fdedec927b68ede2242',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_e7bf2',
                    table='erc"."report_unit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverification',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_verification" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverification record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='7f2dad0bd2d679b10d37cdd64509a8bed52c8b3c',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_8ea52',
                    table='erc"."report_verification',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverificationvisit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_verification" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_verification_visit" rel3 on rel3.report_verification_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverificationvisit record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new, old);\n            end;\n            ',
                    hash='3a286b82c5cbb73b0a24c58c4d49bf039cd0baef',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_4239c',
                    table='erc"."report_verification_visit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportversion',
            trigger=pgtrigger.compiler.Trigger(
                name='no_delete_submitted_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."status" = \'Submitted\')',
                    func="RAISE EXCEPTION 'pgtrigger: Cannot delete rows from % table', TG_TABLE_NAME;",
                    hash='a303d54b84586cea3db14dc3f4e3d569a98c0d5e',
                    operation='DELETE',
                    pgid='pgtrigger_no_delete_submitted_report_version_8d743',
                    table='erc"."report_version',
                    when='BEFORE',
                ),
            ),
        ),
    ]
