# Generated by Django 5.0.14 on 2025-05-27 17:36

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0107_V3_3_0'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='facilityreport',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportactivity',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportadditionaldata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportattachment',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportattachmentconfirmation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportcompliancesummary',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportcompliancesummaryproduct',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportelectricityimportdata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportemission',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportemissionallocation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportfuel',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportmethodology',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrant',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrantemission',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnewentrantproduction',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportnonattributableemissions',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportoperation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportoperationrepresentative',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportpersonresponsible',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportproduct',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportproductemissionallocation',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportrawactivitydata',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportsignoff',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportsourcetype',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportunit',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportverification',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='reportverificationvisit',
            name='immutable_report_version',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='facilityreport',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."facility_report" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'facilityreport record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='46f3b849acee1c95d50304640432fe614333d63f',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_0899a',
                    table='erc"."facility_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportactivity',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_activity" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportactivity record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='d2894b58a1130baa0b354fcc72de372f0b4f561c',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_12848',
                    table='erc"."report_activity',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportadditionaldata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_additional_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportadditionaldata record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='0f105af1cc3af0e9a96532ac184b497ea4f4a983',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_75b4c',
                    table='erc"."report_additional_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportattachment',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_attachment" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportattachment record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='063e8d1fc95c38c7b2bb8a26c33a4fd08df4ab60',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_3148e',
                    table='erc"."report_attachment',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportattachmentconfirmation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_attachment_confirmation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportattachmentconfirmation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='2e18075745c493e53d7e0e00b320ee2fde2fc92e',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_5f121',
                    table='erc"."report_attachment_confirmation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummary record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='7009ccd49a6c31a9c3d67dd9540232bdc509fe52',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_dfcb4',
                    table='erc"."report_compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummaryproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummaryproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='1fe811d029f80647a991248fa3cf937a27ec1bcc',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_9c6f6',
                    table='erc"."report_compliance_summary_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportelectricityimportdata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_electricity_import_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportelectricityimportdata record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='4e62cbbf07d7c8123b214f250ed232c7a33d6f76',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_bb993',
                    table='erc"."report_electricity_import_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_emission" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='e708b357206b0022dc379cebf206cc6afdb52266',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_43304',
                    table='erc"."report_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='99ecf8c931399263be9eba50ffd264226145967c',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_0067e',
                    table='erc"."report_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportfuel',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_fuel" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportfuel record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='1e5a93a862db2a2d15f65d260ade9f6763df1558',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_6dfcf',
                    table='erc"."report_fuel',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportmethodology',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_methodology" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportmethodology record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='9e2809eaf0a7b5f0238949b803210ea999e4edee',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_549f7',
                    table='erc"."report_methodology',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrant',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrant record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='0eceb991b8db21214b4b0fb8270dffd6f583acf4',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_91283',
                    table='erc"."report_new_entrant',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_new_entrant_emission" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='130c07807c4d52f8aba04ab3ac72124066cf7dda',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_cb047',
                    table='erc"."report_new_entrant_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantproduction',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_new_entrant_production" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantproduction record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='77640ab472f1255f51f8b1e2c3328bd4cc195413',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_9db82',
                    table='erc"."report_new_entrant_production',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnonattributableemissions',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_non_attributable_emissions" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnonattributableemissions record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='e50da41bd60ad01c7d2b1419d04fa4f93ccd7efa',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_7acda',
                    table='erc"."report_non_attributable_emissions',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_operation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='b531bee5c16d5f06860fa66e2247c0a87cc23d32',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_2fd67',
                    table='erc"."report_operation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperationrepresentative',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_operation_representative" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperationrepresentative record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='2b8873685572a011f8445edfd4ace8ab17ab957e',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_f165f',
                    table='erc"."report_operation_representative',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportpersonresponsible',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_person_responsible" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportpersonresponsible record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='9fbfe2566774b22fdaa29616e52e04af73e37e06',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_5977d',
                    table='erc"."report_person_responsible',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='7aff748064efc4c1cf66cf63c405c09d0104cc33',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_804e0',
                    table='erc"."report_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproductemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_product_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproductemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='4c3b6fe20fe2349261da198a2520d260cb46b4dd',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_6eb57',
                    table='erc"."report_product_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportrawactivitydata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."facility_report" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_raw_activity_data" rel3 on rel3.facility_report_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportrawactivitydata record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='a400cf26a36577321330c2059daa81d8d3d1a8f7',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_0fd09',
                    table='erc"."report_raw_activity_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsignoff',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_sign_off" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsignoff record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='81e0204ac21f76818ff84d6d0bc55a85b4abc1e3',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_a4055',
                    table='erc"."report_sign_off',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsourcetype',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_source_type" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsourcetype record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='ff33f3129b06f60e5118309f3c9d638d3923e34c',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_62a56',
                    table='erc"."report_source_type',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportunit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_unit" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportunit record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='4b9788d8165b43636e433b04e5939abd31c86987',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_e7bf2',
                    table='erc"."report_unit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverification',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_verification" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverification record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='89cbc0fcd2814c35dbd0d299b817c8fc35b71564',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_8ea52',
                    table='erc"."report_verification',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverificationvisit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_verification" rel2 on rel2.report_version_id=rel1.id\n                join "erc"."report_verification_visit" rel3 on rel3.report_verification_id=rel2.id\n                where rel3.id=coalesce(new.id, old.id)\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverificationvisit record is immutable after a report version has been submitted\';\n                end if;\n\n                return coalesce(new,old);\n            end;\n            ',
                    hash='662bd142b69225f045f8ee12a24e1a9e7943d78f',
                    operation='UPDATE OR INSERT OR DELETE',
                    pgid='pgtrigger_immutable_report_version_4239c',
                    table='erc"."report_verification_visit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportversion',
            trigger=pgtrigger.compiler.Trigger(
                name='no_delete_submitted_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."status" = \'Submitted\')',
                    func="RAISE EXCEPTION 'pgtrigger: Cannot delete rows from % table', TG_TABLE_NAME;",
                    hash='a303d54b84586cea3db14dc3f4e3d569a98c0d5e',
                    operation='DELETE',
                    pgid='pgtrigger_no_delete_submitted_report_version_8d743',
                    table='erc"."report_version',
                    when='BEFORE',
                ),
            ),
        ),
    ]
