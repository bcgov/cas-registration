# Generated by Django 5.0.13 on 2025-03-24 20:44

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0095_document_status_historicaldocument_status'),
        ('reporting', '0077_alter_activity_json_schema_petroleum_refining'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReportSignOff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'acknowledgement_of_review',
                    models.BooleanField(
                        db_comment='Whether the user has certified that they have reviewed the report, and that they have ensured that the information included in this report is true and complete.',
                        default=False,
                    ),
                ),
                (
                    'acknowledgement_of_records',
                    models.BooleanField(
                        db_comment='Whether the user has understood that the information provided in the report may require records from the Operator evidencing the truth of this report.',
                        default=False,
                    ),
                ),
                (
                    'acknowledgement_of_information',
                    models.BooleanField(
                        blank=True,
                        db_comment='Whether the user has understood that this information is being collected for the purpose of emission reporting under the Greenhouse Gas Industrial Reporting and Control Act and may be disclosed to the Ministry responsible for the administration and enforcement of the Carbon Tax Act.',
                        null=True,
                    ),
                ),
                (
                    'acknowledgement_of_possible_costs',
                    models.BooleanField(
                        db_comment='Whether the user has understood that the information provided in this report can impact any compliance obligation of this operation and that any errors, omissions, or misstatements can lead to an additional compliance obligation or administrative penalties.',
                        default=False,
                    ),
                ),
                (
                    'acknowledgement_of_new_version',
                    models.BooleanField(
                        blank=True,
                        db_comment='Whether the user has understood that the sign-off is creating a new report version that will be the report for the reporting or compliance period that it pertains to.',
                        null=True,
                    ),
                ),
                ('signature', models.TextField(db_comment='The signature of the user who signed off the report')),
                ('signing_date', models.DateTimeField(db_comment='The date and time the report was signed off')),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'report_version',
                    models.ForeignKey(
                        db_comment='The report this sign-off information relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='report_sign_off',
                        to='reporting.reportversion',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."report_sign_off',
                'db_table_comment': "Stores information about the sign-off of a report, including the user's certification of due diligence, understanding of the report's purpose, and the impact of the information provided. Also stores the user's signature and the date and time of the sign-off.",
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsignoff',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='f38050ea932ac23eff3028b2e321709b9b06e23e',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_9c15e',
                    table='erc"."report_sign_off',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsignoff',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='ac347a13a6a530df335f62fa7785d80501d7cab0',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_931e4',
                    table='erc"."report_sign_off',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsignoff',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_sign_off" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsignoff record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='44ff4939e468fdc5a7e55964f531e6c08afa8281',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_a4055',
                    table='erc"."report_sign_off',
                    when='BEFORE',
                ),
            ),
        ),
    ]
