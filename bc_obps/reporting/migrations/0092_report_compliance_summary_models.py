# Generated by Django 5.0.14 on 2025-04-22 23:45

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0107_V3_0_0'),
        ('reporting', '0091_V3_0_0'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReportComplianceSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'emissions_attributable_for_reporting',
                    models.DecimalField(
                        db_comment="Total emissions in tCO2e that are considered attributable for reporting. This is the sum of all emissions reported from 'basic' emission categories",
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'reporting_only_emissions',
                    models.DecimalField(
                        db_comment="Total emissions in tCO2e that are considered to be reporting-only emissions. This is the sum of emissions reported from 'excluded' categories and emissions from unregulated products",
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'emissions_attributable_for_compliance',
                    models.DecimalField(
                        db_comment='Total emissions in tCO2e that are counted for compliance. This is the total difference between reporting emissions and reporting-only emissions',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'emissions_limit',
                    models.DecimalField(
                        db_comment='The emissions limit for the regulated operation. Calculation is in the Greenhouse Gas Emission Reporting Regulation (https://www.bclaws.gov.bc.ca/civix/document/id/lc/statreg/249_2015#section14)',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'excess_emissions',
                    models.DecimalField(
                        db_comment='The total amount of emissions that a regulated operation emmitted above the emissions limit. Definition in in the Greenhouse Gas Emission Reporting Regulation (https://www.bclaws.gov.bc.ca/civix/document/id/lc/statreg/249_2015#section14)',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'credited_emissions',
                    models.DecimalField(
                        db_comment='The total amount of emissions that a regulated operation emitted below the emissions limit. Definition in the Greenhouse Gas Emission Reporting Regulation (https://www.bclaws.gov.bc.ca/civix/document/id/lc/statreg/249_2015#section14)',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'report_version',
                    models.ForeignKey(
                        db_comment='The version of the report this compliance summary data relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='report_compliance_summary',
                        to='reporting.reportversion',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."report_compliance_summary',
                'db_table_comment': 'This table contains the compliance summary data calculated for a regulated operation.',
            },
        ),
        migrations.CreateModel(
            name='ReportComplianceSummaryProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'emissions_attributable_for_reporting',
                    models.DecimalField(
                        db_comment="Total emissions in tCO2e that are considered attributable for reporting. This is the sum of all emissions reported from 'basic' emission categories",
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'annual_production',
                    models.DecimalField(
                        db_comment='Amount of product produced for the year', decimal_places=4, max_digits=20
                    ),
                ),
                (
                    'apr_dec_production',
                    models.DecimalField(
                        db_comment='Amount of product produced between April & December',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'emission_intensity',
                    models.DecimalField(
                        db_comment='The published B.C. productionweighted average emission intensity (PWAEI) for that product found in Schedule A.1 of the GGERR. https://www.bclaws.gov.bc.ca/civix/document/id/lc/statreg/249_2015#ScheduleA',
                        decimal_places=4,
                        max_digits=10,
                    ),
                ),
                (
                    'allocated_industrial_process_emissions',
                    models.DecimalField(
                        db_comment='Total amount of emissions allocated to this product that are categorised as Industrial Process emissions',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'allocated_compliance_emissions',
                    models.DecimalField(
                        db_comment='Total amount of emissions allocated to this product that are considered as part of the compliance obligation',
                        decimal_places=4,
                        max_digits=20,
                    ),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'product_id',
                    models.ForeignKey(
                        db_comment='The id of the regulated_product record this product data is for',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='+',
                        to='registration.regulatedproduct',
                    ),
                ),
                (
                    'report_compliance_summary',
                    models.ForeignKey(
                        db_comment='The report_compliance_summary parent object this product data relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='report_compliance_summary_products',
                        to='reporting.reportcompliancesummary',
                    ),
                ),
                (
                    'report_version',
                    models.ForeignKey(
                        db_comment='The version of the report this compliance summary data relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='report_compliance_summary_products',
                        to='reporting.reportversion',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."report_compliance_summary_product',
                'db_table_comment': 'This table contains the compliance summary data for each product calculated for a regulated operation.',
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='c8a842dae90f99f3a48d6237d3c9dc18cb527903',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_44fdd',
                    table='erc"."report_compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='e207e5f8b081753913ba523d89cc66e41d1afde7',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_e5b63',
                    table='erc"."report_compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummary',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummary record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='30d762bd850a37643cb7797291949b4d2202af22',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_dfcb4',
                    table='erc"."report_compliance_summary',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummaryproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='0a8d1e061361ac1d9bdf15eb85a10221e16851d0',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_a26bc',
                    table='erc"."report_compliance_summary_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummaryproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='1f258061c76cf956b48cbeb1e81b3d124c18a226',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_2e285',
                    table='erc"."report_compliance_summary_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportcompliancesummaryproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_compliance_summary_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportcompliancesummaryproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='b5c33beb55ed5c9226a8e043893350dc06efa5f9',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_9c6f6',
                    table='erc"."report_compliance_summary_product',
                    when='BEFORE',
                ),
            ),
        ),
    ]
