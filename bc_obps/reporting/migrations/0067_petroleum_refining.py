# Generated by Django 5.0.11 on 2025-02-10 23:10
from django.db import migrations
import json

CONFIG_SOURCE_TYPE_SCHEMA = [
    (
        "1_catalyst_regeneration",
        "Catalyst regeneration",
        False,
        False,
    ),
    (
        "2_process_vents",
        "Process vents",
        False,
        False,
    ),
    (
        "3_asphalt_production",
        "Asphalt production",
        False,
        False,
    ),
    (
        "4_sulphur_recovery",
        "Sulphur recovery",
        False,
        False,
    ),
    (
        "5_flares",
        "Flares, the flare pilot, the combustion of purge gas and the destruction of low Btu gases",
        False,
        False,
    ),
    (
        "6_above_ground_storage_tanks",
        "Above-ground storage tanks at refineries",
        False,
        False,
    ),
    (
        "7_oil_water_separators",
        "Oil-water separators at refineries",
        False,
        False,
    ),
    (
        "8_equipment_leaks",
        "Equipment leaks",
        False,
        False,
    ),
    (
        "9_wastewater_processing",
        "Wastewater processing using anaerobic digestion at refineries",
        False,
        False,
    ),
    (
        "10_uncontrolled_blowdown_systems",
        "Uncontrolled blowdown systems used at refineries",
        False,
        False,
    ),
    (
        "11_loading_operations",
        "Loading operations at refineries and terminals",
        False,
        False,
    ),
    (
        "12_delayed_coking_units",
        "Delayed coking units at refineries",
        False,
        False,
    ),
    (
        "13_coke_calcining",
        "Coke calcining at refineries",
        False,
        False,
    ),
]


def init_additional_methodology_data(apps, schema_monitor):
    '''
    Add new methodology data to erc.methodology
    '''
    Methodology = apps.get_model('reporting', 'Methodology')
    Methodology.objects.bulk_create(
        [
            Methodology(name='Default emission factor'),
            Methodology(name='Measured emission factor'),
            Methodology(name="WCI.203(a)(1)"),
            Methodology(name="WCI.203(a)(2)"),
            Methodology(name="WCI.203(a)(3)"),
            Methodology(name="WCI.203(b)"),
            Methodology(name="WCI.203(c)"),
            Methodology(name="WCI.203(d)"),
            Methodology(name="WCI.203(e)(1)"),
            Methodology(name="WCI.203(e)(2)(A)(i)"),
            Methodology(name="WCI.203(e)(2)(A)(ii)"),
            Methodology(name="WCI.203(e)(B)"),
            Methodology(name="WCI.203(e)(3)(A)"),
            Methodology(name="WCI.203(e)(3)(B)"),
            Methodology(name="WCI.203(i)(1)"),
            Methodology(name="WCI.203(i)(2)"),
            Methodology(name="WCI.203(j)(2)"),
            Methodology(name="WCI.203(l)"),
            Methodology(name="WCI.203(m)(1)"),
            Methodology(name="WCI.203(m)(2)"),
        ]
    )


def reverse_init_additional_methodology_data(apps, schema_monitor):
    '''
    Remove new methodology data from erc.methodology
    '''
    Methodology = apps.get_model('reporting', 'Methodology')
    Methodology.objects.filter(
        name__in=[
            'Default emission factor',
            'Measured emission factor',
            "WCI.203(a)(1)",
            "WCI.203(a)(2)",
            "WCI.203(a)(3)",
            "WCI.203(b)",
            "WCI.203(c)",
            "WCI.203(d)",
            "WCI.203(e)(1)",
            "WCI.203(e)(2)(A)(i)",
            "WCI.203(e)(2)(A)(ii)",
            "WCI.203(e)(B)",
            "WCI.203(e)(3)(A)",
            "WCI.203(e)(3)(B)",
            "WCI.203(i)(1)",
            "WCI.203(i)(2)",
            "WCI.203(j)(2)",
            "WCI.203(l)",
            "WCI.203(m)(1)",
            "WCI.203(m)(2)",
        ]
    ).delete()


def init_configuration_element_data(apps, schema_monitor):
    '''
    Add initial data to erc.configuration_element
    '''

    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')

    petroleum_refining_activity = Activity.objects.get(name='Petroleum refining')

    # Source Type: Catalyst regeneration
    ## Gas: CO2
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Catalyst regeneration'),
            gas_type=GasType.objects.get(chemical_formula="CO2"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "CEMS",
            "WCI.203(a)(1)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Catalyst regeneration'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(a)(2)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: N2O
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Catalyst regeneration'),
            gas_type=GasType.objects.get(chemical_formula="N2O"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(a)(3)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Process vents
    ## Gas: CO2
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Process vents'),
            gas_type=GasType.objects.get(chemical_formula="CO2"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "CEMS",
            "WCI.203(b)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Process vents'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(b)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: N2O
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Process vents'),
            gas_type=GasType.objects.get(chemical_formula="N2O"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(b)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Asphalt production
    ## Gas: CO2
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Asphalt production'),
            gas_type=GasType.objects.get(chemical_formula="CO2"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "CEMS",
            "WCI.203(c)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Asphalt production'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(c)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Sulphur recovery
    ## Gas: CO2
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Sulphur recovery'),
            gas_type=GasType.objects.get(chemical_formula="CO2"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "CEMS",
            "WCI.203(d)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Flares, the flare pilot, the combustion of purge gas and the destruction of low Btu gases
    ## Gas: CO2
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(
                name='Flares, the flare pilot, the combustion of purge gas and the destruction of low Btu gases'
            ),
            gas_type=GasType.objects.get(chemical_formula="CO2"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(e)(1)",
            "WCI.203(e)(2)(A)(i)",
            "WCI.203(e)(2)(A)(ii)",
            "WCI.203(e)(B)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(
                name='Flares, the flare pilot, the combustion of purge gas and the destruction of low Btu gases'
            ),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(e)(1)",
            "WCI.203(e)(3)(A)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: N2O
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(
                name='Flares, the flare pilot, the combustion of purge gas and the destruction of low Btu gases'
            ),
            gas_type=GasType.objects.get(chemical_formula="N2O"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(e)(1)",
            "WCI.203(e)(3)(B)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Above ground storage tanks at refineries
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Above-ground storage tanks at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(f)(1)",
            "WCI.203(f)(2)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Oil-water separators at refineries
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Oil-water separators at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "Default conversion factor",
            "Measured conversion factor",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Equipment leaks
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Equipment leaks'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(i)(1)",
            "WCI.203(i)(2)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Wastewater processing using anaerobic digestion at refineries
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Wastewater processing using anaerobic digestion at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "Chemical Oxygen Demand",
            "Biochemical Oxygen Demand",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: N2O
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Wastewater processing using anaerobic digestion at refineries'),
            gas_type=GasType.objects.get(chemical_formula="N2O"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "Nitrogen in effluent",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Uncontrolled blowdown systems used at refineries
    ## Gas: CO2
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Uncontrolled blowdown systems used at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CO2"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "CEMS",
            "WCI.203(b)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Uncontrolled blowdown systems used at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(b)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: N2O
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Uncontrolled blowdown systems used at refineries'),
            gas_type=GasType.objects.get(chemical_formula="N2O"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(b)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Loading operations at refineries and terminals
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Loading operations at refineries and terminals'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(l)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Delayed coking units at refineries
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Delayed coking units at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "WCI.203(m)(1)",
            "WCI.203(m)(2)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    # Source Type: Coke calcining
    ## Gas: CO2
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Coke calcining at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CO2"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "CEMS",
            "WCI.203(j)(2)",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: CH4
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Coke calcining at refineries'),
            gas_type=GasType.objects.get(chemical_formula="CH4"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            'Default emission factor',
            'Measured emission factor',
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )
    ## Gas: N2O
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=petroleum_refining_activity,
            source_type=SourceType.objects.get(name='Coke calcining at refineries'),
            gas_type=GasType.objects.get(chemical_formula="N2O"),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from='2023-01-01'),
            valid_to=Configuration.objects.get(valid_to='2099-12-31'),
        )
        for methodology_name in [
            "Default emission factor",
            "Measured emission factor",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ]
    )


def reverse_init_configuration_element_data(apps, schema_monitor):
    '''
    Remove initial data from erc.configuration_element
    '''
    Configuration = apps.get_model('reporting', 'Configuration')
    Activity = apps.get_model('registration', 'Activity')
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    ConfigurationElement.objects.filter(
        activity=Activity.objects.get(name='Petroleum refining'),
        valid_from=Configuration.objects.get(valid_from='2023-01-01'),
        valid_to=Configuration.objects.get(valid_to='2099-12-31'),
    ).delete()


def init_reporting_field_data(apps, schema_monitor):
    '''
    Add initial data to erc.reporting_field
    '''

    ReportingField = apps.get_model('reporting', 'ReportingField')
    ReportingField.objects.bulk_create(
        [
            ReportingField(
                field_name='Average of quarterly chemical oxygen demand (kg/m3)',
                field_type='number',
                field_units=None,
            ),
            ReportingField(
                field_name='Average of quarterly five-day biochemical oxygen demand (kg/m3)',
                field_type='number',
                field_units=None,
            ),
            ReportingField(
                field_name='Average of quarterly nitrogen in effluent (kg/N m3)',
                field_type='number',
                field_units=None,
            ),
        ]
    )


def reverse_init_reporting_field_data(apps, schema_monitor):
    '''
    Remove initial data from erc.reporting_field
    '''
    ReportingField = apps.get_model('reporting', 'ReportingField')
    ReportingField.objects.filter(
        field_name__in=[
            'Average of quarterly chemical oxygen demand (kg/m3)',
            'Average of quarterly five-day biochemical oxygen demand (kg/m3)',
            'Average of quarterly nitrogen in effluent (kg/N m3)',
        ]
    ).delete()


def init_configuration_element_reporting_fields_data(apps, schema_monitor):
    '''
    Add initial data to erc.configuration_element_reporting_fields
    '''
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')
    ReportingField = apps.get_model('reporting', 'ReportingField')

    # Add Description to all Configurations with methodologies that require it
    for element in ConfigurationElement.objects.filter(
        activity=Activity.objects.get(name="Petroleum refining"),
        methodology__name__in=[
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ],
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ):
        element.reporting_fields.add(ReportingField.objects.get(field_name="Description", field_units__isnull=True))

    # Source type: Oil-water separators at refineries
    ## Gas: CH4
    ### Methdology: Measured conversion factor
    ConfigurationElement.objects.get(
        activity=Activity.objects.get(name="Petroleum refining"),
        source_type=SourceType.objects.get(name="Oil-water separators at refineries"),
        gas_type=GasType.objects.get(chemical_formula="CH4"),
        methodology=Methodology.objects.get(name="Measured conversion factor"),
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ).reporting_fields.add(
        ReportingField.objects.get(field_name="Measured conversion factor", field_units="kgCH4/kgNMHC")
    )

    # Source type: wastewater processing using anaerobic digestion at refineries
    ## Gas: CH4
    ### Methdology: Chemical Oxygen Demand
    ConfigurationElement.objects.get(
        activity=Activity.objects.get(name="Petroleum refining"),
        source_type=SourceType.objects.get(name="Wastewater processing using anaerobic digestion at refineries"),
        gas_type=GasType.objects.get(chemical_formula="CH4"),
        methodology=Methodology.objects.get(name="Chemical Oxygen Demand"),
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ).reporting_fields.add(
        ReportingField.objects.get(
            field_name="Average of quarterly chemical oxygen demand (kg/m3)", field_units__isnull=True
        )
    )
    ### Methdology: Biochemical Oxygen Demand
    ConfigurationElement.objects.get(
        activity=Activity.objects.get(name="Petroleum refining"),
        source_type=SourceType.objects.get(name="Wastewater processing using anaerobic digestion at refineries"),
        gas_type=GasType.objects.get(chemical_formula="CH4"),
        methodology=Methodology.objects.get(name="Biochemical Oxygen Demand"),
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ).reporting_fields.add(
        ReportingField.objects.get(
            field_name="Average of quarterly five-day biochemical oxygen demand (kg/m3)", field_units__isnull=True
        )
    )
    ## Gas: N2O
    ### Methdology: Nitrogen in Effluent
    ConfigurationElement.objects.get(
        activity=Activity.objects.get(name="Petroleum refining"),
        source_type=SourceType.objects.get(name="Wastewater processing using anaerobic digestion at refineries"),
        gas_type=GasType.objects.get(chemical_formula="N2O"),
        methodology=Methodology.objects.get(name="Nitrogen in effluent"),
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ).reporting_fields.add(
        ReportingField.objects.get(
            field_name="Average of quarterly nitrogen in effluent (kg/N m3)", field_units__isnull=True
        )
    )


def reverse_init_configuration_element_reporting_fields_data(apps, schema_monitor):
    '''
    Remove initial data from erc.configuration_element_reporting_fields
    '''
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')

    ConfigurationElement.reporting_fields.through.objects.filter(
        configurationelement_id__in=ConfigurationElement.objects.filter(
            activity_id=Activity.objects.get(name='Petroleum refining')
        ).values_list('id', flat=True)
    ).delete()


##### SCHEMA DATA #####


def init_activity_schema_data(apps, schema_monitor):
    """
    Add activity schema data to erc.activity_schema
    """
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f"{cwd}/reporting/json_schemas/2024/petroleum_refining/activity.json") as activity_file:
        schema = json.load(activity_file)

    # Retrieve models from the app registry to interact with the database
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name='Petroleum refining')
    valid_from = Configuration.objects.get(valid_from='2023-01-01')
    valid_to = Configuration.objects.get(valid_to='2099-12-31')

    # Create activity schema
    ActivitySchema.objects.create(
        activity=activity,
        json_schema=schema,
        valid_from=valid_from,
        valid_to=valid_to,
    )


def reverse_activity_schema_data(apps, schema_monitor):
    """
    Remove Activity schema data
    """
    # Retrieve models from the app registry to interact with the database
    Activity = apps.get_model("registration", "Activity")
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name='Petroleum refining')
    valid_from = Configuration.objects.get(valid_from='2023-01-01')
    valid_to = Configuration.objects.get(valid_to='2099-12-31')

    # Delete the schema
    ActivitySchema.objects.get(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


def init_activity_source_type_schema_data(apps, schema_monitor):
    """
    Add activity source type schema data to erc.activity_schema
    """
    # Import JSON data
    import os

    cwd = os.getcwd()

    # Retrieve models from the app registry to interact with the database
    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name="Petroleum refining")
    valid_from = Configuration.objects.get(valid_from="2023-01-01")
    valid_to = Configuration.objects.get(valid_to="2099-12-31")

    # Iterate through the source type schema configuration json
    for element in CONFIG_SOURCE_TYPE_SCHEMA:
        (file_name, st_name, has_unit, has_fuel) = element

        with open(f"{cwd}/reporting/json_schemas/2024/petroleum_refining/{file_name}.json") as schema_file:
            schema = json.load(schema_file)

        ActivitySourceTypeSchema.objects.create(
            activity=activity,
            source_type=SourceType.objects.get(name=st_name),
            has_unit=has_unit,
            has_fuel=has_fuel,
            json_schema=schema,
            valid_from=valid_from,
            valid_to=valid_to,
        )


def reverse_activity_source_type_schema_data(apps, schema_monitor):
    """
    Remove Activity SourceType schema data
    """

    # Retrieve models from the app registry to interact with the database
    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name="Petroleum refining")
    valid_from = Configuration.objects.get(valid_from="2023-01-01")
    valid_to = Configuration.objects.get(valid_to="2099-12-31")

    # Delete the schema
    ActivitySourceTypeSchema.objects.filter(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0066_zinc_production'),
    ]

    operations = [
        migrations.RunPython(
            init_additional_methodology_data,
            reverse_init_additional_methodology_data,
        ),
        migrations.RunPython(
            init_configuration_element_data,
            reverse_init_configuration_element_data,
        ),
        migrations.RunPython(
            init_reporting_field_data,
            reverse_init_reporting_field_data,
        ),
        migrations.RunPython(
            init_configuration_element_reporting_fields_data,
            reverse_init_configuration_element_reporting_fields_data,
        ),
        migrations.RunPython(
            init_activity_schema_data,
            reverse_activity_schema_data,
        ),
        migrations.RunPython(
            init_activity_source_type_schema_data,
            reverse_activity_source_type_schema_data,
        ),
    ]
