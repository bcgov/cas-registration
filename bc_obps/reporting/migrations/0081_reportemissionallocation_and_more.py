# Generated by Django 5.0.13 on 2025-04-02 17:40

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0100_address_protect_fields_empty_update_and_more'),
        ('reporting', '0080_not_applicable_methodology'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReportEmissionAllocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'allocation_methodology',
                    models.CharField(
                        choices=[
                            ('OBPS Allocation Calculator', 'Calculator'),
                            ('Other', 'Other'),
                            ('Not Applicable', 'Not Applicable'),
                        ],
                        db_comment='The methodology used to calculate the allocated emissions',
                        default='Not Applicable',
                        max_length=255,
                    ),
                ),
                (
                    'allocation_other_methodology_description',
                    models.TextField(
                        blank=True, db_comment="A description of the methodology used if 'Other' is selected", null=True
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."report_emission_allocation',
                'db_table_comment': 'A table to store the emission allocation information of a facility report',
                'abstract': False,
            },
        ),
        migrations.RemoveConstraint(
            model_name='reportproductemissionallocation',
            name='unique_report_product_emission_allocation',
        ),
        migrations.RemoveConstraint(
            model_name='reportproductemissionallocation',
            name='allocation_other_methodology_must_have_description',
        ),
        migrations.RemoveField(
            model_name='reportproductemissionallocation',
            name='allocation_methodology',
        ),
        migrations.RemoveField(
            model_name='reportproductemissionallocation',
            name='allocation_other_methodology_description',
        ),
        migrations.RemoveField(
            model_name='reportproductemissionallocation',
            name='facility_report',
        ),
        migrations.AlterField(
            model_name='reportproduct',
            name='production_methodology',
            field=models.CharField(
                choices=[
                    ('OBPS Calculator', 'Obps Calculator'),
                    ('other', 'Other'),
                    ('Not Applicable', 'Not Applicable'),
                ],
                db_comment='The production methodoogy used to make this product',
                default='OBPS Calculator',
                max_length=10000,
            ),
        ),
        migrations.AlterField(
            model_name='reportproductemissionallocation',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data is associated with',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportemissionallocation',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportemissionallocation',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportemissionallocation',
            name='facility_report',
            field=models.ForeignKey(
                db_comment='The facility report this data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.facilityreport',
            ),
        ),
        migrations.AddField(
            model_name='reportemissionallocation',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data is associated with',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportemissionallocation',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportproductemissionallocation',
            name='report_emission_allocation',
            field=models.ForeignKey(
                db_comment='The report emission allocation this emission data belongs to',
                default=0,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportemissionallocation',
            ),
            preserve_default=False,
        ),
        migrations.AddConstraint(
            model_name='reportproductemissionallocation',
            constraint=models.UniqueConstraint(
                fields=('report_emission_allocation', 'report_version', 'report_product', 'emission_category'),
                name='unique_report_product_emission_allocation',
                violation_error_message='A FacilityReport can only have one ReportProductEmissionAllocation per Report Product and Emission Category',
            ),
        ),
        migrations.AddConstraint(
            model_name='reportemissionallocation',
            constraint=models.UniqueConstraint(
                fields=('report_version', 'facility_report'),
                name='unique_report_emission_allocation',
                violation_error_message='A FacilityReport can only have one ReportEmissionAllocation per Report',
            ),
        ),
        migrations.AddConstraint(
            model_name='reportemissionallocation',
            constraint=models.CheckConstraint(
                check=models.Q(
                    ('allocation_methodology', 'Other'),
                    ('allocation_other_methodology_description__isnull', True),
                    _negated=True,
                ),
                name='allocation_other_methodology_must_have_description',
                violation_error_message="A value for allocation_other_methodology_description must be provided if allocation_methodology is 'Other'",
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select current_setting('my.guid', true)); new.created_at = now(); return new;",
                    hash='c2809b84e0cd8090ffffd680d613687413e06297',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_d303d',
                    table='erc"."report_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='5b67aa6271971da2f6f33c268dccbe5d30e7d592',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_a336e',
                    table='erc"."report_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='eae1c1a04b254dbb5af716f70fc80ffac71b046c',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_0067e',
                    table='erc"."report_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
    ]
