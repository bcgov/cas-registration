# Generated by Django 5.0.8 on 2025-01-27 22:14

from django.db import migrations
import json


def init_additional_methodology_data(apps, schema_monitor):
    """
    Add additional data to erc.methodology
    """
    Methodology = apps.get_model("reporting", "Methodology")
    Methodology.objects.bulk_create(
        [
            Methodology(name="WCI.363 (c)"),
            Methodology(name="WCI.363 (l)"),
            Methodology(name="WCI.363 (m)"),
        ]
    )


def reverse_additional_methodology_data(apps, schema_monitor):
    """
    Remove additional data from erc.methodology
    """
    Methodology = apps.get_model("reporting", "Methodology")
    Methodology.objects.filter(
        name__in=[
            "WCI.363 (c)",
            "WCI.363 (l)",
            "WCI.363 (m)",
        ]
    ).delete()


def init_configuration_element_data(apps, schema_monitor):
    '''
    Add initial data to erc.configuration_element
    '''

    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')

    # Natural gas pneumatic high bleed device venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Natural gas pneumatic high bleed device venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (a)(1)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Natural gas pneumatic pump venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Natural gas pneumatic pump venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (a.1)(1)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Natural gas pneumatic low bleed device venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Natural gas pneumatic low bleed device venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (b)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Natural gas pneumatic intermittent bleed device venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Natural gas pneumatic intermittent bleed device venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (b.1)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Acid gas removal venting or incineration
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Acid gas removal venting or incineration').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (c)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2']
    )

    # Dehydrator venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Dehydrator venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (d)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Blowdown venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Blowdown venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (g)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Releases from tanks used for storage, production or processing
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(
                name='Releases from tanks used for storage, production or processing'
            ).id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in [
            'WCI.363 (h)(1)',
            'WCI.363 (h)(2)',
            'WCI.363 (h)(3)',
            'WCI.363 (h)(4)',
            'Alternative Parameter Measurement',
            'Replacement Methodology',
        ]
        for gas_formula in ['CO2', 'CH4']
    )

    # Associated gas venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Associated gas venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (j)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Associated gas flaring
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Associated gas flaring').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (j)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4', 'N2O']
    )

    # Flaring stacks
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Flaring stacks').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (k)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4', 'N2O']
    )

    # Centrifugal compressor venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Centrifugal compressor venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (l)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Reciprocating compressor venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Reciprocating compressor venting').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (m)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Equipment leaks detected using leak detection and leaker emission factor methods
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(
                name='Equipment leaks detected using leak detection and leaker emission factor methods'
            ).id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (n)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Population count sources
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Population count sources').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in [
            'WCI.363 (o)',
            '2009 API Compendium',
            'Alternative Parameter Measurement',
            'Replacement Methodology',
        ]
        for gas_formula in ['CO2', 'CH4']
    )

    # Transmission storage tanks
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Transmission storage tanks').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (h.1)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Enhanced oil recovery injection pump blowdowns
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Enhanced oil recovery injection pump blowdowns').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['WCI.363 (t)', 'Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2']
    )

    # Produced water dissolved carbon dioxide and methane
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Produced water dissolved carbon dioxide and methane').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2', 'CH4']
    )

    # Enhanced oil recovery produced hydrocarbon liquids dissolved carbon dioxide
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(
                name='Enhanced oil recovery produced hydrocarbon liquids dissolved carbon dioxide'
            ).id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in ['Alternative Parameter Measurement', 'Replacement Methodology']
        for gas_formula in ['CO2']
    )

    # Other venting sources
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Other venting sources').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in [
            '2009 API Compendium',
            'Other Methodology',
            'Alternative Parameter Measurement',
            'Replacement Methodology',
        ]
        for gas_formula in ['CO2', 'CH4']
    )

    # Other fugitive sources
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Other fugitive sources').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in [
            '2009 API Compendium',
            'Other Methodology',
            'Alternative Parameter Measurement',
            'Replacement Methodology',
        ]
        for gas_formula in ['CO2', 'CH4']
    )

    # Third party line hits with release of gas
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id,
            source_type_id=SourceType.objects.get(name='Third party line hits with release of gas').id,
            gas_type_id=GasType.objects.get(chemical_formula=gas_formula).id,
            methodology_id=Methodology.objects.get(name=methodology_name).id,
            valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
            valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
        )
        for methodology_name in [
            'WCI.363 (g.1)(i)',
            'WCI.363 (g.1)(ii)',
            'Alternative Parameter Measurement',
            'Replacement Methodology',
        ]
        for gas_formula in ['CO2', 'CH4']
    )


def reverse_init_configuration_element_data(apps, schema_monitor):
    '''
    Remove initial data from erc.configuration_element
    '''
    Configuration = apps.get_model('reporting', 'Configuration')
    Activity = apps.get_model('registration', 'Activity')
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    ConfigurationElement.objects.filter(
        reporting_activity_id=Activity.objects.get(
            name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
        ).id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).delete()


def init_configuration_element_reporting_fields_data(apps, schema_monitor):
    '''
    Add initial data to erc.activity_source_type_base_schema
    '''
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')
    Methodology = apps.get_model('reporting', 'Methodology')
    ReportingField = apps.get_model('reporting', 'ReportingField')

    # Add "Description" fields to all ConfigurationElement records for this activity for methdologies: Replacement Methodology & Alternative Parameter Measurement
    activity_id = Activity.objects.get(
        name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
    ).id
    methodology_ids = Methodology.objects.filter(
        name__in=['Replacement Methodology', 'Alternative Parameter Measurement']
    ).values_list("id", flat=True)
    activity_configs = ConfigurationElement.objects.filter(activity_id=activity_id, methodology_id__in=methodology_ids)
    for config in activity_configs:
        config.reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))


def reverse_init_configuration_element_reporting_fields_data(apps, schema_monitor):
    '''
    Remove data from erc.configuration_element_reporting_fields
    '''
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')

    ConfigurationElement.reporting_fields.through.objects.filter(
        configurationelement_id__in=ConfigurationElement.objects.filter(
            activity_id=Activity.objects.get(
                name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
            ).id
        ).values_list('id', flat=True)
    ).delete()


#### SCHEMA DATA ####
def init_activity_schema_data(apps, schema_monitor):
    '''
    Add initial schema data to erc.activity_schema
    '''
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/activity.json') as gsc_st1:
        schema = json.load(gsc_st1)

    ActivitySchema = apps.get_model('reporting', 'ActivityJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    Configuration = apps.get_model('reporting', 'Configuration')
    ActivitySchema.objects.create(
        activity_id=Activity.objects.get(
            name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
        ).id,
        json_schema=schema,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    )


def reverse_init_activity_schema_data(apps, schema_monitor):
    '''
    Remove initial data from erc.base_schema
    '''
    ActivitySchema = apps.get_model('reporting', 'ActivityJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    ActivitySchema.objects.filter(
        activity_id=Activity.objects.get(
            name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
        ).id
    ).delete()


# SOURCE TYPE
def init_activity_source_type_schema_data(apps, schema_monitor):
    '''
    Add initial schema data to erc.activity_source_type_schema
    '''
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/ng_high_bleed_venting.json') as og_st1:
        schema1 = json.load(og_st1)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/ng_intermittent_venting.json'
    ) as og_st2:
        schema2 = json.load(og_st2)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/ng_low_bleed_venting.json') as og_st3:
        schema3 = json.load(og_st3)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/ng_pump_venting.json') as og_st4:
        schema4 = json.load(og_st4)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/acid_gas_removal_venting_or_incineration.json'
    ) as og_st5:
        schema5 = json.load(og_st5)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/dehydrator_venting.json') as og_st6:
        schema6 = json.load(og_st6)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/blowdown_venting.json') as og_st7:
        schema7 = json.load(og_st7)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/releases_from_tanks_used_for_storage.json'
    ) as og_st8:
        schema8 = json.load(og_st8)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/associated_gas_flaring.json') as og_st9:
        schema9 = json.load(og_st9)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/associated_gas_venting.json'
    ) as og_st10:
        schema10 = json.load(og_st10)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/flaring_stacks.json') as og_st11:
        schema11 = json.load(og_st11)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/centrifugal_compressor_venting.json'
    ) as og_st12:
        schema12 = json.load(og_st12)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/reciprocating_compressor_venting.json'
    ) as og_st13:
        schema13 = json.load(og_st13)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/equipment_leaks_detected_using_leak_detection.json'
    ) as og_st14:
        schema14 = json.load(og_st14)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/population_count_sources.json'
    ) as og_st15:
        schema15 = json.load(og_st15)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/transmission_storage_tanks.json'
    ) as og_st16:
        schema16 = json.load(og_st16)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/enhanced_oil_recovery_injection_pump_blowdowns.json'
    ) as og_st17:
        schema17 = json.load(og_st17)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/produced_water_dissolved_carbon_dioxide_methane.json'
    ) as og_st18:
        schema18 = json.load(og_st18)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/enhanced_oil_recovery_produced_hydrocarbon_liquids.json'
    ) as og_st19:
        schema19 = json.load(og_st19)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/other_venting_sources.json') as og_st20:
        schema20 = json.load(og_st20)
    with open(
        f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/other_fugitive_sources.json'
    ) as og_st21:
        schema21 = json.load(og_st21)
    with open(f'{cwd}/reporting/json_schemas/2024/og_extraction_other_than_ncnp/third_party_line_hits.json') as og_st22:
        schema22 = json.load(og_st22)

    ActivitySourceTypeSchema = apps.get_model('reporting', 'ActivitySourceTypeJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    Configuration = apps.get_model('reporting', 'Configuration')
    ActivitySourceTypeSchema.objects.bulk_create(
        [
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Natural gas pneumatic high bleed device venting').id,
                json_schema=schema1,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(
                    name='Natural gas pneumatic intermittent bleed device venting'
                ).id,
                json_schema=schema2,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Natural gas pneumatic low bleed device venting').id,
                json_schema=schema3,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Natural gas pneumatic pump venting').id,
                json_schema=schema4,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Acid gas removal venting or incineration').id,
                json_schema=schema5,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Dehydrator venting').id,
                json_schema=schema6,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Blowdown venting').id,
                json_schema=schema7,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(
                    name='Releases from tanks used for storage, production or processing'
                ).id,
                json_schema=schema8,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Associated gas flaring').id,
                json_schema=schema9,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Associated gas venting').id,
                json_schema=schema10,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Flaring stacks').id,
                json_schema=schema11,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Centrifugal compressor venting').id,
                json_schema=schema12,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Reciprocating compressor venting').id,
                json_schema=schema13,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(
                    name='Equipment leaks detected using leak detection and leaker emission factor methods'
                ).id,
                json_schema=schema14,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Population count sources').id,
                json_schema=schema15,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Transmission storage tanks').id,
                json_schema=schema16,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Enhanced oil recovery injection pump blowdowns').id,
                json_schema=schema17,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Produced water dissolved carbon dioxide and methane').id,
                json_schema=schema18,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(
                    name='Enhanced oil recovery produced hydrocarbon liquids dissolved carbon dioxide'
                ).id,
                json_schema=schema19,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Other venting sources').id,
                json_schema=schema20,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Other fugitive sources').id,
                json_schema=schema21,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(
                    name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
                ).id,
                source_type_id=SourceType.objects.get(name='Third party line hits with release of gas').id,
                json_schema=schema22,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
        ]
    )


def reverse_init_activity_source_type_schema_data(apps, schema_monitor):
    '''
    Remove initial data from erc.base_schema
    '''
    ActivitySourceTypeJsonSchema = apps.get_model('reporting', 'ActivitySourceTypeJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    ActivitySourceTypeJsonSchema.objects.filter(
        activity_id=Activity.objects.get(
            name='Oil and gas extraction and gas processing activities, other than non- compression and non-processing activities'
        ).id
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0056_og_extraction_non_compression_non_processing'),
    ]

    operations = [
        migrations.RunPython(
            init_additional_methodology_data,
            reverse_additional_methodology_data,
        ),
        migrations.RunPython(init_configuration_element_data, reverse_init_configuration_element_data),
        migrations.RunPython(
            init_configuration_element_reporting_fields_data,
            reverse_init_configuration_element_reporting_fields_data,
        ),
        migrations.RunPython(init_activity_schema_data, reverse_init_activity_schema_data),
        migrations.RunPython(init_activity_source_type_schema_data, reverse_init_activity_source_type_schema_data),
    ]
