# Generated by Django 5.1.10 on 2025-06-17 16:49


from decimal import Decimal
from django.db import migrations


def handle_emissions(apps, emissions_list):
    GasType = apps.get_model("reporting", "GasType")

    for e in emissions_list:
        gas_type_name = e.get("gasType")
        if gas_type_name is None:
            continue

        gas_type = GasType.objects.filter(chemical_formula=gas_type_name).first()

        emission_value = e.get("emission")
        if emission_value is not None and gas_type is not None:
            e["equivalentEmission"] = float(round(Decimal(emission_value) * gas_type.gwp, 4))
        else:
            e["equivalentEmission"] = None


def find_emissions(apps, data, emissions_key):
    if isinstance(data, dict):
        if emissions_key in data and isinstance(data[emissions_key], list):
            handle_emissions(apps, data[emissions_key])
        for field_name, field_value in data.items():
            data[field_name] = find_emissions(apps, field_value, emissions_key)
    elif isinstance(data, list):
        return [find_emissions(apps, element, emissions_key) for element in data]
    return data


def migrate_json_data(apps, schema_editor):
    ReportRawActivityData = apps.get_model("reporting", "ReportRawActivityData")
    for record in ReportRawActivityData.objects.all():
        raw_data = record.json_data
        updated_data = find_emissions(apps, raw_data, "emissions")
        record.json_data = updated_data
        record.save(update_fields=["json_data"])


class Migration(migrations.Migration):
    dependencies = [
        ("reporting", "0118_update_equivalent_emission_type"),
    ]

    operations = [
        migrations.RunPython(migrate_json_data),
    ]
