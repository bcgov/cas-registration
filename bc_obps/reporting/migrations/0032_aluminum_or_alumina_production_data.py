# Generated by Django 5.0.6 on 2024-07-10 20:27

from django.db import migrations
import json

#### CONFIG DATA ####


def init_configuration_element_data(apps, schema_monitor):
    '''
    Add initial data to erc.configuration_element
    '''

    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')
    # Aluminum or alumina production
    ConfigurationElement.objects.bulk_create(
        [
            # Source type is Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination and gas type is CO2
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(
                    name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
                ).id,
                gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
                methodology_id=Methodology.objects.get(name='Anode Consumption - Prebaked').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(
                    name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
                ).id,
                gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
                methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(
                    name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
                ).id,
                gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
                methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(
                    name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
                ).id,
                gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
                methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(
                    name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
                ).id,
                gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
                methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(
                    name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
                ).id,
                gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
                methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            # Source type is Anode effects and gas type is CF4
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
                methodology_id=Methodology.objects.get(name='Slope method').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
                methodology_id=Methodology.objects.get(name='Overvoltage method').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
                methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
                methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            # Source type is also Anode effects and Gas type is C2F6
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                gas_type_id=GasType.objects.get(chemical_formula='C2F6').id,
                methodology_id=Methodology.objects.get(name='C2F6 anode effects').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                gas_type_id=GasType.objects.get(chemical_formula='C2F6').id,
                methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                gas_type_id=GasType.objects.get(chemical_formula='C2F6').id,
                methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            # Source type is Cover gas from electrolysis cells and gastype is SF6
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Cover gas from electrolysis cells').id,
                gas_type_id=GasType.objects.get(chemical_formula='SF6').id,
                methodology_id=Methodology.objects.get(name='Inventory').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Cover gas from electrolysis cells').id,
                gas_type_id=GasType.objects.get(chemical_formula='SF6').id,
                methodology_id=Methodology.objects.get(name='Input/output').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Cover gas from electrolysis cells').id,
                gas_type_id=GasType.objects.get(chemical_formula='SF6').id,
                methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
            ConfigurationElement(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Cover gas from electrolysis cells').id,
                gas_type_id=GasType.objects.get(chemical_formula='SF6').id,
                methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
            ),
        ]
    )


def reverse_init_configuration_element_data(apps, schema_monitor):
    '''
    Remove initial data from erc.configuration_element
    '''
    Configuration = apps.get_model('reporting', 'Configuration')
    ReportingActivity = apps.get_model('reporting', 'ReportingActivity')
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    ConfigurationElement.objects.filter(
        reporting_activity_id=ReportingActivity.objects.get(name='Aluminum or alumina production').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).delete()


def init_configuration_element_reporting_fields_data(apps, schema_monitor):
    '''
    Add initial data to erc.activity_source_type_base_schema
    '''
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')
    ReportingField = apps.get_model('reporting', 'ReportingField')

    # SOURCE TYPE: Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination
    # CO2 - Anode Consumption - Prebaked
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Prebaked').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Sulphur Content in Baked Anodes', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Prebaked').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Ash Content in Baked Anodes', field_units__isnull=True)
    )
    # CO2 - Anode Consumption - Soderberg
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Emissions of benzene-soluble matter', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Average binder (pitch) content in paste', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Sulphur content in pitch', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Ash content in pitch', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Hydrogen content in pitch', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Sulphur content in calcinated coke', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Ash content in calcinated coke', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode Consumption - Soderberg').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Carbon in skimmed dust from Søderberg cells', field_units__isnull=True)
    )
    # CO2 - Anode/Cathode Baking
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(
            field_name='Packing coke consumption per tonne of baked anode', field_units__isnull=True
        )
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Baked anode production', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Ash content in packing coke', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Sulphur content in packing coke', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Green anode consumption', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Hydrogen content in pitch', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Pitch content in green anode', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Anode/Cathode Baking').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Recovered tar', field_units__isnull=True))
    # CO2 - Green Coke Calcination
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Green coke feed', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Humidity in green coke feed', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Volatiles in green coke feed', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Sulphur content in green coke feed', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Sulphur content in calcinated coke', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Calcinated coke produced', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Under-calcinated coke produced', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Green Coke Calcination').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Coke dust emissions', field_units__isnull=True))
    # CO2 - Alternative Parameter Measurement
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))
    # CO2 - Replacement Methodology
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(
            name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
        ).id,
        gas_type_id=GasType.objects.get(chemical_formula='CO2').id,
        methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))
    # SOURCE TYPE: Anode effects
    # CF4 - Slope method
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Slope method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Anode Effect minutes per cell-day', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Slope method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Anode Effect Frequency', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Slope method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Anode Effect Duration', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Slope method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Frequency and Duration Methodology', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Slope method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Slope Coefficient', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Slope method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Last Date of Slope Coefficients Measurement', field_units__isnull=True)
    )
    # CF4 - Overvoltage method
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Overvoltage method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Anode Effect Overvoltage Factor', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Overvoltage method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Potline Overvoltage', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Overvoltage method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Current Efficiency', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Overvoltage method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Overvoltage Methodology', field_units__isnull=True))
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Overvoltage method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(field_name='Overvoltage Emission Factor', field_units__isnull=True)
    )
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Overvoltage method').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(
        ReportingField.objects.get(
            field_name='Last Date of Overvoltage Emission Factor Measurement', field_units__isnull=True
        )
    )
    # CF4 - Alternative Parameter Measurement
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))
    # CF4 - Replacement Methodology
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='CF4').id,
        methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))
    # C2F6 - Alternative Parameter Measurement
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='C2F6').id,
        methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))
    # # C2F6 - Replacement Methodology
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Anode effects').id,
        gas_type_id=GasType.objects.get(chemical_formula='C2F6').id,
        methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))
    # SOURCE TYPE: Cover gas from electrolysis cells
    # SF6 - Alternative Parameter Measurement
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Cover gas from electrolysis cells').id,
        gas_type_id=GasType.objects.get(chemical_formula='SF6').id,
        methodology_id=Methodology.objects.get(name='Alternative Parameter Measurement').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))
    # SF6 - Replacement Methodology
    ConfigurationElement.objects.get(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        source_type_id=SourceType.objects.get(name='Cover gas from electrolysis cells').id,
        gas_type_id=GasType.objects.get(chemical_formula='SF6').id,
        methodology_id=Methodology.objects.get(name='Replacement Methodology').id,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    ).reporting_fields.add(ReportingField.objects.get(field_name='Description', field_units__isnull=True))


def reverse_init_configuration_element_reporting_fields_data(apps, schema_monitor):
    '''
    Remove data from erc.configuration_element_reporting_fields
    '''
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')

    ConfigurationElement.reporting_fields.through.objects.filter(
        configurationelement_id__in=ConfigurationElement.objects.filter(
            activity_id=Activity.objects.get(name='Aluminum or alumina production').id
        ).values_list('id', flat=True)
    ).delete()


#### SCHEMA DATA ####
def init_activity_schema_data(apps, schema_monitor):
    '''
    Add initial schema data to erc.activity_schema
    '''
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f'{cwd}/reporting/json_schemas/2024/aluminum_production/activity.json') as alum:
        schema = json.load(alum)

    ActivitySchema = apps.get_model('reporting', 'ActivityJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    Configuration = apps.get_model('reporting', 'Configuration')
    ActivitySchema.objects.create(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
        json_schema=schema,
        valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
        valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
    )


def reverse_init_activity_schema_data(apps, schema_monitor):
    '''
    Remove initial data from erc.base_schema
    '''
    ActivitySchema = apps.get_model('reporting', 'ActivityJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    ActivitySchema.objects.filter(activity_id=Activity.objects.get(name='Aluminum or alumina production').id).delete()


# SOURCE TYPE
def init_activity_source_type_schema_data(apps, schema_monitor):
    '''
    Add initial schema data to erc.activity_source_type_schema
    '''
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f'{cwd}/reporting/json_schemas/2024/aluminum_production/anode_consumption_acbgcc.json') as alum_st1:
        schema1 = json.load(alum_st1)
    with open(f'{cwd}/reporting/json_schemas/2024/aluminum_production/anode_effects.json') as alum_st2:
        schema2 = json.load(alum_st2)
    with open(f'{cwd}/reporting/json_schemas/2024/aluminum_production/cover_gas_from_electrolysis.json') as alum_st3:
        schema3 = json.load(alum_st3)

    ActivitySourceTypeSchema = apps.get_model('reporting', 'ActivitySourceTypeJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    Configuration = apps.get_model('reporting', 'Configuration')
    ActivitySourceTypeSchema.objects.bulk_create(
        [
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(
                    name='Anode consumption in electrolysis cells, anode and cathode baking or green coke calcination'
                ).id,
                json_schema=schema1,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Anode effects').id,
                json_schema=schema2,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
            ActivitySourceTypeSchema(
                activity_id=Activity.objects.get(name='Aluminum or alumina production').id,
                source_type_id=SourceType.objects.get(name='Cover gas from electrolysis cells').id,
                json_schema=schema3,
                valid_from_id=Configuration.objects.get(valid_from='2023-01-01').id,
                valid_to_id=Configuration.objects.get(valid_to='2099-12-31').id,
                has_unit=False,
                has_fuel=False,
            ),
        ]
    )


def reverse_init_activity_source_type_schema_data(apps, schema_monitor):
    '''
    Remove initial data from erc.base_schema
    '''
    ActivitySourceTypeJsonSchema = apps.get_model('reporting', 'ActivitySourceTypeJsonSchema')
    Activity = apps.get_model('registration', 'Activity')
    ActivitySourceTypeJsonSchema.objects.filter(
        activity_id=Activity.objects.get(name='Aluminum or alumina production').id
    ).delete()


class Migration(migrations.Migration):

    dependencies = [('reporting', '0031_alter_reportemission_managers')]

    operations = [
        migrations.RunPython(init_configuration_element_data, reverse_init_configuration_element_data),
        migrations.RunPython(
            init_configuration_element_reporting_fields_data, reverse_init_configuration_element_reporting_fields_data
        ),
        migrations.RunPython(init_activity_schema_data, reverse_init_activity_schema_data),
        migrations.RunPython(init_activity_source_type_schema_data, reverse_init_activity_source_type_schema_data),
    ]
