# Generated by Django 5.0.8 on 2024-10-16 21:05

from django.db import migrations, models


def init_emission_category_data(apps, schema_monitor):
    '''
    Add initial data to erc.emission_category
    '''

    EmissionCategory = apps.get_model('reporting', 'EmissionCategory')
    EmissionCategory.objects.bulk_create(
        [
            EmissionCategory(category_name='Flaring emissions', category_type='basic'),
            EmissionCategory(category_name='Fugitive emissions', category_type='basic'),
            EmissionCategory(category_name='Industrial process emissions', category_type='basic'),
            EmissionCategory(category_name='On-site transportation emissions', category_type='basic'),
            EmissionCategory(category_name='Stationary fuel combustion emissions', category_type='basic'),
            EmissionCategory(category_name='Venting emissions — useful', category_type='basic'),
            EmissionCategory(category_name='Venting emissions — non-useful', category_type='basic'),
            EmissionCategory(category_name='Emissions from waste', category_type='basic'),
            EmissionCategory(category_name='Emissions from wastewater', category_type='basic'),
            # FUEL_EXCLUDED
            EmissionCategory(category_name='CO2 emissions from excluded woody biomass', category_type='fuel_excluded'),
            EmissionCategory(category_name='Other emissions from excluded biomass', category_type='fuel_excluded'),
            EmissionCategory(category_name='Emissions from excluded non-biomass', category_type='fuel_excluded'),
            # OTHER_EXCLUDED
            EmissionCategory(
                category_name='Emissions from line tracing and non-processing and non-compression activities',
                category_type='other_excluded',
            ),
            EmissionCategory(
                category_name='Emissions from fat, oil and grease collection, refining and storage',
                category_type='other_excluded',
            ),
        ]
    )


def reverse_init_emission_category_data(apps, schema_monitor):
    '''
    Remove initial data from erc.emission_category
    '''
    EmissionCategory = apps.get_model('reporting', 'EmissionCategory')
    EmissionCategory.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0019_alter_reportactivity_json_data_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmissionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'category_name',
                    models.CharField(
                        db_comment='The name of the emission category as defined in the Greenhouse Gas Emission Reporting Regulation)',
                        max_length=1000,
                    ),
                ),
                (
                    'category_type',
                    models.CharField(
                        choices=[
                            ('basic', 'Basic'),
                            ('fuel_excluded', 'Fuel Excluded'),
                            ('other_excluded', 'Other Excluded'),
                        ],
                        db_comment='Type of category defines how it is applied. Basic categories are mandatory and do not overlap with each other. fuel_excluded is dependent on which fuel was consumed & may overlap with basic categories. Other exlcluded have special rules as to when an emission should have this category applied.',
                        max_length=1000,
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."emission_category',
                'db_table_comment': 'This table contains the set of emission categories that greenhouse gas emissions can be counted under.',
            },
        ),
        migrations.AddField(
            model_name='reportemission',
            name='emission_categories',
            field=models.ManyToManyField(related_name='+', to='reporting.emissioncategory'),
        ),
        migrations.RunPython(init_emission_category_data, reverse_init_emission_category_data),
    ]
