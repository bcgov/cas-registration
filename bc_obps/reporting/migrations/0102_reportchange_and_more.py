# Generated by Django 5.0.14 on 2025-05-13 09:53

import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0112_prod_fix_contacts_post_transfer'),
        ('reporting', '0101_alter_reportverification_accredited_by_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReportChange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'reason_for_change',
                    models.TextField(db_comment='Reason explaining why this supplementary report change was made'),
                ),
                (
                    'archived_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_archived',
                        to='registration.user',
                    ),
                ),
                (
                    'created_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_created',
                        to='registration.user',
                    ),
                ),
                (
                    'report_version',
                    models.ForeignKey(
                        db_comment='The supplementary report this change information relates to',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='report_change',
                        to='reporting.reportversion',
                    ),
                ),
                (
                    'updated_by',
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name='%(class)s_updated',
                        to='registration.user',
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."report_change',
                'db_table_comment': 'Table containing report change information for the supplementary report version',
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='reportchange',
            constraint=models.UniqueConstraint(
                fields=('report_version',), name='unique_supplementary_report_change_per_report_version'
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportchange',
            trigger=pgtrigger.compiler.Trigger(
                name='set_created_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.created_by_id = (select nullif(current_setting('my.guid', true), '')); new.created_at = now(); return new;",
                    hash='74d6e51c7efbbb3c393c6a1d9c9343c68498693b',
                    operation='INSERT',
                    pgid='pgtrigger_set_created_audit_columns_b2705',
                    table='erc"."report_change',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportchange',
            trigger=pgtrigger.compiler.Trigger(
                name='set_updated_audit_columns',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func="new.updated_by_id = (select current_setting('my.guid', true)); new.updated_at = now(); return new;",
                    hash='36cfe3f2dcfb7e43b989d9e3d51487bfc35b86d6',
                    operation='UPDATE',
                    pgid='pgtrigger_set_updated_audit_columns_459d5',
                    table='erc"."report_change',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportchange',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n                select rel1.status into status\n                from "erc"."report_version" rel1\n                join "erc"."report_change" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportchange record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='31b5b1dc32d02b62e7ed6e95a9ecc4d79696bae2',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_8a55f',
                    table='erc"."report_change',
                    when='BEFORE',
                ),
            ),
        ),
    ]
