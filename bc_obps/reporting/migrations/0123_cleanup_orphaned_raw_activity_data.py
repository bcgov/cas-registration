# Generated by Django 5.1.10 on 2025-07-31 10:40

from django.db import migrations
from common.lib import pgtrigger


def cleanup_orphaned_raw_activity_data(apps, schema_editor):
    """
    Remove ReportRawActivityData records where the activity is not associated with the facility report.
    """
    ReportRawActivityData = apps.get_model('reporting', 'ReportRawActivityData')
    FacilityReport = apps.get_model('reporting', 'FacilityReport')

    # Get all raw activity data records
    raw_data_records = ReportRawActivityData.objects.all()

    records_to_delete = []

    for raw_data in raw_data_records:
        facility_report_id = raw_data.facility_report_id
        activity_id = raw_data.activity_id

        # Check if this facility report has this activity associated
        facility_report = FacilityReport.objects.get(id=facility_report_id)
        if not facility_report.activities.filter(id=activity_id).exists():
            records_to_delete.append(raw_data.id)

    # Delete orphaned records
    if records_to_delete:
        with pgtrigger.ignore("reporting.ReportRawActivityData:immutable_report_version"):
            ReportRawActivityData.objects.filter(id__in=records_to_delete).delete()
            print(f"Deleted {len(records_to_delete)} orphaned ReportRawActivityData records")
    else:
        print("No orphaned ReportRawActivityData records found")


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0122_V3_13_0'),
    ]

    operations = [
        migrations.RunPython(
            code=cleanup_orphaned_raw_activity_data,
            reverse_code=migrations.RunPython.noop,
            elidable=True,
        ),
    ]
