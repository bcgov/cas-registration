# Generated by Django 5.0.11 on 2025-02-03 18:48

import json
from django.db import migrations


#### ADDITIONAL METHODOLOGIES ####


def init_additional_methodology_data(apps, schema_monitor):
    """
    Add additional data to erc.methodology
    """
    Methodology = apps.get_model("reporting", "Methodology")
    Methodology.objects.bulk_create(
        [
            Methodology(name="WCI.353 (e)"),
            Methodology(name="WCI.353 (f)"),
        ]
    )


def reverse_additional_methodology_data(apps, schema_monitor):
    """
    Remove additional data from erc.methodology
    """
    Methodology = apps.get_model("reporting", "Methodology")
    Methodology.objects.filter(
        name__in=[
            "WCI.353 (e)",
            "WCI.353 (f)",
        ]
    ).delete()


#### CONFIG DATA ####


def init_configuration_element_data(apps, schema_monitor):
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    GasType = apps.get_model("reporting", "GasType")
    Methodology = apps.get_model("reporting", "Methodology")
    Configuration = apps.get_model("reporting", "Configuration")

    ng_other_than_non_compression_activity = Activity.objects.get(
        name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
    )

    # Source Type: NG Pneumatic high bleed device venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Natural gas pneumatic high bleed device venting"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (a)(1)",
            "WCI.353 (a)(2)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Natural gas pneumatic pump venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Natural gas pneumatic pump venting"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (a.1)(1)",
            "WCI.353 (a.1)(2)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Natural gas pneumatic low bleed device venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Natural gas pneumatic low bleed device venting"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (b)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Natural gas pneumatic intermittent device venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Natural gas pneumatic intermittent bleed device venting"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (b.1)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Blowdown venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Blowdown venting"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (c)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Flare stacks
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Flare stacks"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (d)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
            "N2O",
        ]
    )

    # Source type: Centrifugal compressor venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Centrifugal compressor venting"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (e)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Reciprocating compressor venting
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Reciprocating compressor venting"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (f)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Equipment leaks detected using leak detection and leaker emission factor methods
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(
                name="Equipment leaks detected using leak detection and leaker emission factor methods"
            ),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (g)",
            "CEPEI Methodology Manual",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Population count sources
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Population count sources"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (h)",
            "CEPEI Methodology Manual",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Transmission storage tanks
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Transmission storage tanks"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (m)",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Other venting sources
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Other venting sources"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "CEPEI Methodology Manual",
            "Other CGA Methodology",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Other fugigitve sources
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Other fugitive sources"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "CEPEI Methodology Manual",
            "Other CGA Methodology",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )

    # Source type: Third party line hits with release of gas
    ConfigurationElement.objects.bulk_create(
        ConfigurationElement(
            activity=ng_other_than_non_compression_activity,
            source_type=SourceType.objects.get(name="Third party line hits with release of gas"),
            gas_type=GasType.objects.get(chemical_formula=gas_formula),
            methodology=Methodology.objects.get(name=methodology_name),
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )
        for methodology_name in [
            "WCI.353 (c.1)(i)",
            "WCI.353 (c.1)(ii)",
            "CEPEI Methodology Manual",
            "Alternative Parameter Measurement",
            "Replacement Methodology",
        ]
        for gas_formula in [
            "CO2",
            "CH4",
        ]
    )


def reverse_configuration_element_data(apps, schema_monitor):
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    ng_other_than_non_compression_activity = Activity.objects.get(
        name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
    )

    ConfigurationElement.objects.filter(
        activity=ng_other_than_non_compression_activity,
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ).delete()


#### CONFIGURATION ELEMENTS REPORTING FIELDS DATA ####


def init_configuration_element_reporting_fields_data(apps, schema_monitor):
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Configuration = apps.get_model("reporting", "Configuration")
    Activity = apps.get_model("registration", "Activity")
    ReportingField = apps.get_model("reporting", "ReportingField")

    # All configuration elements for methodologies "Alternative Parameter Measurement" and "Replacement Methodology"
    # have a description field.

    # If performance issues arise, this could be optimized by batch-inserts in the through model of the m2m relationship

    for element in ConfigurationElement.objects.filter(
        activity=Activity.objects.get(
            name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
        ),
        methodology__name__in=[
            "Alternative Parameter Measurement",
            "Replacement Methodology",
            "Other CGA Methodology",
        ],
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ):
        element.reporting_fields.add(ReportingField.objects.get(field_name="Description", field_units__isnull=True))


def reverse_configuration_element_reporting_fields_data(apps, schema_monitor):
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Configuration = apps.get_model("reporting", "Configuration")
    Activity = apps.get_model("registration", "Activity")

    for element in ConfigurationElement.objects.filter(
        activity=Activity.objects.get(
            name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
        ),
        methodology__name__in=[
            "Alternative Parameter Measurement",
            "Replacement Methodology",
            "Other CGA Methodology",
        ],
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ):
        element.reporting_fields.clear()


#### ACTIVITY SCHEMA ####


def init_activity_schema_data(apps, schema_monitor):
    """
    Add initial schema data to erc.activity_schema
    """
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(
        f"{cwd}/reporting/json_schemas/2024/ng_other_than_non_compression/activity.json"
    ) as ng_other_than_non_compression:
        schema = json.load(ng_other_than_non_compression)

    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    ActivitySchema.objects.create(
        activity=Activity.objects.get(
            name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
        ),
        json_schema=schema,
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    )


def reverse_activity_schema_data(apps, schema_monitor):
    Activity = apps.get_model("registration", "Activity")
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Configuration = apps.get_model("reporting", "Configuration")

    ActivitySchema.objects.get(
        activity=Activity.objects.get(
            name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
        ),
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ).delete()


#### ACTIVITY SOURCE TYPE SCHEMAS ####


def init_activity_source_type_schema_data(apps, schema_monitor):
    # Import JSON data
    import os

    cwd = os.getcwd()

    # (json schema file name, source type name, has_unit, has_fuel)
    st_schema_config = [
        (
            "1_ng_pneumatic_high_bleed_device_venting",
            "Natural gas pneumatic high bleed device venting",
            True,
            True,
        ),
        (
            "2_ng_pneumatic_pump_venting",
            "Natural gas pneumatic pump venting",
            True,
            True,
        ),
        (
            "3_ng_pneumatic_low_bleed_device_venting",
            "Natural gas pneumatic low bleed device venting",
            True,
            True,
        ),
        (
            "4_ng_pneumatic_intermittent_device_venting",
            "Natural gas pneumatic intermittent bleed device venting",
            True,
            True,
        ),
        ("5_blowdown_venting", "Blowdown venting", False, False),
        ("6_flare_stacks", "Flare stacks", True, True),
        (
            "7_centrifugal_compressor_venting",
            "Centrifugal compressor venting",
            True,
            False,
        ),
        (
            "8_reciprocating_compressor_venting",
            "Reciprocating compressor venting",
            True,
            False,
        ),
        (
            "9_equipment_leaks_detected_using_leak_detection",
            "Equipment leaks detected using leak detection and leaker emission factor methods",
            True,
            False,
        ),
        ("10_population_count_sources", "Population count sources", True, False),
        ("11_transmission_storage_tanks", "Transmission storage tanks", False, False),
        ("12_other_venting_sources", "Other venting sources", True, False),
        ("13_other_fugitive_sources", "Other fugitive sources", True, False),
        (
            "14_third_party_line_hits_with_release_of_gas",
            "Third party line hits with release of gas",
            True,
            False,
        ),
    ]

    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    Configuration = apps.get_model("reporting", "Configuration")

    for element in st_schema_config:
        (file_name, st_name, has_unit, has_fuel) = element

        with open(f"{cwd}/reporting/json_schemas/2024/ng_other_than_non_compression/{file_name}.json") as schema_file:
            schema = json.load(schema_file)

        ActivitySourceTypeSchema.objects.create(
            activity=Activity.objects.get(
                name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
            ),
            source_type=SourceType.objects.get(name=st_name),
            has_unit=has_unit,
            has_fuel=has_fuel,
            json_schema=schema,
            valid_from=Configuration.objects.get(valid_from="2023-01-01"),
            valid_to=Configuration.objects.get(valid_to="2099-12-31"),
        )


def reverse_activity_source_type_schema_data(apps, schema_monitor):
    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    ActivitySourceTypeSchema.objects.filter(
        activity=Activity.objects.get(
            name="Activities for the purpose of natural gas transmission, natural gas distribution, natural gas storage, carbon dioxide transportation or oil transmission, other than non-compression and non-processing activities"
        ),
        valid_from=Configuration.objects.get(valid_from="2023-01-01"),
        valid_to=Configuration.objects.get(valid_to="2099-12-31"),
    ).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("reporting", "0051_natural_gas_non_compression_configuration"),
    ]

    operations = [
        migrations.RunPython(
            init_additional_methodology_data,
            reverse_additional_methodology_data,
        ),
        migrations.RunPython(
            init_configuration_element_data,
            reverse_configuration_element_data,
        ),
        migrations.RunPython(
            init_configuration_element_reporting_fields_data,
            reverse_configuration_element_reporting_fields_data,
        ),
        migrations.RunPython(init_activity_schema_data, reverse_activity_schema_data),
        migrations.RunPython(
            init_activity_source_type_schema_data,
            reverse_activity_source_type_schema_data,
        ),
    ]
