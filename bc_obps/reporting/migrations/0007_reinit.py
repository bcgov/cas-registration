# Generated by Django 5.0.7 on 2024-08-13 21:50

import django.contrib.postgres.constraints
import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import reporting.models.configuration
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0031_activity_model'),
        ('reporting', '0006_V1_9_0'),
    ]

    operations = [
        migrations.CreateModel(
            name='Configuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'slug',
                    models.CharField(db_comment='Unique identifier for a configuration', max_length=1000, unique=True),
                ),
                (
                    'valid_from',
                    models.DateField(
                        blank=True, db_comment='Date from which the configuration is applicable', null=True
                    ),
                ),
                (
                    'valid_to',
                    models.DateField(
                        blank=True, db_comment='Date until which the configuration is applicable', null=True
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."configuration',
                'db_table_comment': 'Table containing program configurations for a date range. Each record will define a time period for when configuration elements are valid. When a change to the configuration is made a new configuration record will be created. This enables historical accuracy when applying configurations from previous years.',
            },
        ),
        migrations.CreateModel(
            name='ConfigurationElement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'erc"."configuration_element',
                'db_table_comment': 'Element of a configuration, representing a single relationship between multiple entities. Used to define an allowable activity-sourceType-gasType-methodology relationship as per WCI',
            },
        ),
        migrations.CreateModel(
            name='FacilityReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('facility_name', models.CharField(db_comment='The name of the facility as reported', max_length=1000)),
                ('facility_type', models.CharField(db_comment='The type of the facility as reported', max_length=1000)),
                (
                    'facility_bcghgid',
                    models.CharField(
                        blank=True, db_comment='The BC GHG ID of the facility as reported', max_length=1000, null=True
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."facility_report',
                'db_table_comment': 'A table to store individual facility information as part of a report',
            },
        ),
        migrations.CreateModel(
            name='FuelType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='The name of a fuel type (example: Crude Oil)', max_length=1000)),
                (
                    'unit',
                    models.CharField(
                        db_comment='The unit of measurement for this fuel type (example: kilolitres)', max_length=1000
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."fuel_type',
                'db_table_comment': 'This table contains the list of fuel types that can be reported.',
            },
        ),
        migrations.CreateModel(
            name='GasType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'name',
                    models.CharField(
                        db_comment='The name of a greenhouse gas type (example: Carbon Dioxide)', max_length=1000
                    ),
                ),
                (
                    'chemical_formula',
                    models.CharField(
                        db_comment='The chemical formula representation of a greenhouse gast type (example: CO2)',
                        max_length=100,
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."gas_type',
                'db_table_comment': 'This table contains the list of gas types that can be reported as defined in GGERR (Greenhous Gas Emission Reporting Regulation)',
            },
        ),
        migrations.CreateModel(
            name='Methodology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='The name of a reporting methodology', max_length=1000)),
            ],
            options={
                'db_table': 'erc"."methodology',
                'db_table_comment': 'Table contains the set of reporting methodologies that can be applied to an emission as outlined in GGERR (Greenhous Gas Emission Reporting Regulation)',
            },
        ),
        migrations.CreateModel(
            name='ReportActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'json_data',
                    models.JSONField(db_comment='A flat JSON object representing the data collected for this model'),
                ),
            ],
            options={
                'db_table': 'erc"."report_activity',
                'db_table_comment': 'A table to store the reported activity-specific data, in a JSON format',
            },
        ),
        migrations.CreateModel(
            name='ReportEmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'json_data',
                    models.JSONField(db_comment='A flat JSON object representing the data collected for this model'),
                ),
            ],
            options={
                'db_table': 'erc"."report_emission',
                'db_table_comment': 'A table to store the reported emission-specific data, in a JSON format',
            },
        ),
        migrations.CreateModel(
            name='ReportFuel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'json_data',
                    models.JSONField(db_comment='A flat JSON object representing the data collected for this model'),
                ),
            ],
            options={
                'db_table': 'erc"."report_fuel',
                'db_table_comment': 'A table to store the reported fuel-specific data, in a JSON format',
            },
        ),
        migrations.CreateModel(
            name='ReportingField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'field_name',
                    models.CharField(
                        db_comment='Name of field needed for the related configuration element.', max_length=1000
                    ),
                ),
                ('field_type', models.CharField(db_comment='Type definition for field.', max_length=1000)),
                (
                    'field_units',
                    models.CharField(
                        blank=True, db_comment='Units of measurement relating to the field.', max_length=1000, null=True
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."reporting_field',
                'db_table_comment': 'A field name/type combination that relates to a configuration element record through the config_element_reporting_field intersection table. Used to dynamically create a form schema from the configuration',
            },
        ),
        migrations.CreateModel(
            name='ReportingYear',
            fields=[
                (
                    'reporting_year',
                    models.IntegerField(
                        db_comment='Year for the reporting year, unique and serves as primary key',
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'reporting_window_start',
                    models.DateTimeField(db_comment='Start of the reporting period for that reporting year, UTC-based'),
                ),
                (
                    'reporting_window_end',
                    models.DateTimeField(db_comment='End of the reporting period for that reporting year, UTC-based'),
                ),
                (
                    'report_due_date',
                    models.DateTimeField(
                        db_comment='Due date for the annual report for that reporting year, UTC-based'
                    ),
                ),
                ('description', models.CharField(db_comment='Description for the reporting year', max_length=10000)),
            ],
            options={
                'db_table': 'erc"."reporting_year',
                'db_table_comment': 'Reporting year',
            },
        ),
        migrations.CreateModel(
            name='ReportMethodology',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'json_data',
                    models.JSONField(db_comment='A flat JSON object representing the data collected for this model'),
                ),
            ],
            options={
                'db_table': 'erc"."report_methodology',
                'db_table_comment': 'A table to store the reported methodology-specific data, in a JSON format',
            },
        ),
        migrations.CreateModel(
            name='ReportOperation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'operator_legal_name',
                    models.CharField(
                        db_comment='The legal name of the operator operating this operation', max_length=1000
                    ),
                ),
                (
                    'operator_trade_name',
                    models.CharField(
                        blank=True,
                        db_comment='The trade name of the operator operating this operation',
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    'operation_name',
                    models.CharField(db_comment='The name of the operation, for which this report is', max_length=1000),
                ),
                (
                    'operation_type',
                    models.CharField(db_comment='The type of the operation, LFO or SFO', max_length=1000),
                ),
                (
                    'operation_bcghgid',
                    models.CharField(
                        blank=True, db_comment='The BCGHGH ID of the operation', max_length=1000, null=True
                    ),
                ),
                (
                    'bc_obps_regulated_operation_id',
                    models.CharField(
                        blank=True,
                        db_comment='The BC OBPS Regulated Operation ID (BORO ID) for this operation',
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    'operation_representative_name',
                    models.CharField(db_comment='The full name of the operation representative', max_length=10000),
                ),
            ],
            options={
                'db_table': 'erc"."report_operation',
                'db_table_comment': 'A table to store operation information as part of a report',
            },
        ),
        migrations.CreateModel(
            name='ReportSourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'json_data',
                    models.JSONField(db_comment='A flat JSON object representing the data collected for this model'),
                ),
            ],
            options={
                'db_table': 'erc"."report_source_type',
                'db_table_comment': 'A table to store the reported source type-specific data, in a JSON format',
            },
        ),
        migrations.CreateModel(
            name='ReportUnit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'json_data',
                    models.JSONField(db_comment='A flat JSON object representing the data collected for this model'),
                ),
            ],
            options={
                'db_table': 'erc"."report_unit',
                'db_table_comment': 'A table to store the reported unit-specific data, in a JSON format',
            },
        ),
        migrations.CreateModel(
            name='ReportVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                (
                    'is_latest_submitted',
                    models.BooleanField(db_comment='True if this version is the latest submitted one', default=False),
                ),
                (
                    'status',
                    models.CharField(
                        choices=[('draft', 'Draft'), ('submitted', 'Submitted')],
                        db_comment='The status for this report version: draft or submitted.',
                        default='draft',
                        max_length=1000,
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."report_version',
                'db_table_comment': 'A table representing the multiple versions that a single report can have.',
            },
        ),
        migrations.CreateModel(
            name='SourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment='The name of a source type', max_length=1000)),
                (
                    'json_key',
                    models.CharField(
                        db_comment='A truncated and camel cased version on the source type name that is used as a key when building the json schema dynamically',
                        max_length=100,
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."source_type',
                'db_table_comment': 'Source types',
            },
        ),
        migrations.AlterModelTableComment(
            name='report',
            table_comment='A table to store report instances. Each operation has at most one report per year.',
        ),
        migrations.RemoveField(
            model_name='report',
            name='description',
        ),
        migrations.RemoveField(
            model_name='report',
            name='title',
        ),
        migrations.AddField(
            model_name='report',
            name='archived_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='report',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='report',
            name='operation',
            field=models.ForeignKey(
                db_comment='The operation for which this report was filed',
                default=0,
                on_delete=django.db.models.deletion.PROTECT,
                to='registration.operation',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='report',
            name='operator',
            field=models.ForeignKey(
                db_comment='The operator to which this report belongs',
                default=0,
                on_delete=django.db.models.deletion.PROTECT,
                to='registration.operator',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='report',
            name='updated_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='report',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AlterField(
            model_name='report',
            name='created_at',
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.CreateModel(
            name='ActivityJsonSchema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'json_schema',
                    models.JSONField(
                        db_comment='The json schema for a specific activity. This defines the shape of the data collected for the related activity'
                    ),
                ),
                (
                    'activity',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registration.activity'
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."activity_json_schema',
                'db_table_comment': 'Intersection table that assigns a json_schema as valid for a period of time given an activity',
            },
        ),
        migrations.CreateModel(
            name='ActivitySourceTypeJsonSchema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'json_schema',
                    models.JSONField(
                        db_comment='The json schema for a specific activity-source type pair. This defines the shape of the data collected for the source type'
                    ),
                ),
                (
                    'has_unit',
                    models.BooleanField(
                        db_comment='Whether or not this source type should collect unit data. If true, add a unit schema when buidling the form object',
                        default=True,
                    ),
                ),
                (
                    'has_fuel',
                    models.BooleanField(
                        db_comment='Whether or not this source type should collect fuel data. If true, add a fuel schema when buidling the form object',
                        default=True,
                    ),
                ),
                (
                    'activity',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='registration.activity'
                    ),
                ),
            ],
            options={
                'db_table': 'erc"."activity_source_type_json_schema',
                'db_table_comment': 'Intersection table that assigns a json_schema as valid for a period of time given an activity-sourceType pair',
            },
        ),
        migrations.AddConstraint(
            model_name='configuration',
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (
                        reporting.models.configuration.TsTzRange(
                            'valid_from', 'valid_to', django.contrib.postgres.fields.ranges.RangeBoundary()
                        ),
                        '&&',
                    )
                ],
                name='exclude_overlapping_configuration_records_by_date_range',
            ),
        ),
        migrations.AddField(
            model_name='activitysourcetypejsonschema',
            name='valid_from',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reporting.configuration'
            ),
        ),
        migrations.AddField(
            model_name='activitysourcetypejsonschema',
            name='valid_to',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reporting.configuration'
            ),
        ),
        migrations.AddField(
            model_name='activityjsonschema',
            name='valid_from',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reporting.configuration'
            ),
        ),
        migrations.AddField(
            model_name='activityjsonschema',
            name='valid_to',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reporting.configuration'
            ),
        ),
        migrations.AddField(
            model_name='configurationelement',
            name='activity',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='configuration_elements',
                to='registration.activity',
            ),
        ),
        migrations.AddField(
            model_name='configurationelement',
            name='valid_from',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reporting.configuration'
            ),
        ),
        migrations.AddField(
            model_name='configurationelement',
            name='valid_to',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reporting.configuration'
            ),
        ),
        migrations.AddField(
            model_name='facilityreport',
            name='activities',
            field=models.ManyToManyField(related_name='+', to='registration.activity'),
        ),
        migrations.AddField(
            model_name='facilityreport',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='facilityreport',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='facilityreport',
            name='facility',
            field=models.ForeignKey(
                db_comment='The facility record this report was created for, at the time the report was filled out.',
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='facility_reports',
                to='registration.facility',
            ),
        ),
        migrations.AddField(
            model_name='facilityreport',
            name='products',
            field=models.ManyToManyField(related_name='+', to='registration.regulatedproduct'),
        ),
        migrations.AddField(
            model_name='facilityreport',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='configurationelement',
            name='gas_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='configuration_elements',
                to='reporting.gastype',
            ),
        ),
        migrations.AddField(
            model_name='configurationelement',
            name='methodology',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='configuration_elements',
                to='reporting.methodology',
            ),
        ),
        migrations.AddField(
            model_name='reportactivity',
            name='activity',
            field=models.ForeignKey(
                db_comment='The reporting activity this data applies to',
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_records',
                to='registration.activity',
            ),
        ),
        migrations.AddField(
            model_name='reportactivity',
            name='activity_base_schema',
            field=models.ForeignKey(
                db_comment='The activity base schema used to render the form that collected this data',
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_records',
                to='reporting.activityjsonschema',
            ),
        ),
        migrations.AddField(
            model_name='reportactivity',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportactivity',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportactivity',
            name='facility_report',
            field=models.ForeignKey(
                db_comment='The facility report this activity data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.facilityreport',
            ),
        ),
        migrations.AddField(
            model_name='reportactivity',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportemission',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportemission',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportemission',
            name='gas_type',
            field=models.ForeignKey(
                db_comment='The gas type this emission data applies to',
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_records',
                to='reporting.gastype',
            ),
        ),
        migrations.AddField(
            model_name='reportemission',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportfuel',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportfuel',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportfuel',
            name='fuel_type',
            field=models.ForeignKey(
                db_comment='The fuel type this data applies to',
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_records',
                to='reporting.fueltype',
            ),
        ),
        migrations.AddField(
            model_name='reportfuel',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportemission',
            name='report_fuel',
            field=models.ForeignKey(
                db_comment='The fuel data this emission data belongs to, if applicable',
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportfuel',
            ),
        ),
        migrations.AddConstraint(
            model_name='reportingfield',
            constraint=models.UniqueConstraint(
                fields=('field_name', 'field_type', 'field_units'), name='unique_reporting_field'
            ),
        ),
        migrations.AddField(
            model_name='configurationelement',
            name='reporting_fields',
            field=models.ManyToManyField(
                blank=True, related_name='configuration_elements', to='reporting.reportingfield'
            ),
        ),
        migrations.AddField(
            model_name='report',
            name='reporting_year',
            field=models.ForeignKey(
                db_comment='The reporting year, for which this report is filled',
                default=0,
                on_delete=django.db.models.deletion.PROTECT,
                to='reporting.reportingyear',
            ),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='reportmethodology',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportmethodology',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportmethodology',
            name='report_emission',
            field=models.OneToOneField(
                db_comment='The emission data this methodology applies to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='report_methodology',
                to='reporting.reportemission',
            ),
        ),
        migrations.AddField(
            model_name='reportmethodology',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportoperation',
            name='activities',
            field=models.ManyToManyField(related_name='+', to='registration.activity'),
        ),
        migrations.AddField(
            model_name='reportoperation',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportoperation',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportoperation',
            name='regulated_products',
            field=models.ManyToManyField(related_name='+', to='registration.regulatedproduct'),
        ),
        migrations.AddField(
            model_name='reportoperation',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportsourcetype',
            name='activity_source_type_base_schema',
            field=models.ForeignKey(
                db_comment='The activity-source-type base schema used to render the form that collected this data',
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_records',
                to='reporting.activitysourcetypejsonschema',
            ),
        ),
        migrations.AddField(
            model_name='reportsourcetype',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportsourcetype',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportsourcetype',
            name='report_activity',
            field=models.ForeignKey(
                db_comment='The activity data record this source type data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportactivity',
            ),
        ),
        migrations.AddField(
            model_name='reportsourcetype',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportfuel',
            name='report_source_type',
            field=models.ForeignKey(
                db_comment='The source type data this unit data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportsourcetype',
            ),
        ),
        migrations.AddField(
            model_name='reportemission',
            name='report_source_type',
            field=models.ForeignKey(
                db_comment='The source type data this emission data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportsourcetype',
            ),
        ),
        migrations.AddField(
            model_name='reportunit',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportunit',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportunit',
            name='report_source_type',
            field=models.ForeignKey(
                db_comment='The source type data this unit data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportsourcetype',
            ),
        ),
        migrations.AddField(
            model_name='reportunit',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportfuel',
            name='report_unit',
            field=models.ForeignKey(
                db_comment='The unit form data this fuel data belongs to, if applicable',
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportunit',
            ),
        ),
        migrations.AddField(
            model_name='reportversion',
            name='archived_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_archived',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportversion',
            name='created_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_created',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportversion',
            name='report',
            field=models.ForeignKey(
                db_comment='The report to which this version applied.',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='report_versions',
                to='reporting.report',
            ),
        ),
        migrations.AddField(
            model_name='reportversion',
            name='updated_by',
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_updated',
                to='registration.user',
            ),
        ),
        migrations.AddField(
            model_name='reportunit',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportsourcetype',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportoperation',
            name='report_version',
            field=models.OneToOneField(
                db_comment='The report this operation information relates to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='report_operation',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportmethodology',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportfuel',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportemission',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='reportactivity',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report version this data belongs to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='%(class)s_records',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddField(
            model_name='facilityreport',
            name='report_version',
            field=models.ForeignKey(
                db_comment='The report this facility information is related to',
                on_delete=django.db.models.deletion.CASCADE,
                related_name='facility_reports',
                to='reporting.reportversion',
            ),
        ),
        migrations.AddConstraint(
            model_name='sourcetype',
            constraint=models.UniqueConstraint(fields=('json_key',), name='unique_source_type_json_key'),
        ),
        migrations.AddField(
            model_name='reportsourcetype',
            name='source_type',
            field=models.ForeignKey(
                db_comment='The source type this data applies to',
                on_delete=django.db.models.deletion.PROTECT,
                related_name='%(class)s_records',
                to='reporting.sourcetype',
            ),
        ),
        migrations.AddField(
            model_name='configurationelement',
            name='source_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name='configuration_elements',
                to='reporting.sourcetype',
            ),
        ),
        migrations.AddField(
            model_name='activitysourcetypejsonschema',
            name='source_type',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='reporting.sourcetype'
            ),
        ),
    ]
