# Generated by Django 5.0.11 on 2025-02-07 01:12

import pgtrigger.compiler
import pgtrigger.migrations
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('registration', '0074_V1_21_0'),
        ('reporting', '0055_liquefied_natural_gas'),
    ]

    operations = [
        pgtrigger.migrations.AddTrigger(
            model_name='facilityreport',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."facility_report" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'facilityreport record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='4e56154309c15833a00574d9cf1a59f8247439b5',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_0899a',
                    table='erc"."facility_report',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportactivity',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_activity" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportactivity record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='63c12acbec810ea5384274320cbe238e36f9bd33',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_12848',
                    table='erc"."report_activity',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportadditionaldata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_additional_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportadditionaldata record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='2562de0266660419720727ba40859c383ec22fe4',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_75b4c',
                    table='erc"."report_additional_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportattachment',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_attachment" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportattachment record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='86d28c4eff94d350d12897761afbd7aff3f91c8b',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_3148e',
                    table='erc"."report_attachment',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_emission" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='f221a690c1fd233fda9e00492be07d8011c2f18a',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_43304',
                    table='erc"."report_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportfuel',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_fuel" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportfuel record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='2a77f7abda046388a46ce11516a7b63a6fb964ae',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_6dfcf',
                    table='erc"."report_fuel',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportmethodology',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_methodology" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportmethodology record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='a4783cf04966dff726d2848ccdd74b6944673ebd',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_549f7',
                    table='erc"."report_methodology',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrant',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrant record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='f2bbea3e2094520464d95bc19d9f61507d286aeb',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_91283',
                    table='erc"."report_new_entrant',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantemission',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n            \n                join "erc"."report_new_entrant_emission" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantemission record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='48d82646e863d5c84489fd9e9c08a25ad6b5caa0',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_cb047',
                    table='erc"."report_new_entrant_emission',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnewentrantproduction',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_new_entrant" rel2 on rel2.report_version_id=rel1.id\n            \n                join "erc"."report_new_entrant_production" rel3 on rel3.report_new_entrant_id=rel2.id\n                where rel3.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnewentrantproduction record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='69e106671271719582bfa84ec74e74fbb630575a',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_9db82',
                    table='erc"."report_new_entrant_production',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportnonattributableemissions',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_non_attributable_emissions" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportnonattributableemissions record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='cf61e32dc58b51f09c7ff7d10680aa54af9f698b',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_7acda',
                    table='erc"."report_non_attributable_emissions',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_operation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperation record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='ec363195598e95b1b1b5e56ac1cda9d0dd71f26f',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_2fd67',
                    table='erc"."report_operation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportoperationrepresentative',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_operation_representative" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportoperationrepresentative record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='23267293588c13ca7e59237e6b88796c98051d78',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_f165f',
                    table='erc"."report_operation_representative',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportpersonresponsible',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_person_responsible" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportpersonresponsible record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='ad4defd7f5ea182be4c56bb8000ab41b2ff318b6',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_5977d',
                    table='erc"."report_person_responsible',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproduct',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_product" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproduct record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='d52aa699e06c3ff6a95be16bdeca198dd3033007',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_804e0',
                    table='erc"."report_product',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportproductemissionallocation',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_product_emission_allocation" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportproductemissionallocation record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='33f11c20247d6dda8c3569d511c0c48247d46b0e',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_6eb57',
                    table='erc"."report_product_emission_allocation',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportrawactivitydata',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_raw_activity_data" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportrawactivitydata record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='9a701d83d9956a4f20b210ea1cc02e03511e1b9d',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_0fd09',
                    table='erc"."report_raw_activity_data',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportsourcetype',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_source_type" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportsourcetype record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='bcf15241e7b7de80b97615b7704eef1b3f803a60',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_62a56',
                    table='erc"."report_source_type',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportunit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_unit" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportunit record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='26c600610b2dcf483e39c1a21296d4c07413a53a',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_e7bf2',
                    table='erc"."report_unit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverification',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."report_verification" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverification record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='8faf0d5047a780f0bd9e5fcc766c1540d78e50d4',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_8ea52',
                    table='erc"."report_verification',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportverificationvisit',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    func='\n            declare\n                status text;\n            begin\n            \n                select rel1.status into status\n                from "erc"."report_version" rel1\n            \n                join "erc"."verification_visit" rel2 on rel2.report_version_id=rel1.id\n                where rel2.id=new.id\n            \n                limit 1;\n\n                if status=\'Submitted\' then\n                    raise exception \'reportverificationvisit record is immutable after a report version has been submitted\';\n                end if;\n\n                return new;\n            end;\n            ',
                    hash='953e7ad37e94791e03966e4e4e918de0d5f50985',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_4239c',
                    table='erc"."verification_visit',
                    when='BEFORE',
                ),
            ),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='reportversion',
            trigger=pgtrigger.compiler.Trigger(
                name='immutable_report_version',
                sql=pgtrigger.compiler.UpsertTriggerSql(
                    condition='WHEN (OLD."status" = \'Submitted\')',
                    func="RAISE EXCEPTION 'pgtrigger: Cannot update rows from % table', TG_TABLE_NAME;",
                    hash='91542e932254c6a77803459b40ba983a69c443e1',
                    operation='UPDATE',
                    pgid='pgtrigger_immutable_report_version_cb563',
                    table='erc"."report_version',
                    when='BEFORE',
                ),
            ),
        ),
        migrations.AddConstraint(
            model_name='reportrawactivitydata',
            constraint=models.UniqueConstraint(
                fields=('facility_report', 'activity'), name='unique_raw_data_facility_report_activity'
            ),
        ),
    ]
