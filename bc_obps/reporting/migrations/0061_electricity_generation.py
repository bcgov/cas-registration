# Generated by Django 5.0.11 on 2025-02-07 18:48

import json
from django.db import migrations


#### ACTIVITY RULES ####

# Configuration constants
ACTIVITY = "Electricity generation"
VALID_FROM = "2023-01-01"
VALID_TO = "2099-12-31"

# Configuration of valid combinations of the models
CONFIG_VALID_RELATIONSHIPS = [
    # Fuel combustion for electricity generation
    {
        "activity": ACTIVITY,
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CO2"],
        "methodologies": [
            "CEMS",
            "Measured CC and MW",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ],
    },
    {
        "activity": ACTIVITY,
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4", "N2O"],
        "methodologies": [
            "Default HHV/Default EF",
            "Default EF",
            "Measured HHV/Default EF",
            "Measured EF",
            "Measured Steam/Default EF",
            "Heat Input/Default EF",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ],
    },
    # Acid gas scrubbers and acid gas reagents
    {
        "activity": ACTIVITY,
        "source_type": "Acid gas scrubbers and acid gas reagents",
        "gas_types": ["CO2"],
        "methodologies": ["Acid gas", "Alternative Parameter Measurement Methodology", "Replacement Methodology"],
    },
    # Cooling units
    {
        "activity": ACTIVITY,
        "source_type": "Cooling units",
        "gas_types": [
            "HFC-23 (CHF3)",
            "HFC-32 (CH2F2)",
            "HFC-41 (CH3F)",
            "HFC-43-10mee (C5H2F10)",
            "HFC-125 (C2HF5)",
            "HFC-134 (C2H2F4)",
            "HFC-134a (C2H2F4)",
            "HFC-143 (C2H3F3)",
            "HFC-143a (C2H3F3)",
            "HFC-152a (C2H4F2)",
            "HFC-227ea (C3HF7)",
            "HFC-236fa (C3H2F6)",
            "HFC-245ca (C3H3F5)",
        ],
        "methodologies": ["Mass balance", "Alternative Parameter Measurement Methodology", "Replacement Methodology"],
    },
    # Geothermal geyser steam or fluids
    {
        "activity": ACTIVITY,
        "source_type": "Geothermal geyser steam or fluids",
        "gas_types": ["CO2"],
        "methodologies": ["Measured heat", "Alternative Parameter Measurement Methodology", "Replacement Methodology"],
    },
    # Installation maintenance...
    {
        "activity": ACTIVITY,
        "source_type": "Installation, maintenance, operation and decommissioning of electrical equipment",
        "gas_types": ["SF6"],
        "methodologies": [
            "Mass balance",
            "Direct measurement",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ],
    },
]

# Configuration of reporting fields configuration data associated with source_type, gas_type, methodology
CONFIG_REPORTING_FIELDS = [
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CO2"],
        "methodologies": ["Measured CC and MW"],
        "reporting_fields": [
            {"name": "Annual Weighted Average Carbon Content"},
            {"name": "Annual Weighted Average Molecular Weight"},
            {"name": "Molar Volume Conversion Factor"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Default HHV/Default EF"],
        "reporting_fields": [
            {"name": "Fuel Default High Heating Value"},
            {"name": "Unit-Fuel-CH4 Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Default EF"],
        "reporting_fields": [{"name": "Unit-Fuel-CH4 Default Emission Factor", "units": "kg/fuel units"}],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Measured HHV/Default EF"],
        "reporting_fields": [
            {"name": "Fuel Annual Weighted Average High Heating Value"},
            {"name": "Unit-Fuel-CH4 Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Measured EF"],
        "reporting_fields": [{"name": "Unit-Fuel-CH4 Measured Emission Factor", "units": "kg/fuel units"}],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Measured Steam/Default EF"],
        "reporting_fields": [
            {"name": "Unit-Fuel Annual Steam Generated"},
            {"name": "Boiler Ratio"},
            {"name": "Unit-Fuel-CH4 Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Heat Input/Default EF"],
        "reporting_fields": [
            {"name": "Unit-Fuel Heat Input"},
            {"name": "Unit-Fuel-CH4 Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Alternative Parameter Measurement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["CH4"],
        "methodologies": ["Replacement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Default HHV/Default EF"],
        "reporting_fields": [
            {"name": "Fuel Default High Heating Value"},
            {"name": "Unit-Fuel-N2O Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Default EF"],
        "reporting_fields": [{"name": "Unit-Fuel-N2O Default Emission Factor", "units": "kg/fuel units"}],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Measured HHV/Default EF"],
        "reporting_fields": [
            {"name": "Fuel Annual Weighted Average High Heating Value"},
            {"name": "Unit-Fuel-N2O Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Measured EF"],
        "reporting_fields": [{"name": "Unit-Fuel-N2O Measured Emission Factor", "units": "kg/fuel units"}],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Measured Steam/Default EF"],
        "reporting_fields": [
            {"name": "Unit-Fuel Annual Steam Generated"},
            {"name": "Boiler Ratio"},
            {"name": "Unit-Fuel-N2O Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Heat Input/Default EF"],
        "reporting_fields": [
            {"name": "Unit-Fuel Heat Input"},
            {"name": "Unit-Fuel-N2O Default Emission Factor", "units": "kg/GJ"},
        ],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Alternative Parameter Measurement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
    {
        "source_type": "Fuel combustion for electricity generation",
        "gas_types": ["N2O"],
        "methodologies": ["Replacement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
    {
        "source_type": "Acid gas scrubbers and acid gas reagents",
        "gas_types": ["CO2"],
        "methodologies": ["Alternative Parameter Measurement Methodology", "Replacement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
    {
        "source_type": "Cooling units",
        "gas_types": [
            "HFC-23 (CHF3)",
            "HFC-32 (CH2F2)",
            "HFC-41 (CH3F)",
            "HFC-43-10mee (C5H2F10)",
            "HFC-125 (C2HF5)",
            "HFC-134 (C2H2F4)",
            "HFC-134a (C2H2F4)",
            "HFC-143 (C2H3F3)",
            "HFC-143a (C2H3F3)",
            "HFC-152a (C2H4F2)",
            "HFC-227ea (C3HF7)",
            "HFC-236fa (C3H2F6)",
            "HFC-245ca (C3H3F5)",
        ],
        "methodologies": ["Alternative Parameter Measurement Methodology", "Replacement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
    {
        "source_type": "Geothermal geyser steam or fluids",
        "gas_types": ["CO2"],
        "methodologies": ["Alternative Parameter Measurement Methodology", "Replacement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
    {
        "source_type": "Installation, maintenance, operation and decommissioning of electrical equipment",
        "gas_types": ["SF6"],
        "methodologies": ["Alternative Parameter Measurement Methodology", "Replacement Methodology"],
        "reporting_fields": [{"name": "Description"}],
    },
]

# Configuration of schema files related to activity source types:
# JSON Schema File Name (str) – Unique identifier for the schema file.
# Source Type Name (str) – Human-readable name describing the source type.
# has_unit (bool) –
# true: Includes unit-level data (e.g., power generation units), adding a "units" array to the schema.
# false: No unit-level data, omitting "units".
# has_fuel (bool) –
# true: Involves fuel consumption, adding a "fuels" array within "units".
# false: No fuel-related fields, omitting "fuels".
# The schema should be structured with "units" and/or "fuels" based on these values.
# If both has_unit and has_fuel are true, "units" will contain "fuels", which in turn includes "emissions" data.
CONFIG_SOURCE_TYPE_SCHEMA = [
    (
        "1_fuel_combustion_electricity_gen",
        "Fuel combustion for electricity generation",
        True,
        True,
        # "default": { "units": [{ "fuels": [{ "emissions": [{}] }] }] },
    ),
    (
        "2_acid_gas_scrubbers_reagents",
        "Acid gas scrubbers and acid gas reagents",
        False,
        False,
        # "default": { "emissions": [{}] },
    ),
    (
        "3_cooling_units",
        "Cooling units",
        False,
        False,
        # "default": { "emissions": [{}] },
    ),
    (
        "4_geothermal_geyser_steam_fluids",
        "Geothermal geyser steam or fluids",
        False,
        False,
        # "default": { "emissions": [{}] },
    ),
    (
        "5_electrical_equipment_install_maint_decom",
        "Installation, maintenance, operation and decommissioning of electrical equipment",
        False,
        False,
        # "default": { "emissions": [{}] },
    ),
]

JSON_SCHEMAS_PATH = "reporting/json_schemas/2024/electricity_generation"

#### DATA: GAS TYPE ####


def init_additional_gas_type_data(apps, schema_editor):
    """
    Add additional gas types to erc.gas_type
    """
    # Retrieve models from the app registry to interact with the database
    GasType = apps.get_model('reporting', 'GasType')

    # List of gas types with their respective details
    gas_types_data = [
        {"name": "Trifluoromethane", "chemical_formula": "HFC-23 (CHF3)", "cas_number": "75-46-7", "gwp": 12400},
        {"name": "Fluoromethane", "chemical_formula": "HFC-41 (CH3F)", "cas_number": "593-53-3", "gwp": 116},
        {
            "name": "1,1,1,2,3,4,4,5,5,5-decafluoropentane",
            "chemical_formula": "HFC-43-10mee (C5H2F10)",
            "cas_number": "138495-42-8",
            "gwp": 1650,
        },
        {
            "name": "1,1,2,2-tetrafluoroethane",
            "chemical_formula": "HFC-134 (C2H2F4)",
            "cas_number": "359-35-3",
            "gwp": 1120,
        },
        {"name": "1,1,2-trifluoroethane", "chemical_formula": "HFC-143 (C2H3F3)", "cas_number": "430-66-0", "gwp": 328},
        {
            "name": "1,1,1-trifluoroethane",
            "chemical_formula": "HFC-143a (C2H3F3)",
            "cas_number": "420-46-2",
            "gwp": 4800,
        },
        {"name": "1,1-difluoroethane", "chemical_formula": "HFC-152a (C2H4F2)", "cas_number": "75-37-6", "gwp": 138},
        {
            "name": "1,1,1,2,3,3,3-heptafluoro-propane",
            "chemical_formula": "HFC-227ea (C3HF7)",
            "cas_number": "431-89-0",
            "gwp": 3350,
        },
        {
            "name": "1,1,1,3,3,3-hexafluoro-propane",
            "chemical_formula": "HFC-236fa (C3H2F6)",
            "cas_number": "690-39-1",
            "gwp": 8060,
        },
        {
            "name": "1,1,2,2,3-pentafluoro-propane",
            "chemical_formula": "HFC-245ca (C3H3F5)",
            "cas_number": "679-86-7",
            "gwp": 716,
        },
    ]

    # Bulk creation of GasType records
    GasType.objects.bulk_create([GasType(**data) for data in gas_types_data])


def reverse_additional_gas_type_data(apps, schema_editor):
    """
    Remove additional gas_type data from erc.gas_type
    """
    GasType = apps.get_model('reporting', 'GasType')
    chemical_formulas = [
        "C3H3F5",
        "CH3F",
        "C2H4F2 (Structure: CH3CHF2)",
        "C5H2F10",
        "C2H3F3 (Structure: CHF2CH2F)",
        "C2H3F3 (Structure: CF3CH3)",
        "CHF3",
        "C3HF7",
        "C3H2F6",
    ]

    GasType.objects.filter(chemical_formula__in=chemical_formulas).delete()


def init_update_gas_type_data(apps, schema_editor):
    """
    Update erc.gas_type with distinct chemical formula
    """
    GasType = apps.get_model('reporting', 'GasType')

    # Update chemical formulas
    g = GasType.objects.get(chemical_formula='CH2F2')
    g.chemical_formula = 'HFC-32 (CH2F2)'
    g.save()

    g = GasType.objects.get(chemical_formula='C2HF5')
    g.chemical_formula = 'HFC-125 (C2HF5)'
    g.save()

    g = GasType.objects.get(chemical_formula='C2H2F4')
    g.chemical_formula = 'HFC-134a (C2H2F4)'
    g.save()


def reverse_update_gas_type_data(apps, schema_editor):
    """
    Reverse the chemical formula update
    """
    GasType = apps.get_model('reporting', 'GasType')

    # Revert chemical formulas to their original values
    g = GasType.objects.get(chemical_formula='HFC-32 (CH2F2)')
    g.chemical_formula = 'CH2F2'
    g.save()

    g = GasType.objects.get(chemical_formula='HFC-125 (C2HF5)')
    g.chemical_formula = 'C2HF5'
    g.save()


#### DATA: METHODOLOGY ####


def init_additional_methodology_data(apps, schema_editor):
    """
    Add additional data to erc.methodology
    """
    Methodology = apps.get_model("reporting", "Methodology")
    Methodology.objects.bulk_create(
        [
            Methodology(name="Acid gas"),
            Methodology(name="Direct measurement"),
            Methodology(name="Mass balance"),
            Methodology(name="Measured heat"),
        ]
    )


def reverse_additional_methodology_data(apps, schema_editor):
    """
    Remove additional data from erc.methodology
    """
    Methodology = apps.get_model("reporting", "Methodology")
    Methodology.objects.filter(
        name__in=[
            "Acid gas",
            "Direct measurement",
            "Mass balance",
            "Measured heat",
        ]
    ).delete()


#### CONFIGURATION ELEMENTS DATA ####


def init_configuration_element_data(apps, schema_editor):
    """
    Initialize ConfigurationElement records based on predefined configurations,
    including the activity, source type, gas types, methodologies, and valid date ranges.
    """
    # Retrieve models from the app registry to interact with the database
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    GasType = apps.get_model("reporting", "GasType")
    Methodology = apps.get_model("reporting", "Methodology")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Iterate through the relationships configuration json for the different source types
    for config in CONFIG_VALID_RELATIONSHIPS:
        # Retrieve the source type from the database based on its name
        source_type = SourceType.objects.get(name=config["source_type"])

        # Bulk create ConfigurationElement entries for each combination of gas type and methodology
        ConfigurationElement.objects.bulk_create(
            ConfigurationElement(
                activity=activity,
                source_type=source_type,
                gas_type=GasType.objects.get(chemical_formula=gas_type),
                methodology=Methodology.objects.get(name=methodology_name),
                valid_from=valid_from,
                valid_to=valid_to,
            )
            for gas_type in config["gas_types"]  # Iterate through the gas types for each config
            for methodology_name in config["methodologies"]  # Iterate through the methodologies for each config
        )


def reverse_configuration_element_data(apps, schema_editor):
    """
    Remove ConfigurationElements for the report activity
    """
    # Retrieve models from the app registry to interact with the database
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the const configurations
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Remove configurations
    ConfigurationElement.objects.filter(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


#### CONFIGURATION ELEMENTS REPORTING FIELDS DATA ####


def init_configuration_element_reporting_fields_data(apps, schema_editor):
    """
    Initialize ConfigurationElement records and associate them with reporting fields
    based on predefined configurations and conditions.
    """
    # Retrieve models from the app registry to interact with the database
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    ReportingField = apps.get_model('reporting', 'ReportingField')

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Iterate through the reporting fields configuration json for the different source types
    for config in CONFIG_REPORTING_FIELDS:
        # Fetch the source type from the database based on the given name
        source_type = SourceType.objects.get(name=config["source_type"])
        # Iterate through each gas type specified for the source type
        for gas_type_name in config["gas_types"]:
            # Fetch the gas type object based on its chemical formula
            gas_type = GasType.objects.get(chemical_formula=gas_type_name)
            # Fetch the methodologies related to this configuration
            methodologies = Methodology.objects.filter(name__in=config["methodologies"])

            # Create ConfigurationElement entries for each methodology associated with the current gas type and source type
            for methodology in methodologies:
                configuration_element, _ = ConfigurationElement.objects.get_or_create(
                    activity=activity,
                    source_type=source_type,
                    gas_type=gas_type,
                    methodology=methodology,
                    valid_from=valid_from,
                    valid_to=valid_to,
                )
                for field in config["reporting_fields"]:
                    field_name = field["name"]
                    field_units = field.get("units") if isinstance(field, dict) else None
                    if field_units is None:
                        reporting_field = ReportingField.objects.get(field_name=field_name, field_units__isnull=True)
                    else:
                        reporting_field = ReportingField.objects.get(field_name=field_name, field_units=field_units)

                    configuration_element.reporting_fields.add(reporting_field)


def reverse_configuration_element_reporting_fields_data(apps, schema_editor):
    '''
    Remove initial data from erc.configuration_element_reporting_fields
    '''

    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    ConfigurationElement.reporting_fields.through.objects.filter(
        configurationelement_id__in=ConfigurationElement.objects.filter(
            activity=activity,
            valid_from=valid_from,
            valid_to=valid_to,
        ).values_list("id", flat=True)
    ).delete()


#### ACTIVITY SCHEMA ####


def init_activity_schema_data(apps, schema_monitor):
    """
    Add activity schema data to erc.activity_schema
    """
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f"{cwd}/{JSON_SCHEMAS_PATH}/activity.json") as activity_file:
        schema = json.load(activity_file)

    # Retrieve models from the app registry to interact with the database
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Create activity schema
    ActivitySchema.objects.create(
        activity=activity,
        json_schema=schema,
        valid_from=valid_from,
        valid_to=valid_to,
    )


def reverse_activity_schema_data(apps, schema_monitor):
    """
    Remove Activity schema data
    """
    # Retrieve models from the app registry to interact with the database
    Activity = apps.get_model("registration", "Activity")
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Delete the schema
    ActivitySchema.objects.get(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


#### ACTIVITY SOURCE TYPE SCHEMAS ####


def init_activity_source_type_schema_data(apps, schema_monitor):
    """
    Add activity source type schema data to erc.activity_source_type_schema
    """
    # Import JSON data
    import os

    cwd = os.getcwd()

    # Retrieve models from the app registry to interact with the database
    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Iterate through the source type schema configuration json
    for element in CONFIG_SOURCE_TYPE_SCHEMA:
        (file_name, st_name, has_unit, has_fuel) = element

        with open(f"{cwd}/{JSON_SCHEMAS_PATH}/{file_name}.json") as schema_file:
            schema = json.load(schema_file)

        ActivitySourceTypeSchema.objects.create(
            activity=activity,
            source_type=SourceType.objects.get(name=st_name),
            has_unit=has_unit,
            has_fuel=has_fuel,
            json_schema=schema,
            valid_from=valid_from,
            valid_to=valid_to,
        )


def reverse_activity_source_type_schema_data(apps, schema_monitor):
    """
    Remove Activity SourceType schema data
    """

    # Retrieve models from the app registry to interact with the database
    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Delete the schema
    ActivitySourceTypeSchema.objects.filter(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


class Migration(migrations.Migration):
    dependencies = [
        ("reporting", "0060_og_extraction_other_than_non_compression"),
    ]

    operations = [
        migrations.RunPython(
            init_update_gas_type_data,
            reverse_update_gas_type_data,
        ),
        migrations.RunPython(
            init_additional_gas_type_data,
            reverse_additional_gas_type_data,
        ),
        migrations.RunPython(
            init_additional_methodology_data,
            reverse_additional_methodology_data,
        ),
        migrations.RunPython(
            init_configuration_element_data,
            reverse_configuration_element_data,
        ),
        migrations.RunPython(
            init_configuration_element_reporting_fields_data,
            reverse_configuration_element_reporting_fields_data,
        ),
        migrations.RunPython(init_activity_schema_data, reverse_activity_schema_data),
        migrations.RunPython(
            init_activity_source_type_schema_data,
            reverse_activity_source_type_schema_data,
        ),
    ]
