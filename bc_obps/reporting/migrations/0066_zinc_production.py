# Generated by Django 5.0.11 on 2025-02-14 18:48

from django.db import migrations
import json


#### ACTIVITY RULES ####

# Configuration constants
ACTIVITY = "Zinc production"
SOURCE_TYPE = "Use of reducing agents during zinc production"
VALID_FROM = "2023-01-01"
VALID_TO = "2099-12-31"

# Configuration of valid combinations of the models
CONFIG_VALID_RELATIONSHIPS = [
    {
        "activity": ACTIVITY,
        "source_type": SOURCE_TYPE,
        "gas_types": ["CO2"],
        "methodologies": [
            "CEMS",
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ],
    },
]
CUSTOM_CONFIG_VALID_RELATIONSHIPS = [
    {
        "source_type": SOURCE_TYPE,
        "gas_type": "CO2",
        "methodology": "Measured CC",
    }
]

# Configuration of reporting fields configuration data associated with source_type, gas_type, methodology
CONFIG_REPORTING_FIELDS = [
    {
        "source_type": SOURCE_TYPE,
        "gas_types": ["CO2"],
        "methodologies": [
            "Alternative Parameter Measurement Methodology",
            "Replacement Methodology",
        ],
        "reporting_fields": [
            {"name": "Description"},
        ],
    },
]

# Configuration of schema files related to activity source types:
# JSON Schema File Name (str) – Unique identifier for the schema file.
# Source Type Name (str) – Human-readable name describing the source type.
# has_unit (bool) –
# true: Includes unit-level data (e.g., power generation units), adding a "units" array to the schema.
# false: No unit-level data, omitting "units".
# has_fuel (bool) –
# true: Involves fuel consumption, adding a "fuels" array within "units".
# false: No fuel-related fields, omitting "fuels".
# The schema should be structured with "units" and/or "fuels" based on these values.
# If both has_unit and has_fuel are true, "units" will contain "fuels", which in turn includes "emissions" data.
CONFIG_SOURCE_TYPE_SCHEMA = [
    (
        "1_reducing agents",
        SOURCE_TYPE,
        False,
        False,
    ),
]

# Define schema configurations as (file_name, source_type_name, methodology_name, gas_formula)
CONFIG_CUSTOM_SCHEMAS = [
    ("measured_cc_custom", SOURCE_TYPE, "Measured CC", "CO2"),
]

JSON_SCHEMAS_PATH = "reporting/json_schemas/2024/zinc_production"

#### CONFIGURATION ELEMENTS DATA ####


def init_configuration_element_data(apps, schema_editor):
    '''
    Add initial data to erc.configuration_element
    '''

    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')
    CustomMethodologySchema = apps.get_model('reporting', 'CustomMethodologySchema')

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    configuration_elements = []

    for config in CONFIG_VALID_RELATIONSHIPS:
        source_type = SourceType.objects.get(name=config["source_type"])

        for gas_type in config["gas_types"]:
            gas_type_obj = GasType.objects.get(chemical_formula=gas_type)

            for methodology_name in config["methodologies"]:
                methodology_obj = Methodology.objects.get(name=methodology_name)

                configuration_elements.append(
                    ConfigurationElement(
                        activity=activity,
                        source_type=source_type,
                        gas_type=gas_type_obj,
                        methodology=methodology_obj,
                        valid_from=valid_from,
                        valid_to=valid_to,
                    )
                )

    for custom_config in CUSTOM_CONFIG_VALID_RELATIONSHIPS:
        source_type = SourceType.objects.get(name=custom_config["source_type"])
        gas_type_obj = GasType.objects.get(chemical_formula=custom_config["gas_type"])
        methodology_obj = Methodology.objects.get(name=custom_config["methodology"])

        custom_schema = CustomMethodologySchema.objects.get(
            activity=activity,
            source_type=source_type,
            gas_type=gas_type_obj,
            methodology=methodology_obj,
            valid_from=valid_from,
            valid_to=valid_to,
        )
        configuration_elements.append(
            ConfigurationElement(
                activity=activity,
                source_type=source_type,
                gas_type=gas_type_obj,
                methodology=methodology_obj,
                valid_from=valid_from,
                valid_to=valid_to,
                custom_methodology_schema=custom_schema,
            )
        )

    ConfigurationElement.objects.bulk_create(configuration_elements)


def reverse_configuration_element_data(apps, schema_editor):
    """
    Remove ConfigurationElements for the report activity
    """
    # Retrieve models from the app registry to interact with the database
    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the const configurations
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Remove configurations
    ConfigurationElement.objects.filter(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


#### CONFIGURATION ELEMENTS REPORTING FIELDS DATA ####


def init_configuration_element_reporting_fields_data(apps, schema_editor):
    """
    Initialize ConfigurationElement records and associate them with reporting fields
    based on predefined configurations and conditions.
    """
    # Retrieve models from the app registry to interact with the database
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    ReportingField = apps.get_model('reporting', 'ReportingField')

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Iterate through the reporting fields configuration json for the different source types
    for config in CONFIG_REPORTING_FIELDS:
        # Fetch the source type from the database based on the given name
        source_type = SourceType.objects.get(name=config["source_type"])
        # Iterate through each gas type specified for the source type
        for gas_type_name in config["gas_types"]:
            # Fetch the gas type object based on its chemical formula
            gas_type = GasType.objects.get(chemical_formula=gas_type_name)
            # Fetch the methodologies related to this configuration
            methodologies = Methodology.objects.filter(name__in=config["methodologies"])

            # Create ConfigurationElement entries for each methodology associated with the current gas type and source type
            for methodology in methodologies:
                configuration_element, _ = ConfigurationElement.objects.get_or_create(
                    activity=activity,
                    source_type=source_type,
                    gas_type=gas_type,
                    methodology=methodology,
                    valid_from=valid_from,
                    valid_to=valid_to,
                )
                for field in config["reporting_fields"]:
                    field_name = field["name"]
                    field_units = field.get("units") if isinstance(field, dict) else None
                    if field_units is None:
                        reporting_field = ReportingField.objects.get(field_name=field_name, field_units__isnull=True)
                    else:
                        reporting_field = ReportingField.objects.get(field_name=field_name, field_units=field_units)

                    configuration_element.reporting_fields.add(reporting_field)


def reverse_configuration_element_reporting_fields_data(apps, schema_editor):
    '''
    Remove initial data from erc.configuration_element_reporting_fields
    '''

    ConfigurationElement = apps.get_model("reporting", "ConfigurationElement")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    ConfigurationElement.reporting_fields.through.objects.filter(
        configurationelement_id__in=ConfigurationElement.objects.filter(
            activity=activity,
            valid_from=valid_from,
            valid_to=valid_to,
        ).values_list("id", flat=True)
    ).delete()


#### ACTIVITY SCHEMA ####


def init_activity_schema_data(apps, schema_editor):
    """
    Add activity schema data to erc.activity_schema
    """
    ## Import JSON data
    import os

    cwd = os.getcwd()
    with open(f"{cwd}/{JSON_SCHEMAS_PATH}/activity.json") as activity_file:
        schema = json.load(activity_file)

    # Retrieve models from the app registry to interact with the database
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Create activity schema
    ActivitySchema.objects.create(
        activity=activity,
        json_schema=schema,
        valid_from=valid_from,
        valid_to=valid_to,
    )


def reverse_activity_schema_data(apps, schema_monitor):
    """
    Remove Activity schema data
    """
    # Retrieve models from the app registry to interact with the database
    Activity = apps.get_model("registration", "Activity")
    ActivitySchema = apps.get_model("reporting", "ActivityJsonSchema")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Delete the schema
    ActivitySchema.objects.get(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


#### ACTIVITY SOURCE TYPE SCHEMAS ####


def init_activity_source_type_schema_data(apps, schema_monitor):
    """
    Add activity source type schema data to erc.activity_source_type_json_schema
    """
    # Import JSON data
    import os

    cwd = os.getcwd()

    # Retrieve models from the app registry to interact with the database
    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    SourceType = apps.get_model("reporting", "SourceType")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Iterate through the source type schema configuration json
    for element in CONFIG_SOURCE_TYPE_SCHEMA:
        (file_name, st_name, has_unit, has_fuel) = element

        with open(f"{cwd}/{JSON_SCHEMAS_PATH}/{file_name}.json") as schema_file:
            schema = json.load(schema_file)

        ActivitySourceTypeSchema.objects.create(
            activity=activity,
            source_type=SourceType.objects.get(name=st_name),
            has_unit=has_unit,
            has_fuel=has_fuel,
            json_schema=schema,
            valid_from=valid_from,
            valid_to=valid_to,
        )


def reverse_activity_source_type_schema_data(apps, schema_monitor):
    """
    Remove Activity SourceType schema data
    """

    # Retrieve models from the app registry to interact with the database
    ActivitySourceTypeSchema = apps.get_model("reporting", "ActivitySourceTypeJsonSchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Delete the schema
    ActivitySourceTypeSchema.objects.filter(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


#### CUSTOM SCHEMAS ####


def init_custom_schema_data(apps, schema_editor):
    """
    Add initial data to erc.custom_methodology_schema
    """
    import os
    import json

    cwd = os.getcwd()

    # Get the model classes
    CustomMethodologySchema = apps.get_model('reporting', 'CustomMethodologySchema')
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')

    # Fetch the configuration constants
    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    # Iterate through schema configurations
    for file_name, source_type_name, methodology_name, gas_formula in CONFIG_CUSTOM_SCHEMAS:
        with open(f"{cwd}/{JSON_SCHEMAS_PATH}/{file_name}.json") as schema_file:
            schema = json.load(schema_file)

        source_type = SourceType.objects.get(name=source_type_name)
        methodology = Methodology.objects.get(name=methodology_name)
        gas_type = GasType.objects.get(chemical_formula=gas_formula)

        # Create schema entry
        CustomMethodologySchema.objects.create(
            activity=activity,
            source_type=source_type,
            json_schema=schema,
            methodology=methodology,
            gas_type=gas_type,
            valid_from=valid_from,
            valid_to=valid_to,
        )


def reverse_custom_schema_data(apps, schema_editor):
    '''
    Remove initial activity custom methodology schema
    '''

    CustomSchema = apps.get_model("reporting", "CustomMethodologySchema")
    Activity = apps.get_model("registration", "Activity")
    Configuration = apps.get_model("reporting", "Configuration")

    activity = Activity.objects.get(name=ACTIVITY)
    valid_from = Configuration.objects.get(valid_from=VALID_FROM)
    valid_to = Configuration.objects.get(valid_to=VALID_TO)

    CustomSchema.objects.filter(
        activity=activity,
        valid_from=valid_from,
        valid_to=valid_to,
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('reporting', '0065_coal_storage'),
    ]

    operations = [
        migrations.RunPython(init_custom_schema_data, reverse_custom_schema_data),
        migrations.RunPython(init_configuration_element_data, reverse_configuration_element_data),
        migrations.RunPython(
            init_configuration_element_reporting_fields_data, reverse_configuration_element_reporting_fields_data
        ),
        migrations.RunPython(init_activity_schema_data, reverse_activity_schema_data),
        migrations.RunPython(init_activity_source_type_schema_data, reverse_activity_source_type_schema_data),
    ]
