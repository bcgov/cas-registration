# Generated by Django 5.0.14 on 2025-05-15 23:52

from django.db import migrations


def create_configuration_elements(apps, schema_editor):
    """
    Create ConfigurationElements and associate them with specific methodologies.
    """
    Activity = apps.get_model('registration', 'Activity')
    SourceType = apps.get_model('reporting', 'SourceType')
    GasType = apps.get_model('reporting', 'GasType')
    Methodology = apps.get_model('reporting', 'Methodology')
    Configuration = apps.get_model('reporting', 'Configuration')
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')

    activity_id = Activity.objects.get(name='Electricity generation').id
    source_type_id = SourceType.objects.get(name='Fuel combustion for electricity generation').id
    gas_type_id = GasType.objects.get(chemical_formula='CO2').id
    valid_from_id = Configuration.objects.get(valid_from='2023-01-01').id
    valid_to_id = Configuration.objects.get(valid_to='2099-12-31').id

    methodologies = [
        'Default HHV/Default EF',
        'Default EF',
        'Measured HHV/Default EF',
        'Measured Steam/Default EF',
        'Measured CC',
        'Heat Input/Default EF',
    ]

    ConfigurationElement.objects.bulk_create(
        [
            ConfigurationElement(
                activity_id=activity_id,
                source_type_id=source_type_id,
                gas_type_id=gas_type_id,
                methodology_id=Methodology.objects.get(name=methodology).id,
                valid_from_id=valid_from_id,
                valid_to_id=valid_to_id,
            )
            for methodology in methodologies
        ]
    )


def assign_reporting_fields_to_configuration_elements(apps, schema_editor):
    """
    Assign reporting fields to ConfigurationElements based on their methodologies.
    """
    ConfigurationElement = apps.get_model('reporting', 'ConfigurationElement')
    ReportingField = apps.get_model('reporting', 'ReportingField')

    reporting_fields_mapping = {
        'Default HHV/Default EF': ['Fuel Default High Heating Value', 'Unit-Fuel-CO2 Default EF'],
        'Default EF': ['Unit-Fuel-CO2 Default EF'],
        'Measured HHV/Default EF': [
            'Fuel Annual Weighted Average High Heating Value',
            'Unit-Fuel-CO2 Default EF',
        ],
        'Measured Steam/Default EF': [
            'Unit-Fuel Annual Steam Generated',
            'Boiler Ratio',
            'Unit-Fuel-CO2 Default EF',
        ],
        'Measured CC': ['Fuel Annual Weighted Average Carbon Content (weight fraction)'],
        'Heat Input/Default EF': [
            'Unit-Fuel Annual Steam Generated',
            'Unit-Fuel-CO2 Measured Steam-Measured EF',
        ],
        'Replacement Methodology': ['Description'],
        'Alternative Parameter Measurement Methodology': ['Description'],
    }

    for methodology, fields in reporting_fields_mapping.items():
        configuration_elements = ConfigurationElement.objects.filter(
            methodology__name=methodology,
            valid_from__valid_from='2023-01-01',
            valid_to__valid_to='2099-12-31',
        )
        for element in configuration_elements:
            for field_name in fields:
                reporting_field = ReportingField.objects.get(field_name=field_name)
                element.reporting_fields.add(reporting_field)


class Migration(migrations.Migration):
    dependencies = [
        ("reporting", "0103_remove_facilityreport_immutable_report_version_and_more"),
    ]

    operations = [
        migrations.RunPython(create_configuration_elements),
        migrations.RunPython(assign_reporting_fields_to_configuration_elements),
    ]
