name: ZAP OWASP Scan Code

on:
  workflow_call:

env:
  PGUSER: postgres
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
  KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
  KEYCLOAK_LOGIN_URL: ${{ secrets.KEYCLOAK_LOGIN_URL }}

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Install Docker and Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Start all services using Docker Compose
      - name: Start Services with Docker Compose
        run: |
          echo "Starting services..."
          docker-compose -f ./bciers/docker-compose-bciers-apps.yaml up -d
          echo "Waiting for services to be ready..."

      # Wait for the backend API to be healthy
      - name: Wait for Backend API Readiness
        run: |
          timeout 90s bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:8000/api | grep -q "200"; do sleep 3; done' || { echo "Backend API is not ready"; exit 1; }

      # Wait for Frontend Readiness (Dashboard)
      - name: Wait for Dashboard Readiness
        run: |
          timeout 90s bash -c 'until curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:3000 | grep -q "200"; do sleep 3; done' || { echo "Dashboard is not ready"; exit 1; }

      # Run ZAP Scan for Backend API
      - name: ZAP Scan - Backend API
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://127.0.0.1:8000/api"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Backend API"
          fail_action: false
          allow_issue_writing: false
          artifact_name: backend_zap_scan

      # Run ZAP Scan for Frontend Apps
      - name: ZAP Scan - Dashboard Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://127.0.0.1:3000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Dashboard Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: dashboard_zap_scan

      - name: ZAP Scan - Administration Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://127.0.0.1:4001"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Administration Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: administration_zap_scan

      - name: ZAP Scan - Registration Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://127.0.0.1:4000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Registration Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: registration_zap_scan

      - name: ZAP Scan - Compliance Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://127.0.0.1:7000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Compliance Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: compliance_zap_scan

      - name: ZAP Scan - Reporting Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://127.0.0.1:5000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Reporting Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: reporting_zap_scan

      - name: Tear Down Services
        run: |
          echo "Stopping services..."
          docker-compose -f ./cas-registration/bciers/docker-compose-bciers-apps.yaml down

  # Retry job in case of failure
  retry-on-failure:
    needs: zap-scan
    if: failure() || (needs.zap-scan.result != 'success' && fromJSON(github.run_attempt) < 3 && !cancelled())
    runs-on: ubuntu-latest
    steps:
      - name: Retry ZAP Scan
        run: gh workflow run retry-workflow.yaml -F run_id=${{ github.run_id }}
