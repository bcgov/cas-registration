name: ZAP OWASP Scan Code

on:
  workflow_call:
    inputs:
      zap_fail_on_risk_level:
        description: "Risk level of found errors, on or above which this action will fail. 0: Informational, 1: Low, 2: Medium, 3: High."
        required: true
        type: number

env:
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
  KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
  KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
  KEYCLOAK_LOGIN_URL: ${{ secrets.KEYCLOAK_LOGIN_URL }}
  GH_TOKEN: ${{ github.token }}

jobs:
  zap-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Start all services using Docker Compose
      - name: Start Services with Docker Compose
        run: |
          echo "Starting services..."
          docker compose -f ./bciers/docker-compose-bciers-apps.yaml up -d --wait
          echo "Waiting for services to be ready..."

      # Run ZAP Scan for Backend API
      - name: ZAP Scan - Backend API
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:8000/api"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Backend API"
          fail_action: false
          allow_issue_writing: false
          artifact_name: zap_scan_backend

      # Run ZAP Scan for Frontend Apps
      - name: ZAP Scan - Dashboard Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:3000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Dashboard Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: zap_scan_dashboard

      - name: ZAP Scan - Administration Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:4001"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Administration Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: zap_scan_administration

      - name: ZAP Scan - Registration Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:4000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Registration Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: zap_scan_registration

      - name: ZAP Scan - Compliance Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:7000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Compliance Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: zap_scan_compliance

      - name: ZAP Scan - Reporting Frontend
        uses: zaproxy/action-baseline@v0.14.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:5000"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: "OWASP Baseline - Reporting Frontend"
          fail_action: false
          allow_issue_writing: false
          artifact_name: zap_scan_reporting

      - uses: actions/download-artifact@v4
        with:
          path: zap
          pattern: zap_scan*

      - name: Check error severity
        run: |
          find ./zap/ -type f | \
          grep "report_json.json" | \
          xargs cat | \
          jq --arg failure_level "${{ inputs.zap_fail_on_risk_level }}" '. as $parent | .site[].alerts[] | select(.riskcode | tonumber >= ( $failure_level | tonumber )) | { host: $parent.site[0]."@name", error: .name, risk: .riskdesc, alertRef: .pluginid, urls: [.instances[].uri] | join(", ") }' \
          > errors.txt

          if [ -s errors.txt ]; then

            echo "Found errors with severity/risk level higher than $ZAP_FAILURE_RISK_LEVEL,"
            echo "for more information, consult the logs of the individual zap actions."

            echo "Errors found:"
            cat errors.txt
            exit 1
          fi
