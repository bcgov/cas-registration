name: pre-commit

on:
  push:
  workflow_dispatch:

jobs:
  install-client-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn install --frozen-lockfile
        working-directory: ./client

  install-server-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          # do this dynamically with tool-versions version
          python-version: "3.9.16"
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        working-directory: ./bc_obps
      - name: is pylint installed?
        run: |
          poetry run pylint --version
          echo $PATH
        working-directory: ./bc_obps
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

  # yarn-test:
  #   needs: install-client-dev-tools
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: dev env setup
  #       uses: ./.github/actions/dev-env-setup
  #     - run: yarn test
  #       working-directory: ./client
  pre-commit:
    needs: ["install-client-dev-tools", "install-server-dev-tools"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: pip install -r requirements.txt
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          # do this dynamically with tool-versions version
          python-version: "3.9.16"
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        working-directory: ./bc_obps
      - name: is pylint installed?
        run: |
          poetry run pylint --version
          echo $PATH
        working-directory: ./bc_obps
      - uses: pre-commit/action@v3.0.0
      # - uses: actions/setup-python@v2
      - uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest
      # - name: Analyze Kustomize Manifests
      #   run: |
      #     pwd
      #     ls -al
      #     curl https://get.datree.io | /bin/bash
      #     datree test tekton/base/pipelines/* --ignore-missing-schemas --no-record
      #     echo "scanning tasks..."
      #     datree test tekton/base/tasks/*     --ignore-missing-schemas --no-record
      #     echo "scan triggers..."
      #     datree test tekton/base/triggers/*  --ignore-missing-schemas --no-record
