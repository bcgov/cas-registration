name: pre-commit

on:
  push:
  workflow_dispatch:

jobs:
  install-client-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn install --frozen-lockfile
        working-directory: ./client

  install-server-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          # do this dynamically with tool-versions version
          python-version: "3.9.16"
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Install Poetry dependencies
        run: poetry install
      # - name: Cache poetry installer
      #   uses: actions/cache@v3
      #   id: cache-poetry-installer
      #   env:
      #     cache-name: cache-poetry-installer
      #   with:
      #     path: "~/poetry_installer"
      #     key: "poetry-installer-1.3.1"
      # - name: Download poetry installer
      #   if: steps.cache-poetry-installer.outputs.cache-hit != 'true'
      #   run: |
      #     echo
      #     mkdir ~/poetry_installer
      #     curl -sSL https://install.python-poetry.org > ~/poetry_installer/install-poetry.py
      # - name: Install poetry (api)
      #   run: |
      #     cd ~/poetry_installer
      #     python install-poetry.py --version 1.3.1
      #     poetry config virtualenvs.create true
      #     poetry config virtualenvs.in-project false
      # - name: Cache poetry
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: cache-poetry
      #   with:
      #     path: ~/.cache/pypoetry
      #     key: ${{ runner.os }}-poetry-1.3.1-cache-${{ hashFiles('**/poetry.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-poetry-1.3.1-cache-
      # - name: Cache .venv
      #   id: cache-venv
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/bc_obps/.venv
      #     key: ${{ runner.os }}-venv-poetry-1.3.1-${{ hashFiles('**/poetry.lock') }}
      # - name: Install python dependencies using poetry (api)
      #   if: steps.cache-venv.outputs.cache-hit != 'true'
      #   working-directory: ./bc_obps
      #   run: |
      #     poetry run python -m pip install --upgrade pip
      #     poetry install
      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3
  yarn-test:
    needs: install-client-dev-tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn test
        working-directory: ./client
  pre-commit:
    needs: ["install-client-dev-tools", "install-server-dev-tools"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - uses: pre-commit/action@v3.0.0
      # - uses: actions/setup-python@v2
      - uses: terraform-linters/setup-tflint@v1
        with:
          tflint_version: latest
      - name: Analyze Kustomize Manifests
        run: |
          pwd
          ls -al
          curl https://get.datree.io | /bin/bash
          datree test tekton/base/pipelines/* --ignore-missing-schemas --no-record
          echo "scanning tasks..."
          datree test tekton/base/tasks/*     --ignore-missing-schemas --no-record
          echo "scan triggers..."
          datree test tekton/base/triggers/*  --ignore-missing-schemas --no-record
