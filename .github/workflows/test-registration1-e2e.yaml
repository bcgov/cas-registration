# This file is used for tests that use Nx app containers.
# For tests that don't require containers to be built first, see test-code.yaml

name: Test BCIERS Nx App containers

on:
  workflow_call:

env:
  PGUSER: postgres
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
  KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

jobs:
  e2e-tests:
    name: üß™ e2e tests ${{ matrix.file }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        cache_dir: [~/.cache/ms-playwright]
        file:
          - "bciers/apps/registration1/e2e/pages/authenticated/dashboard/profile/page.spec.ts"
          - "bciers/apps/registration1/e2e/pages/authenticated/dashboard/page.spec.ts"
          - "bciers/apps/registration1/e2e/pages/authenticated/routes/page.spec.ts"
          - "bciers/apps/registration1/e2e/pages/onboarding/home/page.spec.ts"
          - "bciers/apps/registration1/e2e/workflows/bceidbusiness/industry_user_admin.spec.ts"
          - "bciers/apps/registration1/e2e/workflows/bceidbusiness/industry_user.spec.ts"
          - "bciers/apps/registration1/e2e/workflows/bceidbusiness/new_user.spec.ts"
          - "bciers/apps/registration1/e2e/workflows/idir/cas_admin.spec.ts"
          - "bciers/apps/registration1/e2e/workflows/idir/cas_analyst.spec.ts"
          - "bciers/apps/registration1/e2e/workflows/idir/cas_pending.spec.ts"
          # Add more files as needed

    steps:
      - uses: actions/checkout@v4

      - name: üéÅ setup dev env
        uses: ./.github/actions/dev-env-setup

      - name: üéÅ setup local app
        uses: ./.github/actions/run-registration1-app
        with:
          django_secret_key: ${{ env.DJANGO_SECRET_KEY }}
          keycloak_client_id: ${{ env.KEYCLOAK_CLIENT_ID }}
          keycloak_client_secret: ${{ env.KEYCLOAK_CLIENT_SECRET }}
          nextauth_secret: ${{ env.NEXTAUTH_SECRET }}

      - name: ‚ö°Ô∏è cache Playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ${{ matrix.cache_dir }}
          key: ${{ runner.os }}-ms-playwright-${{ matrix.os }}

      - name: üì• install Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps
        working-directory: ./bciers/apps/registration1

      - name: üé≠ Run Playwright Tests
        run: |
          npx happo-e2e -- npx playwright test ${{ matrix.file }}
        env:
          XDEBUG: pw:api,pw:browser*
          API_URL: http://127.0.0.1:8000/api/
          DB_USER: postgres
          DB_NAME: registration
          DB_PORT: 5432
          DB_HOST: localhost
          E2E_BASEURL: http://localhost:3000/
          E2E_CAS_USER: ${{ secrets.E2E_CAS_USER }}
          E2E_CAS_USER_GUID: ${{ secrets.E2E_CAS_USER_GUID }}
          E2E_CAS_USER_PASSWORD: ${{ secrets.E2E_CAS_USER_PASSWORD }}
          E2E_CAS_ADMIN_STORAGE_STATE: ${{ secrets.E2E_CAS_ADMIN_STORAGE_STATE }}
          E2E_CAS_ANALYST_STORAGE_STATE: ${{ secrets.E2E_CAS_ANALYST_STORAGE_STATE }}
          E2E_CAS_PENDING_STORAGE_STATE: ${{ secrets.E2E_CAS_PENDING_STORAGE_STATE }}
          E2E_INDUSTRY_USER_ADMIN: bc-cas-dev
          E2E_INDUSTRY_USER_ADMIN_GUID: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_GUID }}
          E2E_INDUSTRY_USER_ADMIN_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_PASSWORD }}
          E2E_INDUSTRY_USER_ADMIN_STORAGE_STATE: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_STORAGE_STATE }}
          E2E_INDUSTRY_USER: bc-cas-dev-secondary
          E2E_INDUSTRY_USER_GUID: ${{ secrets.E2E_INDUSTRY_USER_GUID }}
          E2E_INDUSTRY_USER_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_PASSWORD }}
          E2E_INDUSTRY_USER_STORAGE_STATE: ${{ secrets.E2E_INDUSTRY_USER_STORAGE_STATE }}
          E2E_NEW_USER: bc-cas-dev-three
          E2E_NEW_USER_GUID: ${{ secrets.E2E_NEW_USER_GUID }}
          E2E_NEW_USER_PASSWORD: ${{ secrets.E2E_NEW_USER_PASSWORD }}
          E2E_NEW_USER_STORAGE_STATE: ${{ secrets.E2E_NEW_USER_STORAGE_STATE }}
          HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
          HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
          HAPPO_NONCE: ${{ github.sha }}-reg1
          HAPPO_PROJECT: cas-registration1
          SMTP_CONNECTION_STRING: smtp://@localhost:1025
        working-directory: ./bciers/apps/registration1

      - name: üíæ save test report artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          artifact-name: blob-report-${{ matrix.file.split('/').join('-') }}
          path: bciers/blob-report
          retention-days: 1
  # Merge the e2e blob reports to one HTML report
  e2e-report:
    name: üìä e2e report artifact
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          # To minimize the report file size only download Chromium reports
          # If you want to debug other reports, add the * pattern back in temporarily
          pattern: blob-report-chromium #blob-report-*
          merge-multiple: true
      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 14
  happo-finalize:
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup

      - name: finalize happo e2e tests
        env:
          HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
          HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
          HAPPO_NONCE: ${{ github.sha }}-reg1
        run: npx happo-e2e finalize
        working-directory: ./bciers/apps/registration1
