# This file is used for tests that use Nx app containers.
# For tests that don't require containers to be built first, see test-code.yaml

name: Test BCIERS Nx App containers

on:
  workflow_call:

env:
  PGUSER: postgres
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
  KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

jobs:
  e2e-tests:
    name: 🧪 e2e tests Chromium
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4

      - name: 🎁 setup dev env
        uses: ./.github/actions/dev-env-setup

      - name: 🎁 setup local app
        uses: ./.github/actions/run-registration1-app
        with:
          django_secret_key: ${{ env.DJANGO_SECRET_KEY }}
          keycloak_client_id: ${{ env.KEYCLOAK_CLIENT_ID }}
          keycloak_client_secret: ${{ env.KEYCLOAK_CLIENT_SECRET }}
          nextauth_secret: ${{ env.NEXTAUTH_SECRET }}
      - name: ⚡️ cache Playwright binaries
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-chromium-ms-playwright-registration

      - name: 📥 install Playwright Chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium
        working-directory: ./bciers/apps/registration1

      - name: 🎭 Run Playwright Tests
        run: |
          npx happo-e2e -- npx playwright test --project=chromium bciers/apps/registration1/e2e/*
        env:
          XDEBUG: pw:api,pw:browser*
          API_URL: http://127.0.0.1:8000/api/
          DB_USER: postgres
          DB_NAME: registration
          DB_PORT: 5432
          DB_HOST: localhost
          E2E_BASEURL: http://localhost:3000/
          E2E_CAS_USER: ${{ secrets.E2E_CAS_USER }}
          E2E_CAS_USER_GUID: ${{ secrets.E2E_CAS_USER_GUID }}
          E2E_CAS_USER_PASSWORD: ${{ secrets.E2E_CAS_USER_PASSWORD}}
          E2E_CAS_ADMIN_STORAGE_STATE: ${{ secrets.E2E_CAS_ADMIN_STORAGE_STATE}}
          E2E_CAS_ANALYST_STORAGE_STATE: ${{ secrets.E2E_CAS_ANALYST_STORAGE_STATE}}
          E2E_CAS_PENDING_STORAGE_STATE: ${{ secrets.E2E_CAS_PENDING_STORAGE_STATE}}
          E2E_INDUSTRY_USER_ADMIN: bc-cas-dev
          E2E_INDUSTRY_USER_ADMIN_GUID: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_GUID }}
          E2E_INDUSTRY_USER_ADMIN_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_PASSWORD }}
          E2E_INDUSTRY_USER_ADMIN_STORAGE_STATE: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_STORAGE_STATE}}
          E2E_INDUSTRY_USER: bc-cas-dev-secondary
          E2E_INDUSTRY_USER_GUID: ${{ secrets.E2E_INDUSTRY_USER_GUID }}
          E2E_INDUSTRY_USER_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_PASSWORD }}
          E2E_INDUSTRY_USER_STORAGE_STATE: ${{ secrets.E2E_INDUSTRY_USER_STORAGE_STATE}}
          E2E_NEW_USER: bc-cas-dev-three
          E2E_NEW_USER_GUID: ${{ secrets.E2E_NEW_USER_GUID }}
          E2E_NEW_USER_PASSWORD: ${{ secrets.E2E_NEW_USER_PASSWORD }}
          E2E_NEW_USER_STORAGE_STATE: ${{ secrets.E2E_NEW_USER_STORAGE_STATE}}
          HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
          HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
          HAPPO_PROJECT: cas-registration1
          SMTP_CONNECTION_STRING: smtp://@localhost:1025
        working-directory: ./bciers/apps/registration1
  #     Reports weren't being used regularly though leaving this in here for debugging purposes.
  #     Uncomment these if they are required to debug problematic e2e issues
  #     - name: 💾 save Chromium report artifact
  #       # prefer to upload the report only in case of test failure
  #       if: failure()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         # Store all of the reports separately by reconfiguring the report name
  #         name: blob-report-registration1-chromium
  #         path: bciers/blob-report
  #         retention-days: 1
  #
  # e2e-report:
  #   name: 📊 e2e report artifact
  #   runs-on: ubuntu-latest
  #   needs: [e2e-tests]
  #   if: ${{ always() && contains(needs.*.result, 'failure') && inputs.is_nx_affected }}
  #   steps:
  #     - name: Download blob reports from GitHub Actions Artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: all-blob-reports
  #         # To minimize the report file size only download Chromium reports
  #         # If you want to debug other reports, add the * pattern back in temporarily
  #         pattern: blob-report-registration1-chromium #blob-report-*
  #         merge-multiple: true
  #
  #     - name: Merge into HTML Report
  #       run: npx playwright merge-reports --reporter html ./all-blob-reports
  #     - name: Upload HTML report
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: playwright-report-registration1
  #         path: playwright-report
  #         retention-days: 14

  # Ensure the e2e tests and e2e report completed successfully
  e2e:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - run: exit 1
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
          }}
