name: Nx pipeline - pull request e2e

on:
  push:
    branches: [chore/nx-e2e]

defaults:
  run:
    shell: bash

env:
  PGUSER: postgres
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
  KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

concurrency:
  # See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
  group: pullrequest-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

# Using a dev-env-setup agnostic version of the workflow
# jobs: 
#   setup:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#       - uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           cache: 'yarn'
#       - run: yarn install --immutable
#         working-directory: ./bciers

jobs:
  install-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: dev env Setup
        uses: ./.github/actions/dev-env-setup

  backend-docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/bcgov/cas-reg-backend
          tags: |
            type=sha,format=long,prefix=
            latest
            type=ref,event=pr
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-bc_obps-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-bc_obps
      - name: Build image
        uses: docker/build-push-action@v5
        with:
          context: bc_obps
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          file: bc_obps/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  nx-docker-build-registration:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bciers
    needs: backend-docker-build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/bcgov/cas-reg-frontend
          tags: |
            type=sha,format=long,prefix=
            latest
            type=ref,event=pr
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Install dependencies
        run: |
          corepack enable
          yarn install --immutable
          cd ../bciers && yarn install --immutable
      - uses: actions/setup-node@v3
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v4
        with:
          # This will need to be updated when giraffe-develop merges with develop
          main-branch-name: "develop"
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-bciers-registration${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-bciers-registration
      - name: Build images
        env:
          INPUT_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          INPUT_PUSH: true
          INPUT_TAGS: ${{ steps.meta.outputs.tags }}
          INPUT_LABELS: ${{ steps.meta.output.labels }}
          INPUT_CACHE_FROM: type=local,src=/tmp/.buildx-cache
          INPUT_CACHE_TO: type=local,dest=/tmp/.buildx-cache-new
        run: |
          npx nx container registration --skip-nx-cache
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  e2e-tests:
    name: Nx üß™ e2e tests
    runs-on: ubuntu-latest
    needs:
      - backend-docker-build
      - nx-docker-build-registration
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        include:
          # - project: chromium
          #   os: ubuntu-latest
          #   cache_dir: ~/.cache/ms-playwright
          # - project: firefox
          #   os: ubuntu-latest
          #   cache_dir: ~/.cache/ms-playwright
          # - project: webkit
          #   os: macos-12
          #   cache_dir: ~/Library/Caches/ms-playwright
          - target: "e2e-ci--e2e/pages/authenticated/dashboard/page.spec.ts"
          - target: "e2e-ci--e2e/pages/authenticated/dashboard/profile/page.spec.ts"

    steps:
      - uses: actions/checkout@v4

      - name: ‚úÇÔ∏è determine affected monorepo projects
        run: |
          echo affected-apps=$(npx nx show projects --affected --type app) >> $GITHUB_OUTPUT
          echo affected-e2es=$(npx nx show projects --affected --type e2e) >> $GITHUB_OUTPUT
          echo affected-libs=$(npx nx show projects --affected --type libs) >> $GITHUB_OUTPUT
          echo affected-e2e-ci-split=$(nx show project registration | jq -c '[{"project": .name, "target": .targets | keys[] | select(contains("e2e-ci--"))}]') >> $GITHUB_OUTPUT
          echo affected-r-e2e-ci-split=$(nx show project reporting | jq -c '[{"project": .name, "target": .targets | keys[] | select(contains("e2e-ci--"))}]') >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT | grep affected

      - name: üéÅ setup dev env
        uses: ./.github/actions/dev-env-setup

      - name: üéÅ setup local app
        uses: ./.github/actions/local-app-run
        with:
          django_secret_key: ${{ env.DJANGO_SECRET_KEY }}
          keycloak_client_id: ${{ env.KEYCLOAK_CLIENT_ID }}
          keycloak_client_secret: ${{ env.KEYCLOAK_CLIENT_SECRET }}
          nextauth_secret: ${{ env.NEXTAUTH_SECRET }}

      # - name: ‚ö°Ô∏è cache Playwright binaries
      #   uses: actions/cache@v4
      #   id: playwright-cache
      #   with:
      #     path: ${{ matrix.cache_dir }}
      #     key: ${{ runner.os }}-${{ matrix.project }}-playwright-registration

      # - name: üì• install Playwright ${{ matrix.project }}
      #   if: steps.playwright-cache.outputs.cache-hit != 'true'
      #   run: npx playwright install --with-deps ${{ matrix.project }}
      #   working-directory: ./bciers/apps/registration

      - name: üé≠ Run Playwright Tests
        run: |
          npx happo-e2e -- npx nx run registration:${{ matrix.target }}
        env:
          XDEBUG: pw:api,pw:browser*
          API_URL: http://127.0.0.1:8000/api/
          DB_USER: postgres
          DB_NAME: registration
          DB_PORT: 5432
          DB_HOST: localhost
          E2E_BASEURL: http://localhost:3000/
          E2E_CAS_USER: ${{ secrets.E2E_CAS_USER }}
          E2E_CAS_USER_GUID: ${{ secrets.E2E_CAS_USER_GUID }}
          E2E_CAS_USER_PASSWORD: ${{ secrets.E2E_CAS_USER_PASSWORD}}
          E2E_CAS_ADMIN_STORAGE: ${{ secrets.E2E_CAS_ADMIN_STORAGE}}
          E2E_CAS_ANALYST_STORAGE: ${{ secrets.E2E_CAS_ANALYST_STORAGE}}
          E2E_CAS_PENDING_STORAGE: ${{ secrets.E2E_CAS_PENDING_STORAGE}}
          E2E_INDUSTRY_USER_ADMIN: bc-cas-dev
          E2E_INDUSTRY_USER_ADMIN_GUID: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_GUID }}
          E2E_INDUSTRY_USER_ADMIN_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_PASSWORD }}
          E2E_INDUSTRY_USER_ADMIN_STORAGE: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_STORAGE}}
          E2E_INDUSTRY_USER: bc-cas-dev-secondary
          E2E_INDUSTRY_USER_GUID: ${{ secrets.E2E_INDUSTRY_USER_GUID }}
          E2E_INDUSTRY_USER_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_PASSWORD }}
          E2E_INDUSTRY_USER_STORAGE: ${{ secrets.E2E_INDUSTRY_USER_STORAGE}}
          E2E_NEW_USER: bc-cas-dev-three
          E2E_NEW_USER_GUID: ${{ secrets.E2E_NEW_USER_GUID }}
          E2E_NEW_USER_PASSWORD: ${{ secrets.E2E_NEW_USER_PASSWORD }}
          E2E_NEW_USER_STORAGE: ${{ secrets.E2E_NEW_USER_STORAGE}}
          HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
          HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
          HAPPO_NONCE: ${{ github.sha }}
          SMTP_CONNECTION_STRING: smtp://@localhost:1025
        working-directory: ./bciers/apps/registration
      # - name: üíæ save ${{ matrix.project }} report artifact
      #   # prefer to upload the report only in case of test failure
      #   if: failure()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     # Store all of the reports separately by reconfiguring the report name
      #     name: blob-report-${{ matrix.project }}
      #     path: bciers/blob-report
      #     retention-days: 1
  # Merge the e2e blob reports to one HTML report
  e2e-report:
    if: false
    name: üìä e2e report artifact
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-chromium #blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        run: npx playwright merge-reports --reporter html ./all-blob-reports
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 14
  # Ensure the e2e tests and e2e report completed successfully
  e2e:
    if: false
    # if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - run: exit 1
        if: >-
          ${{
               contains(needs.*.result, 'failure')
            || contains(needs.*.result, 'cancelled')
            || contains(needs.*.result, 'skipped')
          }}

  happo-finalize:
    if: false
    runs-on: ubuntu-latest
    needs: [e2e-tests]
    steps:
      - uses: actions/checkout@v4
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: finalize happo e2e tests
        env:
          HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
          HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
          HAPPO_NONCE: ${{ github.sha }}
        run: npx happo-e2e finalize
        working-directory: ./bciers/apps/registration

# env:
#   PGUSER: postgres
#   # SKIP_GENERATED_CACHE: ${{ contains(github.event.pull_request.labels.*.name, 'skip-generated-cache') }}
#   # DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
#   # KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
#   # KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
#   # NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}


# jobs:
#   prepare:
#     steps:
#       - uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#       - uses: actions/setup-node@v4
#         with:
#           node-version: 20
#           cache: 'yarn'

#   install-dev-tools:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v4
#       - name: dev env setup
#         uses: ./.github/actions/dev-env-setup
#       - run: yarn install --immutable
#         working-directory: ./bciers
#   nx-tests:
#     needs: install-dev-tools
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ./bciers
#     steps:
#       - name: Checkout for nx
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0
#       - name: Run Nx tests
#         run: yarn nx run-many -t test --skipNxCache

