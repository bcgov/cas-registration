name: Gitleaks Secret Detection

on:
  workflow_call:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, edited, synchronize]
  pull_request_review_comment:
    types: [created, edited]

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Gitleaks
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_COMMUNITY: "true"

      - name: Run Gitleaks on repository
        run: |
          gitleaks detect --source . --config .gitleaks.toml --verbose --redact
        continue-on-error: true

      - name: Run Gitleaks on issues and comments
        env:
          EVENT_NAME: ${{ github.event_name }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMENT_ID: ${{ github.event.comment.id }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          # Create temporary files for content to avoid shell injection
          TEMP_DIR=$(mktemp -d)
          CONTENT_FILE="$TEMP_DIR/content.txt"

          # Get issue/PR content based on event type and write to file
          if [ "$EVENT_NAME" = "issues" ]; then
            echo "Scanning issue #$ISSUE_NUMBER"
            printf '%s\n' "$ISSUE_TITLE" > "$CONTENT_FILE"
            printf '%s\n' "$ISSUE_BODY" >> "$CONTENT_FILE"
          elif [ "$EVENT_NAME" = "issue_comment" ]; then
            echo "Scanning issue comment #$COMMENT_ID"
            printf '%s\n' "$COMMENT_BODY" > "$CONTENT_FILE"
          elif [ "$EVENT_NAME" = "pull_request" ]; then
            echo "Scanning PR #$PR_NUMBER"
            printf '%s\n' "$PR_TITLE" > "$CONTENT_FILE"
            printf '%s\n' "$PR_BODY" >> "$CONTENT_FILE"
          elif [ "$EVENT_NAME" = "pull_request_review_comment" ]; then
            echo "Scanning PR review comment #$COMMENT_ID"
            printf '%s\n' "$COMMENT_BODY" > "$CONTENT_FILE"
          fi

          # Run gitleaks on the file if content exists
          if [ -s "$CONTENT_FILE" ]; then
            gitleaks detect --source "$CONTENT_FILE" --config .gitleaks.toml --verbose --redact || true
          fi

          # Clean up
          rm -rf "$TEMP_DIR"
        continue-on-error: true

      - name: Comment on issue/PR if secrets found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue?.number || context.payload.pull_request?.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üö® **Secret Detection Alert**')
            );

            if (botComment) {
              console.log('Bot comment already exists, updating...');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: `üö® **Secret Detection Alert**\n\n‚ö†Ô∏è **WARNING**: Potential secrets detected in this ${context.eventName.includes('pull_request') ? 'pull request' : 'issue'}!\n\nPlease review and remove any sensitive information such as:\n- API keys\n- Passwords\n- Tokens\n- Database credentials\n- Private keys\n\n**Action Required**: Edit your ${context.eventName.includes('pull_request') ? 'PR' : 'issue'} to remove sensitive data before proceeding.\n\n---\n*This is an automated security check by Gitleaks.*`
              });
            } else {
              console.log('Creating new bot comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue?.number || context.payload.pull_request?.number,
                body: `üö® **Secret Detection Alert**\n\n‚ö†Ô∏è **WARNING**: Potential secrets detected in this ${context.eventName.includes('pull_request') ? 'pull request' : 'issue'}!\n\nPlease review and remove any sensitive information such as:\n- API keys\n- Passwords\n- Tokens\n- Database credentials\n- Private keys\n\n**Action Required**: Edit your ${context.eventName.includes('pull_request') ? 'PR' : 'issue'} to remove sensitive data before proceeding.\n\n---\n*This is an automated security check by Gitleaks.*`
              });
            }
