name: TruffleHog Secret Detection

on:
  workflow_call:
  issues:
    types: [opened, edited]
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, edited, synchronize]
  pull_request_review_comment:
    types: [created, edited]

jobs:
  trufflehog:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog on repository
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified --json
        continue-on-error: true

      - name: Prepare content for scanning
        env:
          EVENT_NAME: ${{ github.event_name }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          COMMENT_ID: ${{ github.event.comment.id }}
          COMMENT_BODY: ${{ github.event.comment.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          # Create temporary files for content to avoid shell injection
          TEMP_DIR=$(mktemp -d)
          CONTENT_FILE="$TEMP_DIR/content.txt"

          echo "=== Preparing Content for Scanning ==="

          # Get issue/PR content based on event type and write to file
          if [ "$EVENT_NAME" = "issues" ]; then
            echo "Preparing issue #$ISSUE_NUMBER content"
            printf '%s\n' "$ISSUE_TITLE" > "$CONTENT_FILE"
            printf '%s\n' "$ISSUE_BODY" >> "$CONTENT_FILE"
          elif [ "$EVENT_NAME" = "issue_comment" ]; then
            echo "Preparing issue comment #$COMMENT_ID content"
            printf '%s\n' "$COMMENT_BODY" > "$CONTENT_FILE"
          elif [ "$EVENT_NAME" = "pull_request" ]; then
            echo "Preparing PR #$PR_NUMBER content"
            printf '%s\n' "$PR_TITLE" > "$CONTENT_FILE"
            printf '%s\n' "$PR_BODY" >> "$CONTENT_FILE"
          elif [ "$EVENT_NAME" = "pull_request_review_comment" ]; then
            echo "Preparing PR review comment #$COMMENT_ID content"
            printf '%s\n' "$COMMENT_BODY" > "$CONTENT_FILE"
          fi

          # Check if content exists and create a temporary directory for TruffleHog
          if [ -s "$CONTENT_FILE" ]; then
            echo "Content prepared for scanning"
            echo "CONTENT_DIR=$TEMP_DIR" >> $GITHUB_ENV
          else
            echo "No content to scan"
            echo "CONTENT_DIR=" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Run TruffleHog on content
        if: env.CONTENT_DIR != ''
        run: |
          echo "Running TruffleHog on prepared content..."
          trufflehog filesystem --path="$CONTENT_DIR" --only-verified --json > trufflehog-content-results.json || true
          echo "TruffleHog content scan completed"
        env:
          CONTENT_DIR: ${{ env.CONTENT_DIR }}
        continue-on-error: true

      - name: Check for secrets and comment
        if: always()
        run: |
          echo "Checking for secrets in TruffleHog results..."

          # Check if any results files exist and contain findings
          SECRETS_FOUND=false

          if [ -f "trufflehog-repo-results.json" ] && [ -s "trufflehog-repo-results.json" ]; then
            echo "Checking repository scan results..."
            if jq -e '. | length > 0' trufflehog-repo-results.json > /dev/null 2>&1; then
              echo "Secrets found in repository scan"
              SECRETS_FOUND=true
            fi
          fi

          if [ -f "trufflehog-content-results.json" ] && [ -s "trufflehog-content-results.json" ]; then
            echo "Checking content scan results..."
            if jq -e '. | length > 0' trufflehog-content-results.json > /dev/null 2>&1; then
              echo "Secrets found in content scan"
              SECRETS_FOUND=true
            fi
          fi

          if [ "$SECRETS_FOUND" = "true" ]; then
            echo "SECRETS_FOUND=true" >> $GITHUB_ENV
          else
            echo "No secrets found"
            echo "SECRETS_FOUND=false" >> $GITHUB_ENV
          fi
        continue-on-error: true

      - name: Comment on issue/PR if secrets found
        if: env.SECRETS_FOUND == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read TruffleHog results
            let findings = [];
            try {
              if (fs.existsSync('trufflehog-repo-results.json')) {
                const repoResults = JSON.parse(fs.readFileSync('trufflehog-repo-results.json', 'utf8'));
                if (Array.isArray(repoResults)) {
                  findings = findings.concat(repoResults);
                }
              }
              if (fs.existsSync('trufflehog-content-results.json')) {
                const contentResults = JSON.parse(fs.readFileSync('trufflehog-content-results.json', 'utf8'));
                if (Array.isArray(contentResults)) {
                  findings = findings.concat(contentResults);
                }
              }
            } catch (error) {
              console.log('Error reading TruffleHog results:', error);
            }

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue?.number || context.payload.pull_request?.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üê∑ **TruffleHog Secret Detection Alert**')
            );

            let findingsText = '';
            if (findings.length > 0) {
              findingsText = '\n**Detected Secrets:**\n';
              findings.slice(0, 5).forEach((finding, index) => {
                const detector = finding.DetectorName || 'Unknown';
                const file = finding.SourceMetadata?.Data?.Filesystem?.file || 'Unknown file';
                findingsText += `${index + 1}. **${detector}** in \`${file}\`\n`;
              });
              if (findings.length > 5) {
                findingsText += `\n... and ${findings.length - 5} more findings\n`;
              }
            } else {
              findingsText = '\nTruffleHog detected potential secrets but could not parse detailed results.\n';
            }

            const commentBody = `üê∑ **TruffleHog Secret Detection Alert**\n\n‚ö†Ô∏è **WARNING**: Potential secrets detected in this ${context.eventName.includes('pull_request') ? 'pull request' : 'issue'}!\n\n${findingsText}\n**Action Required**: Edit your ${context.eventName.includes('pull_request') ? 'PR' : 'issue'} to remove sensitive data before proceeding.\n\n---\n*This is an automated security check by TruffleHog.*`;

            if (botComment) {
              console.log('Bot comment already exists, updating...');
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              console.log('Creating new bot comment...');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue?.number || context.payload.pull_request?.number,
                body: commentBody
              });
            }

      - name: Upload TruffleHog results as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trufflehog-results
          path: |
            trufflehog-repo-results.json
            trufflehog-content-results.json
          if-no-files-found: ignore
