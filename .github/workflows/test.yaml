name: Test Registration App

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

env:
  PGUSER: postgres
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

jobs:
  install-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn install --frozen-lockfile
        working-directory: ./client

  backend-docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/bcgov/cas-reg-backend
          tags: |
            type=sha,format=long,prefix=
            latest
            type=ref,event=pr
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-bc_obps-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-bc_obps
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: bc_obps
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          file: bc_obps/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  frontend-docker-build:
    runs-on: ubuntu-latest
    needs: backend-docker-build # Necessary to ensure backend image is built first
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/bcgov/cas-reg-frontend
          tags: |
            type=sha,format=long,prefix=
            latest
            type=ref,event=pr
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-client-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-client
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: client
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          file: client/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  e2e:
    needs:
      - backend-docker-build
      - frontend-docker-build
      - install-dev-tools
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: dev env setup
        uses: ./.github/actions/dev-env-setup

      - name: run app locally
        uses: ./.github/actions/local-app-run
        with:
          django_secret_key: ${{ env.DJANGO_SECRET_KEY }}

      - name: Install Playwright Browsers
        run: yarn playwright install --with-deps
        working-directory: ./client

      - name: Run Playwright tests
        run: |
          DEBUG=pw:browser npx playwright test --workers=1 client/e2e/*
        env:
          BASEURL: http://localhost:3000/
          CAS_ADMIN_STORAGE: playwright/.auth/cas_admin.json
          CAS_ANALYST_STORAGE: playwright/.auth/cas_analyst.json
          CAS_PENDING_STORAGE: playwright/.auth/cas_pending.json
          INDUSTRY_USER_STORAGE: playwright/.auth/industry_user.json
          INDUSTRY_USER_ADMIN_STORAGE: playwright/.auth/industry_user_admin.json
          NEW_USER_STORAGE: playwright/.auth/new_user.json
          CAS_USERNAME: ${{ secrets.CAS_USER }}
          CAS_PASSWORD: ${{ secrets.CAS_PASSWORD }}
          CAS_USER_GUID: ${{ secrets.CAS_USER_GUID }}
          INDUSTRY_USER_ADMIN_USERNAME: bc-cas-dev
          INDUSTRY_USER_ADMIN_PASSWORD: ${{ secrets.INDUSTRY_USER_ADMIN_PASSWORD }}
          INDUSTRY_USER_USERNAME: bc-cas-dev-secondary
          INDUSTRY_USER_PASSWORD: ${{ secrets.INDUSTRY_USER_PASSWORD }}
          NEW_USER_USERNAME: bc-cas-dev-three
          NEW_USER_PASSWORD: ${{ secrets.NEW_USER_PASSWORD }}
          NEW_USER_GUID: ${{ secrets.NEW_USER_GUID }}
          DB_USER: postgres
          DB_NAME: registration
          DB_PORT: 5432
          DB_HOST: localhost
        working-directory: ./client

      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: client/playwright-report
          retention-days: 30
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cas-admin-storage
          path: client/.auth/cas_admin.json
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cas-analyst-storage
          path: client/.auth/cas_analyst.json
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: cas-pending-storage
          path: client/.auth/cas_pending.json
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: industry-user-storage
          path: client/.auth/industry_user.json
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: industry-user-admin-storage
          path: client/.auth/industry_user_admin.json
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: new-user-storage
          path: client/.auth/new_user.json
