name: Test Registration App

on:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]
  workflow_dispatch:

env:
  PGUSER: postgres
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  KEYCLOAK_CLIENT_ID: ${{ secrets.KEYCLOAK_CLIENT_ID }}
  KEYCLOAK_CLIENT_SECRET: ${{ secrets.KEYCLOAK_CLIENT_SECRET }}
  NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

jobs:
  install-dev-tools:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn install --frozen-lockfile
        working-directory: ./client
  yarn-test:
    needs: install-dev-tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn test
        working-directory: ./client
  yarn-audit:
    needs: install-dev-tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: yarn audit-deps
        working-directory: ./client
  pre-commit:
    needs: install-dev-tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: set pre-commit cache directory
        run: |
          echo "PRE_COMMIT_HOME=$GITHUB_WORKSPACE/.pre-commit-cache" >> $GITHUB_ENV
      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
      - name: create commitlint COMMIT_EDITMSG if not exists
        run: |
          if test -f ".git/COMMIT_EDITMSG"; then
              echo "COMMIT_EDITMSG EXISTS, skipping"
          else
              touch .git/COMMIT_EDITMSG
          fi
      - uses: actions/cache@v3
        with:
          path: |
            ./.pre-commit-cache
          key: pre-commit-${{ env.PY }}-${{ hashFiles('.pre-commit-config.yaml') }}-v3
      - run: pip install -r requirements.txt
      - uses: pre-commit/action@v3.0.0
  backend-docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/bcgov/cas-reg-backend
          tags: |
            type=sha,format=long,prefix=
            latest
            type=ref,event=pr
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-bc_obps-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-bc_obps
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: bc_obps
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          file: bc_obps/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  frontend-docker-build:
    runs-on: ubuntu-latest
    needs: backend-docker-build # Necessary to ensure backend image is built first
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/bcgov/cas-reg-frontend
          tags: |
            type=sha,format=long,prefix=
            latest
            type=ref,event=pr
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-client-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-client
      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: client
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          file: client/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  zap-owasp:
    needs:
      ["backend-docker-build", "frontend-docker-build", "install-dev-tools"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: run app locally
        uses: ./.github/actions/local-app-run
        with:
          django_secret_key: ${{ env.DJANGO_SECRET_KEY }}
      - name: ZAP Frontend Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "owasp/zap2docker-stable"
          target: "http://localhost:3000/"
          rules_file_name: ".zap/rules-frontend.tsv"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: OWASP Baseline - Frontend
          fail_action: false
      - name: ZAP Backend Scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "owasp/zap2docker-stable"
          target: "http://0.0.0.0:8000/"
          rules_file_name: ".zap/rules-backend.tsv"
          cmd_options: "-a -d -T 5 -m 2"
          issue_title: OWASP Baseline - Backend
          fail_action: false

  e2e:
    name: ðŸ§ª e2e test shard (${{ matrix.shardIndex }}/${{ strategy.job-total }})
    needs:
      ["backend-docker-build", "frontend-docker-build", "install-dev-tools"]
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        shardIndex: [1, 2, 3, 4]
        shardTotal: [4]
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: run app locally
        uses: ./.github/actions/local-app-run
        with:
          django_secret_key: ${{ env.DJANGO_SECRET_KEY }}
          keycloak_client_id: ${{ env.KEYCLOAK_CLIENT_ID }}
          keycloak_client_secret: ${{ env.KEYCLOAK_CLIENT_SECRET }}
          nextauth_secret: ${{ env.NEXTAUTH_SECRET }}
      - name: Cache Playwright binaries
        uses: actions/cache@v3
        id: cache-playwright
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('client/yarn.lock') }}
      - name: Install Playwright Browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true'
        run: yarn playwright install --with-deps
        working-directory: ./client
      - name: Run Playwright Tests
        run: |
          DEBUG=pw:browser npx happo-e2e -- npx playwright test --shard=${{ matrix.shardIndex }}/${{ strategy.job-total }} client/e2e/*
        env:
          API_URL: http://127.0.0.1:8000/api/
          DB_USER: postgres
          DB_NAME: registration
          DB_PORT: 5432
          DB_HOST: localhost
          E2E_BASEURL: http://localhost:3000/
          E2E_CAS_USER: ${{ secrets.E2E_CAS_USER }}
          E2E_CAS_USER_GUID: ${{ secrets.E2E_CAS_USER_GUID }}
          E2E_CAS_USER_PASSWORD: ${{ secrets.E2E_CAS_USER_PASSWORD}}
          E2E_CAS_ADMIN_STORAGE: ${{ secrets.E2E_CAS_ADMIN_STORAGE}}
          E2E_CAS_ANALYST_STORAGE: ${{ secrets.E2E_CAS_ANALYST_STORAGE}}
          E2E_CAS_PENDING_STORAGE: ${{ secrets.E2E_CAS_PENDING_STORAGE}}
          E2E_INDUSTRY_USER_ADMIN: bc-cas-dev
          E2E_INDUSTRY_USER_ADMIN_GUID: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_GUID }}
          E2E_INDUSTRY_USER_ADMIN_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_PASSWORD }}
          E2E_INDUSTRY_USER_ADMIN_STORAGE: ${{ secrets.E2E_INDUSTRY_USER_ADMIN_STORAGE}}
          E2E_INDUSTRY_USER: bc-cas-dev-secondary
          E2E_INDUSTRY_USER_GUID: ${{ secrets.E2E_INDUSTRY_USER_GUID }}
          E2E_INDUSTRY_USER_PASSWORD: ${{ secrets.E2E_INDUSTRY_USER_PASSWORD }}
          E2E_INDUSTRY_USER_STORAGE: ${{ secrets.E2E_INDUSTRY_USER_STORAGE}}
          E2E_NEW_USER: bc-cas-dev-three
          E2E_NEW_USER_GUID: ${{ secrets.E2E_NEW_USER_GUID }}
          E2E_NEW_USER_PASSWORD: ${{ secrets.E2E_NEW_USER_PASSWORD }}
          E2E_NEW_USER_STORAGE: ${{ secrets.E2E_NEW_USER_STORAGE}}
          HAPPO_ENABLED: true
          HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
          HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
        working-directory: ./client
      - name: Upload blob report to GitHub Actions Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: blob-report-${{ matrix.shardIndex }}
          path: client/blob-report
          retention-days: 1
  merge-reports:
    name: ðŸ§© e2e test shard reports merging
    if: always()
    needs: [e2e]
    runs-on: ubuntu-latest
    steps:
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true

      - name: Merge into HTML Report
        working-directory: ./client
        run: npx playwright merge-reports --reporter html ./all-blob-reports

      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: client/playwright-report
          retention-days: 14
  backend-tests:
    needs:
      ["backend-docker-build", "frontend-docker-build", "install-dev-tools"]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - name: run app locally
        uses: ./.github/actions/local-app-run
        with:
          django_secret_key: ${{ env.DJANGO_SECRET_KEY }}
      - name: Run pytest
        working-directory: ./bc_obps
        run: make pythontests
  check-migrations:
    needs: install-dev-tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: dev env setup
        uses: ./.github/actions/dev-env-setup
      - run: poetry run python manage.py makemigrations --check --dry-run
        working-directory: ./bc_obps
