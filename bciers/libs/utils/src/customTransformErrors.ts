import { RJSFValidationError } from "@rjsf/utils";

const customTransformErrors = (
  errors: RJSFValidationError[],
  customFormatsErrorMessages: { [key: string]: string },
) => {
  console.log("errors", errors);
  return errors.map((error) => {
    if (error?.property) {
      if (error.message === "must be equal to constant") {
        error.message = undefined; // this is to handle errors generated by dependencies
      }
      if (
        [".cra_business_number", ".po_cra_business_number"].includes(
          error.property,
        )
      ) {
        error.message = customFormatsErrorMessages.cra_business_number;
        return error;
      }
      // brianna you'll probably ahve to do this unnested too
      if (
        [".section2.boundary_map", ".section2.process_flow_diagram"].includes(
          error.property,
        )
      ) {
        console.log("am i in if");
        if (error.message === "must be string") {
          error.message = undefined; // this is to handle errors generated by dependencies
        }
      }
      if (
        ["statutory_declaration", "new_entrant_application"].includes(
          error.property,
        )
      ) {
        error.message = customFormatsErrorMessages.mandatory_attachment;
        return error;
      }
    }
    if (error?.name === "required") {
      error.message = "Required field";
      return error;
    }
    if (error?.name === "minItems") {
      const limit = error.params.limit;
      error.message = `Must not have fewer than ${limit} items`;
      return error;
    }
    if (
      error.name === "format" &&
      customFormatsErrorMessages[error.params.format]
    ) {
      error.message = customFormatsErrorMessages[error.params.format];
      return error;
    }
    return error;
  });
};

export default customTransformErrors;
