import { RJSFValidationError } from "@rjsf/utils";

const customTransformErrors = (
  errors: RJSFValidationError[],
  customFormatsErrorMessages: { [key: string]: string },
) => {
  console.log("errors before filter", errors);
  errors = errors.filter((error) => {
    // in Administration boundary_map and process_flow_diagram are in section1, and in Registration they're in section2
    if (error?.property) {
      if (
        [
          ".section1.boundary_map",
          ".section1.process_flow_diagram",
          ".section2.boundary_map",
          ".section2.process_flow_diagram",
          ".new_entrant_application",
          ".section3.new_entrant_application",
        ].includes(error.property)
      ) {
        if (
          // Sometimes these fields are a string, but sometimes they're a File
          error.message === "must be string"
        ) {
          return false;
        }
      }
      if ([".section3"].includes(error.property)) {
        // The new entrant field can be either a File or string, and if it's a File it throws the following error
        if (error.message === "must match exactly one schema in oneOf") {
          return false;
        }
      }
      // if (error.message === "must be equal to constant") {
      //   return false; // This will exclude the error from the array
      // }
    }
    return true; // Keep all other errors
  });
  console.log("errors", errors);
  return errors.map((error) => {
    if (error?.property) {
      if (error.message === "must be equal to constant") {
        error.message = undefined; // this is to handle errors generated by dependencies
      }
      if (
        [".cra_business_number", ".po_cra_business_number"].includes(
          error.property,
        )
      ) {
        error.message = customFormatsErrorMessages.cra_business_number;
        return error;
      }

      if (
        ["statutory_declaration", "new_entrant_application"].includes(
          error.property,
        )
      ) {
        error.message = customFormatsErrorMessages.mandatory_attachment;
        return error;
      }
    }
    if (error?.name === "required") {
      error.message = "Required field";
      return error;
    }
    if (error?.name === "minItems") {
      const limit = error.params.limit;
      error.message = `Must not have fewer than ${limit} items`;
      return error;
    }
    if (
      error.name === "format" &&
      customFormatsErrorMessages[error.params.format]
    ) {
      error.message = customFormatsErrorMessages[error.params.format];
      return error;
    }
    return error;
  });
};

export default customTransformErrors;
